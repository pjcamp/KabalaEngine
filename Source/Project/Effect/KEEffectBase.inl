/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  Robert Goetz (rdgoetz@iastate.edu)                            *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Effect!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include "Project/Effect/KEEffectEventDetails.h"

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &EffectBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 EffectBase::getClassTypeId(void)
{
    return _type.getId();
}
//! access the producer type of the class
inline
const EventProducerType &EffectBase::getProducerClassType(void)
{
    return _producerType;
}

//! access the producer type id of the class
inline
UInt32 EffectBase::getProducerClassTypeId(void)
{
    return _producerType.getId();
}

inline
OSG::UInt16 EffectBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/



#ifdef OSG_MT_CPTR_ASPECT
inline
void EffectBase::execSync (      EffectBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ParentSceneObjectFieldMask & whichField))
        _sfParentSceneObject.syncWith(pFrom->_sfParentSceneObject);
}
#endif


inline
const Char8 *EffectBase::getClassname(void)
{
    return "Effect";
}

inline
boost::signals2::connection EffectBase::attachActivity(UInt32 eventId,
                                                              Activity* TheActivity)
{
    return connectEvent(eventId, boost::bind(&Activity::eventProduced, TheActivity, _1, _2) );
}

inline
UInt32 EffectBase::getNumProducedEvents(void) const
{
    return getProducerType().getNumEventDescs();
}

inline
const EventDescription *EffectBase::getProducedEventDescription(const std::string &ProducedEventName) const
{
    return getProducerType().findEventDescription(ProducedEventName);
}

inline
const EventDescription *EffectBase::getProducedEventDescription(UInt32 ProducedEventId) const
{
    return getProducerType().getEventDescription(ProducedEventId);
}

inline
UInt32 EffectBase::getProducedEventId(const std::string &ProducedEventName) const
{
    return getProducerType().getProducedEventId(ProducedEventName);
}

inline
boost::signals2::connection  EffectBase::connectEffectBegan(const EffectBeganEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _EffectBeganEvent.connect(listener, at);
}

inline
boost::signals2::connection  EffectBase::connectEffectBegan(const EffectBeganEventType::group_type &group,
                                                    const EffectBeganEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _EffectBeganEvent.connect(group, listener, at);
}

inline
void  EffectBase::disconnectEffectBegan(const EffectBeganEventType::group_type &group)
{
    _EffectBeganEvent.disconnect(group);
}

inline
void  EffectBase::disconnectAllSlotsEffectBegan(void)
{
    _EffectBeganEvent.disconnect_all_slots();
}

inline
bool  EffectBase::isEmptyEffectBegan(void) const
{
    return _EffectBeganEvent.empty();
}

inline
UInt32  EffectBase::numSlotsEffectBegan(void) const
{
    return _EffectBeganEvent.num_slots();
}

inline
void EffectBase::produceEffectBegan(EffectBeganEventDetailsType* const e)
{
    produceEvent(EffectBeganEventId, e);
}

inline
boost::signals2::connection  EffectBase::connectEffectPaused(const EffectPausedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _EffectPausedEvent.connect(listener, at);
}

inline
boost::signals2::connection  EffectBase::connectEffectPaused(const EffectPausedEventType::group_type &group,
                                                    const EffectPausedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _EffectPausedEvent.connect(group, listener, at);
}

inline
void  EffectBase::disconnectEffectPaused(const EffectPausedEventType::group_type &group)
{
    _EffectPausedEvent.disconnect(group);
}

inline
void  EffectBase::disconnectAllSlotsEffectPaused(void)
{
    _EffectPausedEvent.disconnect_all_slots();
}

inline
bool  EffectBase::isEmptyEffectPaused(void) const
{
    return _EffectPausedEvent.empty();
}

inline
UInt32  EffectBase::numSlotsEffectPaused(void) const
{
    return _EffectPausedEvent.num_slots();
}

inline
void EffectBase::produceEffectPaused(EffectPausedEventDetailsType* const e)
{
    produceEvent(EffectPausedEventId, e);
}

inline
boost::signals2::connection  EffectBase::connectEffectUnpaused(const EffectUnpausedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _EffectUnpausedEvent.connect(listener, at);
}

inline
boost::signals2::connection  EffectBase::connectEffectUnpaused(const EffectUnpausedEventType::group_type &group,
                                                    const EffectUnpausedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _EffectUnpausedEvent.connect(group, listener, at);
}

inline
void  EffectBase::disconnectEffectUnpaused(const EffectUnpausedEventType::group_type &group)
{
    _EffectUnpausedEvent.disconnect(group);
}

inline
void  EffectBase::disconnectAllSlotsEffectUnpaused(void)
{
    _EffectUnpausedEvent.disconnect_all_slots();
}

inline
bool  EffectBase::isEmptyEffectUnpaused(void) const
{
    return _EffectUnpausedEvent.empty();
}

inline
UInt32  EffectBase::numSlotsEffectUnpaused(void) const
{
    return _EffectUnpausedEvent.num_slots();
}

inline
void EffectBase::produceEffectUnpaused(EffectUnpausedEventDetailsType* const e)
{
    produceEvent(EffectUnpausedEventId, e);
}

inline
boost::signals2::connection  EffectBase::connectEffectFinished(const EffectFinishedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _EffectFinishedEvent.connect(listener, at);
}

inline
boost::signals2::connection  EffectBase::connectEffectFinished(const EffectFinishedEventType::group_type &group,
                                                    const EffectFinishedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _EffectFinishedEvent.connect(group, listener, at);
}

inline
void  EffectBase::disconnectEffectFinished(const EffectFinishedEventType::group_type &group)
{
    _EffectFinishedEvent.disconnect(group);
}

inline
void  EffectBase::disconnectAllSlotsEffectFinished(void)
{
    _EffectFinishedEvent.disconnect_all_slots();
}

inline
bool  EffectBase::isEmptyEffectFinished(void) const
{
    return _EffectFinishedEvent.empty();
}

inline
UInt32  EffectBase::numSlotsEffectFinished(void) const
{
    return _EffectFinishedEvent.num_slots();
}

inline
void EffectBase::produceEffectFinished(EffectFinishedEventDetailsType* const e)
{
    produceEvent(EffectFinishedEventId, e);
}

inline
boost::signals2::connection  EffectBase::connectEffectStopped(const EffectStoppedEventType::slot_type &listener, 
                                                                               boost::signals2::connect_position at)
{
    return _EffectStoppedEvent.connect(listener, at);
}

inline
boost::signals2::connection  EffectBase::connectEffectStopped(const EffectStoppedEventType::group_type &group,
                                                    const EffectStoppedEventType::slot_type &listener, boost::signals2::connect_position at)
{
    return _EffectStoppedEvent.connect(group, listener, at);
}

inline
void  EffectBase::disconnectEffectStopped(const EffectStoppedEventType::group_type &group)
{
    _EffectStoppedEvent.disconnect(group);
}

inline
void  EffectBase::disconnectAllSlotsEffectStopped(void)
{
    _EffectStoppedEvent.disconnect_all_slots();
}

inline
bool  EffectBase::isEmptyEffectStopped(void) const
{
    return _EffectStoppedEvent.empty();
}

inline
UInt32  EffectBase::numSlotsEffectStopped(void) const
{
    return _EffectStoppedEvent.num_slots();
}

inline
void EffectBase::produceEffectStopped(EffectStoppedEventDetailsType* const e)
{
    produceEvent(EffectStoppedEventId, e);
}

OSG_GEN_CONTAINERPTR(Effect);

OSG_END_NAMESPACE

