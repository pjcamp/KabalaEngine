/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Project!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OpenSG/OSGConfig.h>



#include "Project/Scene/KEScene.h"      // Scenes Class
#include <OpenSG/OSGBackground.h>       // Backgrounds Class
#include <OpenSG/OSGForeground.h>       // Foregrounds Class
#include <OpenSG/OSGNode.h>             // ModelNodes Class
#include <OpenSG/OSGCamera.h>           // Cameras Class
#include <OpenSG/OSGAnimation.h>        // ActiveAnimations Class
#include <OpenSG/OSGParticleSystem.h>   // ActiveParticleSystems Class

#include "KEProjectBase.h"
#include "KEProject.h"

#include <boost/bind.hpp>

#include <OpenSG/OSGEventDetails.h>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Project
    The Project.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     ProjectBase::_sfVersion
    
*/

/*! \var std::string     ProjectBase::_sfMainWindowTitle
    
*/

/*! \var BoostPath       ProjectBase::_sfFilePath
    
*/

/*! \var Scene *         ProjectBase::_mfScenes
    
*/

/*! \var Scene *         ProjectBase::_sfInitialScene
    
*/

/*! \var Scene *         ProjectBase::_sfInternalActiveScene
    
*/

/*! \var Background *    ProjectBase::_mfBackgrounds
    
*/

/*! \var Background *    ProjectBase::_sfInternalActiveBackground
    
*/

/*! \var Foreground *    ProjectBase::_mfForegrounds
    
*/

/*! \var Foreground *    ProjectBase::_mfInternalActiveForegrounds
    
*/

/*! \var Foreground *    ProjectBase::_mfGlobalActiveForegrounds
    
*/

/*! \var Node *          ProjectBase::_mfModelNodes
    
*/

/*! \var Node *          ProjectBase::_mfInternalActiveModelNodes
    
*/

/*! \var Node *          ProjectBase::_mfGlobalActiveModelNodes
    
*/

/*! \var Camera *        ProjectBase::_mfCameras
    
*/

/*! \var Camera *        ProjectBase::_sfInternalActiveCamera
    
*/

/*! \var Animation *     ProjectBase::_mfActiveAnimations
    
*/

/*! \var ParticleSystem * ProjectBase::_mfActiveParticleSystems
    
*/

/*! \var BoostPath       ProjectBase::_sfLuaModule
    
*/

/*! \var BoostPath       ProjectBase::_sfLuaModulesDirectory
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Project *>::_type("ProjectPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Project *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Project *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Project *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ProjectBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFString::Description(
        SFString::getClassType(),
        "Version",
        "",
        VersionFieldId, VersionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleVersion),
        static_cast<FieldGetMethodSig >(&Project::getHandleVersion));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "MainWindowTitle",
        "",
        MainWindowTitleFieldId, MainWindowTitleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleMainWindowTitle),
        static_cast<FieldGetMethodSig >(&Project::getHandleMainWindowTitle));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBoostPath::Description(
        SFBoostPath::getClassType(),
        "FilePath",
        "",
        FilePathFieldId, FilePathFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleFilePath),
        static_cast<FieldGetMethodSig >(&Project::getHandleFilePath));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildScenePtr::Description(
        MFUnrecChildScenePtr::getClassType(),
        "Scenes",
        "",
        ScenesFieldId, ScenesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleScenes),
        static_cast<FieldGetMethodSig >(&Project::getHandleScenes));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecScenePtr::Description(
        SFUnrecScenePtr::getClassType(),
        "InitialScene",
        "",
        InitialSceneFieldId, InitialSceneFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleInitialScene),
        static_cast<FieldGetMethodSig >(&Project::getHandleInitialScene));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecScenePtr::Description(
        SFUnrecScenePtr::getClassType(),
        "InternalActiveScene",
        "",
        InternalActiveSceneFieldId, InternalActiveSceneFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleInternalActiveScene),
        static_cast<FieldGetMethodSig >(&Project::getHandleInternalActiveScene));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecBackgroundPtr::Description(
        MFUnrecBackgroundPtr::getClassType(),
        "Backgrounds",
        "",
        BackgroundsFieldId, BackgroundsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleBackgrounds),
        static_cast<FieldGetMethodSig >(&Project::getHandleBackgrounds));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBackgroundPtr::Description(
        SFUnrecBackgroundPtr::getClassType(),
        "InternalActiveBackground",
        "",
        InternalActiveBackgroundFieldId, InternalActiveBackgroundFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleInternalActiveBackground),
        static_cast<FieldGetMethodSig >(&Project::getHandleInternalActiveBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecForegroundPtr::Description(
        MFUnrecForegroundPtr::getClassType(),
        "Foregrounds",
        "",
        ForegroundsFieldId, ForegroundsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleForegrounds),
        static_cast<FieldGetMethodSig >(&Project::getHandleForegrounds));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecForegroundPtr::Description(
        MFUnrecForegroundPtr::getClassType(),
        "InternalActiveForegrounds",
        "",
        InternalActiveForegroundsFieldId, InternalActiveForegroundsFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleInternalActiveForegrounds),
        static_cast<FieldGetMethodSig >(&Project::getHandleInternalActiveForegrounds));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecForegroundPtr::Description(
        MFUnrecForegroundPtr::getClassType(),
        "GlobalActiveForegrounds",
        "",
        GlobalActiveForegroundsFieldId, GlobalActiveForegroundsFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleGlobalActiveForegrounds),
        static_cast<FieldGetMethodSig >(&Project::getHandleGlobalActiveForegrounds));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecNodePtr::Description(
        MFUnrecNodePtr::getClassType(),
        "ModelNodes",
        "",
        ModelNodesFieldId, ModelNodesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleModelNodes),
        static_cast<FieldGetMethodSig >(&Project::getHandleModelNodes));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecNodePtr::Description(
        MFUnrecNodePtr::getClassType(),
        "InternalActiveModelNodes",
        "",
        InternalActiveModelNodesFieldId, InternalActiveModelNodesFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleInternalActiveModelNodes),
        static_cast<FieldGetMethodSig >(&Project::getHandleInternalActiveModelNodes));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecNodePtr::Description(
        MFUnrecNodePtr::getClassType(),
        "GlobalActiveModelNodes",
        "",
        GlobalActiveModelNodesFieldId, GlobalActiveModelNodesFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleGlobalActiveModelNodes),
        static_cast<FieldGetMethodSig >(&Project::getHandleGlobalActiveModelNodes));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecCameraPtr::Description(
        MFUnrecCameraPtr::getClassType(),
        "Cameras",
        "",
        CamerasFieldId, CamerasFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleCameras),
        static_cast<FieldGetMethodSig >(&Project::getHandleCameras));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecCameraPtr::Description(
        SFUnrecCameraPtr::getClassType(),
        "InternalActiveCamera",
        "",
        InternalActiveCameraFieldId, InternalActiveCameraFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleInternalActiveCamera),
        static_cast<FieldGetMethodSig >(&Project::getHandleInternalActiveCamera));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecAnimationPtr::Description(
        MFUnrecAnimationPtr::getClassType(),
        "ActiveAnimations",
        "",
        ActiveAnimationsFieldId, ActiveAnimationsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleActiveAnimations),
        static_cast<FieldGetMethodSig >(&Project::getHandleActiveAnimations));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecParticleSystemPtr::Description(
        MFUnrecParticleSystemPtr::getClassType(),
        "ActiveParticleSystems",
        "",
        ActiveParticleSystemsFieldId, ActiveParticleSystemsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleActiveParticleSystems),
        static_cast<FieldGetMethodSig >(&Project::getHandleActiveParticleSystems));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBoostPath::Description(
        SFBoostPath::getClassType(),
        "LuaModule",
        "",
        LuaModuleFieldId, LuaModuleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleLuaModule),
        static_cast<FieldGetMethodSig >(&Project::getHandleLuaModule));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBoostPath::Description(
        SFBoostPath::getClassType(),
        "LuaModulesDirectory",
        "",
        LuaModulesDirectoryFieldId, LuaModulesDirectoryFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Project::editHandleLuaModulesDirectory),
        static_cast<FieldGetMethodSig >(&Project::getHandleLuaModulesDirectory));

    oType.addInitialDesc(pDesc);
}


ProjectBase::TypeObject ProjectBase::_type(
    ProjectBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ProjectBase::createEmptyLocal),
    Project::initMethod,
    Project::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&Project::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Project\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "\tlibrary=\"KabalaEngine\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"false\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "\tlibnamespace=\"KE\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "The Project.\n"
    "\t<Field\n"
    "\t\tname=\"Version\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"MainWindowTitle\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"FilePath\"\n"
    "\t\ttype=\"BoostPath\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Scenes\"\n"
    "\t\ttype=\"Scene\"\n"
    "\t\tcardinality=\"multi\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"ParentContainer\"\n"
    "\t\tfieldHeader=\"Project/Scene/KESceneFields.h\"\n"
    "\t\ttypeHeader=\"Project/Scene/KEScene.h\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InitialScene\"\n"
    "\t\ttype=\"Scene\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tfieldHeader=\"Project/Scene/KESceneFields.h\"\n"
    "\t\ttypeHeader=\"Project/Scene/KEScene.h\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalActiveScene\"\n"
    "\t\ttype=\"Scene\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tfieldHeader=\"Project/Scene/KESceneFields.h\"\n"
    "\t\ttypeHeader=\"Project/Scene/KEScene.h\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Backgrounds\"\n"
    "\t\ttype=\"Background\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalActiveBackground\"\n"
    "\t\ttype=\"Background\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Foregrounds\"\n"
    "\t\ttype=\"Foreground\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalActiveForegrounds\"\n"
    "\t\ttype=\"Foreground\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"GlobalActiveForegrounds\"\n"
    "\t\ttype=\"Foreground\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ModelNodes\"\n"
    "\t\ttype=\"Node\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalActiveModelNodes\"\n"
    "\t\ttype=\"Node\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"GlobalActiveModelNodes\"\n"
    "\t\ttype=\"Node\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Cameras\"\n"
    "\t\ttype=\"Camera\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"InternalActiveCamera\"\n"
    "\t\ttype=\"Camera\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"protected\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ActiveAnimations\"\n"
    "\t\ttype=\"Animation\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ActiveParticleSystems\"\n"
    "\t\ttype=\"ParticleSystem\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LuaModule\"\n"
    "\t\ttype=\"BoostPath\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"LuaModulesDirectory\"\n"
    "\t\ttype=\"BoostPath\"\n"
    "\t\tcategory=\"data\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"./lua\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ProjectStarted\"\n"
    "\t\tdetailsType=\"ProjectEventDetails\"\n"
    "\t\tfieldHeader=\"Project/KEProjectEventDetailsFields.h\"\n"
    "\t\ttypeHeader=\"Project/KEProjectEventDetails.h\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ProjectStopping\"\n"
    "\t\tdetailsType=\"ProjectEventDetails\"\n"
    "\t\tfieldHeader=\"Project/KEProjectEventDetailsFields.h\"\n"
    "\t\ttypeHeader=\"Project/KEProjectEventDetails.h\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ProjectStopped\"\n"
    "\t\tdetailsType=\"ProjectEventDetails\"\n"
    "\t\tfieldHeader=\"Project/KEProjectEventDetailsFields.h\"\n"
    "\t\ttypeHeader=\"Project/KEProjectEventDetails.h\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"ProjectReset\"\n"
    "\t\tdetailsType=\"ProjectEventDetails\"\n"
    "\t\tfieldHeader=\"Project/KEProjectEventDetailsFields.h\"\n"
    "\t\ttypeHeader=\"Project/KEProjectEventDetails.h\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"SceneChanged\"\n"
    "\t\tdetailsType=\"ProjectEventDetails\"\n"
    "\t\tfieldHeader=\"Project/KEProjectEventDetailsFields.h\"\n"
    "\t\ttypeHeader=\"Project/KEProjectEventDetails.h\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowOpened\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowClosing\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowClosed\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowIconified\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowDeiconified\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowActivated\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowDeactivated\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowEntered\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"WindowExited\"\n"
    "\t\tdetailsType=\"WindowEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseClicked\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseEntered\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseExited\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MousePressed\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseReleased\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseMoved\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseDragged\"\n"
    "\t\tdetailsType=\"MouseEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"MouseWheelMoved\"\n"
    "\t\tdetailsType=\"MouseWheelEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyPressed\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyReleased\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"KeyTyped\"\n"
    "\t\tdetailsType=\"KeyEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "\t<ProducedEvent\n"
    "\t\tname=\"Update\"\n"
    "\t\tdetailsType=\"UpdateEventDetails\"\n"
    "\t\tconsumable=\"true\"\n"
    "\t>\n"
    "\t</ProducedEvent>\n"
    "</FieldContainer>\n",
    "The Project.\n"
    );

//! Project Produced Events

EventDescription *ProjectBase::_eventDesc[] =
{
    new EventDescription("ProjectStarted", 
                          "",
                          ProjectStartedEventId, 
                          FieldTraits<ProjectEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleProjectStartedSignal)),

    new EventDescription("ProjectStopping", 
                          "",
                          ProjectStoppingEventId, 
                          FieldTraits<ProjectEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleProjectStoppingSignal)),

    new EventDescription("ProjectStopped", 
                          "",
                          ProjectStoppedEventId, 
                          FieldTraits<ProjectEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleProjectStoppedSignal)),

    new EventDescription("ProjectReset", 
                          "",
                          ProjectResetEventId, 
                          FieldTraits<ProjectEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleProjectResetSignal)),

    new EventDescription("SceneChanged", 
                          "",
                          SceneChangedEventId, 
                          FieldTraits<ProjectEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleSceneChangedSignal)),

    new EventDescription("WindowOpened", 
                          "",
                          WindowOpenedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleWindowOpenedSignal)),

    new EventDescription("WindowClosing", 
                          "",
                          WindowClosingEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleWindowClosingSignal)),

    new EventDescription("WindowClosed", 
                          "",
                          WindowClosedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleWindowClosedSignal)),

    new EventDescription("WindowIconified", 
                          "",
                          WindowIconifiedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleWindowIconifiedSignal)),

    new EventDescription("WindowDeiconified", 
                          "",
                          WindowDeiconifiedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleWindowDeiconifiedSignal)),

    new EventDescription("WindowActivated", 
                          "",
                          WindowActivatedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleWindowActivatedSignal)),

    new EventDescription("WindowDeactivated", 
                          "",
                          WindowDeactivatedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleWindowDeactivatedSignal)),

    new EventDescription("WindowEntered", 
                          "",
                          WindowEnteredEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleWindowEnteredSignal)),

    new EventDescription("WindowExited", 
                          "",
                          WindowExitedEventId, 
                          FieldTraits<WindowEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleWindowExitedSignal)),

    new EventDescription("MouseClicked", 
                          "",
                          MouseClickedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleMouseClickedSignal)),

    new EventDescription("MouseEntered", 
                          "",
                          MouseEnteredEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleMouseEnteredSignal)),

    new EventDescription("MouseExited", 
                          "",
                          MouseExitedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleMouseExitedSignal)),

    new EventDescription("MousePressed", 
                          "",
                          MousePressedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleMousePressedSignal)),

    new EventDescription("MouseReleased", 
                          "",
                          MouseReleasedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleMouseReleasedSignal)),

    new EventDescription("MouseMoved", 
                          "",
                          MouseMovedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleMouseMovedSignal)),

    new EventDescription("MouseDragged", 
                          "",
                          MouseDraggedEventId, 
                          FieldTraits<MouseEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleMouseDraggedSignal)),

    new EventDescription("MouseWheelMoved", 
                          "",
                          MouseWheelMovedEventId, 
                          FieldTraits<MouseWheelEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleMouseWheelMovedSignal)),

    new EventDescription("KeyPressed", 
                          "",
                          KeyPressedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleKeyPressedSignal)),

    new EventDescription("KeyReleased", 
                          "",
                          KeyReleasedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleKeyReleasedSignal)),

    new EventDescription("KeyTyped", 
                          "",
                          KeyTypedEventId, 
                          FieldTraits<KeyEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleKeyTypedSignal)),

    new EventDescription("Update", 
                          "",
                          UpdateEventId, 
                          FieldTraits<UpdateEventDetails *>::getType(),
                          true,
                          static_cast<EventGetMethod>(&ProjectBase::getHandleUpdateSignal))

};

EventProducerType ProjectBase::_producerType(
    "ProjectProducerType",
    "EventProducerType",
    "",
    InitEventProducerFunctor(),
    _eventDesc,
    sizeof(_eventDesc));

/*------------------------------ get -----------------------------------*/

FieldContainerType &ProjectBase::getType(void)
{
    return _type;
}

const FieldContainerType &ProjectBase::getType(void) const
{
    return _type;
}

const EventProducerType &ProjectBase::getProducerType(void) const
{
    return _producerType;
}

UInt32 ProjectBase::getContainerSize(void) const
{
    return sizeof(Project);
}

/*------------------------- decorator get ------------------------------*/


SFString *ProjectBase::editSFVersion(void)
{
    editSField(VersionFieldMask);

    return &_sfVersion;
}

const SFString *ProjectBase::getSFVersion(void) const
{
    return &_sfVersion;
}


SFString *ProjectBase::editSFMainWindowTitle(void)
{
    editSField(MainWindowTitleFieldMask);

    return &_sfMainWindowTitle;
}

const SFString *ProjectBase::getSFMainWindowTitle(void) const
{
    return &_sfMainWindowTitle;
}


SFBoostPath *ProjectBase::editSFFilePath(void)
{
    editSField(FilePathFieldMask);

    return &_sfFilePath;
}

const SFBoostPath *ProjectBase::getSFFilePath(void) const
{
    return &_sfFilePath;
}


//! Get the Project::_mfScenes field.
const MFUnrecChildScenePtr *ProjectBase::getMFScenes(void) const
{
    return &_mfScenes;
}

//! Get the Project::_sfInitialScene field.
const SFUnrecScenePtr *ProjectBase::getSFInitialScene(void) const
{
    return &_sfInitialScene;
}

SFUnrecScenePtr     *ProjectBase::editSFInitialScene   (void)
{
    editSField(InitialSceneFieldMask);

    return &_sfInitialScene;
}

//! Get the Project::_sfInternalActiveScene field.
const SFUnrecScenePtr *ProjectBase::getSFInternalActiveScene(void) const
{
    return &_sfInternalActiveScene;
}

SFUnrecScenePtr     *ProjectBase::editSFInternalActiveScene(void)
{
    editSField(InternalActiveSceneFieldMask);

    return &_sfInternalActiveScene;
}

//! Get the Project::_mfBackgrounds field.
const MFUnrecBackgroundPtr *ProjectBase::getMFBackgrounds(void) const
{
    return &_mfBackgrounds;
}

MFUnrecBackgroundPtr *ProjectBase::editMFBackgrounds    (void)
{
    editMField(BackgroundsFieldMask, _mfBackgrounds);

    return &_mfBackgrounds;
}

//! Get the Project::_sfInternalActiveBackground field.
const SFUnrecBackgroundPtr *ProjectBase::getSFInternalActiveBackground(void) const
{
    return &_sfInternalActiveBackground;
}

SFUnrecBackgroundPtr *ProjectBase::editSFInternalActiveBackground(void)
{
    editSField(InternalActiveBackgroundFieldMask);

    return &_sfInternalActiveBackground;
}

//! Get the Project::_mfForegrounds field.
const MFUnrecForegroundPtr *ProjectBase::getMFForegrounds(void) const
{
    return &_mfForegrounds;
}

MFUnrecForegroundPtr *ProjectBase::editMFForegrounds    (void)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);

    return &_mfForegrounds;
}

//! Get the Project::_mfInternalActiveForegrounds field.
const MFUnrecForegroundPtr *ProjectBase::getMFInternalActiveForegrounds(void) const
{
    return &_mfInternalActiveForegrounds;
}

MFUnrecForegroundPtr *ProjectBase::editMFInternalActiveForegrounds(void)
{
    editMField(InternalActiveForegroundsFieldMask, _mfInternalActiveForegrounds);

    return &_mfInternalActiveForegrounds;
}

//! Get the Project::_mfGlobalActiveForegrounds field.
const MFUnrecForegroundPtr *ProjectBase::getMFGlobalActiveForegrounds(void) const
{
    return &_mfGlobalActiveForegrounds;
}

MFUnrecForegroundPtr *ProjectBase::editMFGlobalActiveForegrounds(void)
{
    editMField(GlobalActiveForegroundsFieldMask, _mfGlobalActiveForegrounds);

    return &_mfGlobalActiveForegrounds;
}

//! Get the Project::_mfModelNodes field.
const MFUnrecNodePtr *ProjectBase::getMFModelNodes(void) const
{
    return &_mfModelNodes;
}

MFUnrecNodePtr      *ProjectBase::editMFModelNodes     (void)
{
    editMField(ModelNodesFieldMask, _mfModelNodes);

    return &_mfModelNodes;
}

//! Get the Project::_mfInternalActiveModelNodes field.
const MFUnrecNodePtr *ProjectBase::getMFInternalActiveModelNodes(void) const
{
    return &_mfInternalActiveModelNodes;
}

MFUnrecNodePtr      *ProjectBase::editMFInternalActiveModelNodes(void)
{
    editMField(InternalActiveModelNodesFieldMask, _mfInternalActiveModelNodes);

    return &_mfInternalActiveModelNodes;
}

//! Get the Project::_mfGlobalActiveModelNodes field.
const MFUnrecNodePtr *ProjectBase::getMFGlobalActiveModelNodes(void) const
{
    return &_mfGlobalActiveModelNodes;
}

MFUnrecNodePtr      *ProjectBase::editMFGlobalActiveModelNodes(void)
{
    editMField(GlobalActiveModelNodesFieldMask, _mfGlobalActiveModelNodes);

    return &_mfGlobalActiveModelNodes;
}

//! Get the Project::_mfCameras field.
const MFUnrecCameraPtr *ProjectBase::getMFCameras(void) const
{
    return &_mfCameras;
}

MFUnrecCameraPtr    *ProjectBase::editMFCameras        (void)
{
    editMField(CamerasFieldMask, _mfCameras);

    return &_mfCameras;
}

//! Get the Project::_sfInternalActiveCamera field.
const SFUnrecCameraPtr *ProjectBase::getSFInternalActiveCamera(void) const
{
    return &_sfInternalActiveCamera;
}

SFUnrecCameraPtr    *ProjectBase::editSFInternalActiveCamera(void)
{
    editSField(InternalActiveCameraFieldMask);

    return &_sfInternalActiveCamera;
}

//! Get the Project::_mfActiveAnimations field.
const MFUnrecAnimationPtr *ProjectBase::getMFActiveAnimations(void) const
{
    return &_mfActiveAnimations;
}

MFUnrecAnimationPtr *ProjectBase::editMFActiveAnimations(void)
{
    editMField(ActiveAnimationsFieldMask, _mfActiveAnimations);

    return &_mfActiveAnimations;
}

//! Get the Project::_mfActiveParticleSystems field.
const MFUnrecParticleSystemPtr *ProjectBase::getMFActiveParticleSystems(void) const
{
    return &_mfActiveParticleSystems;
}

MFUnrecParticleSystemPtr *ProjectBase::editMFActiveParticleSystems(void)
{
    editMField(ActiveParticleSystemsFieldMask, _mfActiveParticleSystems);

    return &_mfActiveParticleSystems;
}

SFBoostPath *ProjectBase::editSFLuaModule(void)
{
    editSField(LuaModuleFieldMask);

    return &_sfLuaModule;
}

const SFBoostPath *ProjectBase::getSFLuaModule(void) const
{
    return &_sfLuaModule;
}


SFBoostPath *ProjectBase::editSFLuaModulesDirectory(void)
{
    editSField(LuaModulesDirectoryFieldMask);

    return &_sfLuaModulesDirectory;
}

const SFBoostPath *ProjectBase::getSFLuaModulesDirectory(void) const
{
    return &_sfLuaModulesDirectory;
}




void ProjectBase::pushToScenes(Scene * const value)
{
    if(value == NULL)
        return;

    editMField(ScenesFieldMask, _mfScenes);

    _mfScenes.push_back(value);
}

void ProjectBase::assignScenes   (const MFUnrecChildScenePtr &value)
{
    MFUnrecChildScenePtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChildScenePtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Project *>(this)->clearScenes();

    while(elemIt != elemEnd)
    {
        this->pushToScenes(*elemIt);

        ++elemIt;
    }
}

void ProjectBase::insertIntoScenes(UInt32               uiIndex,
                                                   Scene * const value   )
{
    if(value == NULL)
        return;

    editMField(ScenesFieldMask, _mfScenes);

    MFUnrecChildScenePtr::iterator fieldIt = _mfScenes.begin_nc();

    fieldIt += uiIndex;

    _mfScenes.insert(fieldIt, value);
}

void ProjectBase::replaceInScenes(UInt32               uiIndex,
                                                       Scene * const value   )
{
    if(value == NULL)
        return;

    if(uiIndex >= _mfScenes.size())
        return;

    editMField(ScenesFieldMask, _mfScenes);

    _mfScenes.replace(uiIndex, value);
}

void ProjectBase::replaceObjInScenes(Scene * const pOldElem,
                                                        Scene * const pNewElem)
{
    if(pNewElem == NULL)
        return;

    Int32  elemIdx = _mfScenes.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(ScenesFieldMask, _mfScenes);

        _mfScenes.replace(elemIdx, pNewElem);
    }
}

void ProjectBase::removeFromScenes(UInt32 uiIndex)
{
    if(uiIndex < _mfScenes.size())
    {
        editMField(ScenesFieldMask, _mfScenes);

        _mfScenes.erase(uiIndex);
    }
}

void ProjectBase::removeObjFromScenes(Scene * const value)
{
    Int32 iElemIdx = _mfScenes.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ScenesFieldMask, _mfScenes);

        _mfScenes.erase(iElemIdx);
    }
}
void ProjectBase::clearScenes(void)
{
    editMField(ScenesFieldMask, _mfScenes);


    _mfScenes.clear();
}

void ProjectBase::pushToBackgrounds(Background * const value)
{
    editMField(BackgroundsFieldMask, _mfBackgrounds);

    _mfBackgrounds.push_back(value);
}

void ProjectBase::assignBackgrounds(const MFUnrecBackgroundPtr &value)
{
    MFUnrecBackgroundPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecBackgroundPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Project *>(this)->clearBackgrounds();

    while(elemIt != elemEnd)
    {
        this->pushToBackgrounds(*elemIt);

        ++elemIt;
    }
}

void ProjectBase::removeFromBackgrounds(UInt32 uiIndex)
{
    if(uiIndex < _mfBackgrounds.size())
    {
        editMField(BackgroundsFieldMask, _mfBackgrounds);

        _mfBackgrounds.erase(uiIndex);
    }
}

void ProjectBase::removeObjFromBackgrounds(Background * const value)
{
    Int32 iElemIdx = _mfBackgrounds.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(BackgroundsFieldMask, _mfBackgrounds);

        _mfBackgrounds.erase(iElemIdx);
    }
}
void ProjectBase::clearBackgrounds(void)
{
    editMField(BackgroundsFieldMask, _mfBackgrounds);


    _mfBackgrounds.clear();
}

void ProjectBase::pushToForegrounds(Foreground * const value)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);

    _mfForegrounds.push_back(value);
}

void ProjectBase::assignForegrounds(const MFUnrecForegroundPtr &value)
{
    MFUnrecForegroundPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecForegroundPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Project *>(this)->clearForegrounds();

    while(elemIt != elemEnd)
    {
        this->pushToForegrounds(*elemIt);

        ++elemIt;
    }
}

void ProjectBase::removeFromForegrounds(UInt32 uiIndex)
{
    if(uiIndex < _mfForegrounds.size())
    {
        editMField(ForegroundsFieldMask, _mfForegrounds);

        _mfForegrounds.erase(uiIndex);
    }
}

void ProjectBase::removeObjFromForegrounds(Foreground * const value)
{
    Int32 iElemIdx = _mfForegrounds.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ForegroundsFieldMask, _mfForegrounds);

        _mfForegrounds.erase(iElemIdx);
    }
}
void ProjectBase::clearForegrounds(void)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);


    _mfForegrounds.clear();
}

void ProjectBase::pushToInternalActiveForegrounds(Foreground * const value)
{
    editMField(InternalActiveForegroundsFieldMask, _mfInternalActiveForegrounds);

    _mfInternalActiveForegrounds.push_back(value);
}

void ProjectBase::assignInternalActiveForegrounds(const MFUnrecForegroundPtr &value)
{
    MFUnrecForegroundPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecForegroundPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Project *>(this)->clearInternalActiveForegrounds();

    while(elemIt != elemEnd)
    {
        this->pushToInternalActiveForegrounds(*elemIt);

        ++elemIt;
    }
}

void ProjectBase::removeFromInternalActiveForegrounds(UInt32 uiIndex)
{
    if(uiIndex < _mfInternalActiveForegrounds.size())
    {
        editMField(InternalActiveForegroundsFieldMask, _mfInternalActiveForegrounds);

        _mfInternalActiveForegrounds.erase(uiIndex);
    }
}

void ProjectBase::removeObjFromInternalActiveForegrounds(Foreground * const value)
{
    Int32 iElemIdx = _mfInternalActiveForegrounds.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(InternalActiveForegroundsFieldMask, _mfInternalActiveForegrounds);

        _mfInternalActiveForegrounds.erase(iElemIdx);
    }
}
void ProjectBase::clearInternalActiveForegrounds(void)
{
    editMField(InternalActiveForegroundsFieldMask, _mfInternalActiveForegrounds);


    _mfInternalActiveForegrounds.clear();
}

void ProjectBase::pushToGlobalActiveForegrounds(Foreground * const value)
{
    editMField(GlobalActiveForegroundsFieldMask, _mfGlobalActiveForegrounds);

    _mfGlobalActiveForegrounds.push_back(value);
}

void ProjectBase::assignGlobalActiveForegrounds(const MFUnrecForegroundPtr &value)
{
    MFUnrecForegroundPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecForegroundPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Project *>(this)->clearGlobalActiveForegrounds();

    while(elemIt != elemEnd)
    {
        this->pushToGlobalActiveForegrounds(*elemIt);

        ++elemIt;
    }
}

void ProjectBase::removeFromGlobalActiveForegrounds(UInt32 uiIndex)
{
    if(uiIndex < _mfGlobalActiveForegrounds.size())
    {
        editMField(GlobalActiveForegroundsFieldMask, _mfGlobalActiveForegrounds);

        _mfGlobalActiveForegrounds.erase(uiIndex);
    }
}

void ProjectBase::removeObjFromGlobalActiveForegrounds(Foreground * const value)
{
    Int32 iElemIdx = _mfGlobalActiveForegrounds.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(GlobalActiveForegroundsFieldMask, _mfGlobalActiveForegrounds);

        _mfGlobalActiveForegrounds.erase(iElemIdx);
    }
}
void ProjectBase::clearGlobalActiveForegrounds(void)
{
    editMField(GlobalActiveForegroundsFieldMask, _mfGlobalActiveForegrounds);


    _mfGlobalActiveForegrounds.clear();
}

void ProjectBase::pushToModelNodes(Node * const value)
{
    editMField(ModelNodesFieldMask, _mfModelNodes);

    _mfModelNodes.push_back(value);
}

void ProjectBase::assignModelNodes(const MFUnrecNodePtr    &value)
{
    MFUnrecNodePtr   ::const_iterator elemIt  =
        value.begin();
    MFUnrecNodePtr   ::const_iterator elemEnd =
        value.end  ();

    static_cast<Project *>(this)->clearModelNodes();

    while(elemIt != elemEnd)
    {
        this->pushToModelNodes(*elemIt);

        ++elemIt;
    }
}

void ProjectBase::removeFromModelNodes(UInt32 uiIndex)
{
    if(uiIndex < _mfModelNodes.size())
    {
        editMField(ModelNodesFieldMask, _mfModelNodes);

        _mfModelNodes.erase(uiIndex);
    }
}

void ProjectBase::removeObjFromModelNodes(Node * const value)
{
    Int32 iElemIdx = _mfModelNodes.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ModelNodesFieldMask, _mfModelNodes);

        _mfModelNodes.erase(iElemIdx);
    }
}
void ProjectBase::clearModelNodes(void)
{
    editMField(ModelNodesFieldMask, _mfModelNodes);


    _mfModelNodes.clear();
}

void ProjectBase::pushToInternalActiveModelNodes(Node * const value)
{
    editMField(InternalActiveModelNodesFieldMask, _mfInternalActiveModelNodes);

    _mfInternalActiveModelNodes.push_back(value);
}

void ProjectBase::assignInternalActiveModelNodes(const MFUnrecNodePtr    &value)
{
    MFUnrecNodePtr   ::const_iterator elemIt  =
        value.begin();
    MFUnrecNodePtr   ::const_iterator elemEnd =
        value.end  ();

    static_cast<Project *>(this)->clearInternalActiveModelNodes();

    while(elemIt != elemEnd)
    {
        this->pushToInternalActiveModelNodes(*elemIt);

        ++elemIt;
    }
}

void ProjectBase::removeFromInternalActiveModelNodes(UInt32 uiIndex)
{
    if(uiIndex < _mfInternalActiveModelNodes.size())
    {
        editMField(InternalActiveModelNodesFieldMask, _mfInternalActiveModelNodes);

        _mfInternalActiveModelNodes.erase(uiIndex);
    }
}

void ProjectBase::removeObjFromInternalActiveModelNodes(Node * const value)
{
    Int32 iElemIdx = _mfInternalActiveModelNodes.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(InternalActiveModelNodesFieldMask, _mfInternalActiveModelNodes);

        _mfInternalActiveModelNodes.erase(iElemIdx);
    }
}
void ProjectBase::clearInternalActiveModelNodes(void)
{
    editMField(InternalActiveModelNodesFieldMask, _mfInternalActiveModelNodes);


    _mfInternalActiveModelNodes.clear();
}

void ProjectBase::pushToGlobalActiveModelNodes(Node * const value)
{
    editMField(GlobalActiveModelNodesFieldMask, _mfGlobalActiveModelNodes);

    _mfGlobalActiveModelNodes.push_back(value);
}

void ProjectBase::assignGlobalActiveModelNodes(const MFUnrecNodePtr    &value)
{
    MFUnrecNodePtr   ::const_iterator elemIt  =
        value.begin();
    MFUnrecNodePtr   ::const_iterator elemEnd =
        value.end  ();

    static_cast<Project *>(this)->clearGlobalActiveModelNodes();

    while(elemIt != elemEnd)
    {
        this->pushToGlobalActiveModelNodes(*elemIt);

        ++elemIt;
    }
}

void ProjectBase::removeFromGlobalActiveModelNodes(UInt32 uiIndex)
{
    if(uiIndex < _mfGlobalActiveModelNodes.size())
    {
        editMField(GlobalActiveModelNodesFieldMask, _mfGlobalActiveModelNodes);

        _mfGlobalActiveModelNodes.erase(uiIndex);
    }
}

void ProjectBase::removeObjFromGlobalActiveModelNodes(Node * const value)
{
    Int32 iElemIdx = _mfGlobalActiveModelNodes.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(GlobalActiveModelNodesFieldMask, _mfGlobalActiveModelNodes);

        _mfGlobalActiveModelNodes.erase(iElemIdx);
    }
}
void ProjectBase::clearGlobalActiveModelNodes(void)
{
    editMField(GlobalActiveModelNodesFieldMask, _mfGlobalActiveModelNodes);


    _mfGlobalActiveModelNodes.clear();
}

void ProjectBase::pushToCameras(Camera * const value)
{
    editMField(CamerasFieldMask, _mfCameras);

    _mfCameras.push_back(value);
}

void ProjectBase::assignCameras  (const MFUnrecCameraPtr  &value)
{
    MFUnrecCameraPtr ::const_iterator elemIt  =
        value.begin();
    MFUnrecCameraPtr ::const_iterator elemEnd =
        value.end  ();

    static_cast<Project *>(this)->clearCameras();

    while(elemIt != elemEnd)
    {
        this->pushToCameras(*elemIt);

        ++elemIt;
    }
}

void ProjectBase::removeFromCameras(UInt32 uiIndex)
{
    if(uiIndex < _mfCameras.size())
    {
        editMField(CamerasFieldMask, _mfCameras);

        _mfCameras.erase(uiIndex);
    }
}

void ProjectBase::removeObjFromCameras(Camera * const value)
{
    Int32 iElemIdx = _mfCameras.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(CamerasFieldMask, _mfCameras);

        _mfCameras.erase(iElemIdx);
    }
}
void ProjectBase::clearCameras(void)
{
    editMField(CamerasFieldMask, _mfCameras);


    _mfCameras.clear();
}

void ProjectBase::pushToActiveAnimations(Animation * const value)
{
    editMField(ActiveAnimationsFieldMask, _mfActiveAnimations);

    _mfActiveAnimations.push_back(value);
}

void ProjectBase::assignActiveAnimations(const MFUnrecAnimationPtr &value)
{
    MFUnrecAnimationPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecAnimationPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Project *>(this)->clearActiveAnimations();

    while(elemIt != elemEnd)
    {
        this->pushToActiveAnimations(*elemIt);

        ++elemIt;
    }
}

void ProjectBase::removeFromActiveAnimations(UInt32 uiIndex)
{
    if(uiIndex < _mfActiveAnimations.size())
    {
        editMField(ActiveAnimationsFieldMask, _mfActiveAnimations);

        _mfActiveAnimations.erase(uiIndex);
    }
}

void ProjectBase::removeObjFromActiveAnimations(Animation * const value)
{
    Int32 iElemIdx = _mfActiveAnimations.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ActiveAnimationsFieldMask, _mfActiveAnimations);

        _mfActiveAnimations.erase(iElemIdx);
    }
}
void ProjectBase::clearActiveAnimations(void)
{
    editMField(ActiveAnimationsFieldMask, _mfActiveAnimations);


    _mfActiveAnimations.clear();
}

void ProjectBase::pushToActiveParticleSystems(ParticleSystem * const value)
{
    editMField(ActiveParticleSystemsFieldMask, _mfActiveParticleSystems);

    _mfActiveParticleSystems.push_back(value);
}

void ProjectBase::assignActiveParticleSystems(const MFUnrecParticleSystemPtr &value)
{
    MFUnrecParticleSystemPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecParticleSystemPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Project *>(this)->clearActiveParticleSystems();

    while(elemIt != elemEnd)
    {
        this->pushToActiveParticleSystems(*elemIt);

        ++elemIt;
    }
}

void ProjectBase::removeFromActiveParticleSystems(UInt32 uiIndex)
{
    if(uiIndex < _mfActiveParticleSystems.size())
    {
        editMField(ActiveParticleSystemsFieldMask, _mfActiveParticleSystems);

        _mfActiveParticleSystems.erase(uiIndex);
    }
}

void ProjectBase::removeObjFromActiveParticleSystems(ParticleSystem * const value)
{
    Int32 iElemIdx = _mfActiveParticleSystems.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ActiveParticleSystemsFieldMask, _mfActiveParticleSystems);

        _mfActiveParticleSystems.erase(iElemIdx);
    }
}
void ProjectBase::clearActiveParticleSystems(void)
{
    editMField(ActiveParticleSystemsFieldMask, _mfActiveParticleSystems);


    _mfActiveParticleSystems.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 ProjectBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (VersionFieldMask & whichField))
    {
        returnValue += _sfVersion.getBinSize();
    }
    if(FieldBits::NoField != (MainWindowTitleFieldMask & whichField))
    {
        returnValue += _sfMainWindowTitle.getBinSize();
    }
    if(FieldBits::NoField != (FilePathFieldMask & whichField))
    {
        returnValue += _sfFilePath.getBinSize();
    }
    if(FieldBits::NoField != (ScenesFieldMask & whichField))
    {
        returnValue += _mfScenes.getBinSize();
    }
    if(FieldBits::NoField != (InitialSceneFieldMask & whichField))
    {
        returnValue += _sfInitialScene.getBinSize();
    }
    if(FieldBits::NoField != (InternalActiveSceneFieldMask & whichField))
    {
        returnValue += _sfInternalActiveScene.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        returnValue += _mfBackgrounds.getBinSize();
    }
    if(FieldBits::NoField != (InternalActiveBackgroundFieldMask & whichField))
    {
        returnValue += _sfInternalActiveBackground.getBinSize();
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        returnValue += _mfForegrounds.getBinSize();
    }
    if(FieldBits::NoField != (InternalActiveForegroundsFieldMask & whichField))
    {
        returnValue += _mfInternalActiveForegrounds.getBinSize();
    }
    if(FieldBits::NoField != (GlobalActiveForegroundsFieldMask & whichField))
    {
        returnValue += _mfGlobalActiveForegrounds.getBinSize();
    }
    if(FieldBits::NoField != (ModelNodesFieldMask & whichField))
    {
        returnValue += _mfModelNodes.getBinSize();
    }
    if(FieldBits::NoField != (InternalActiveModelNodesFieldMask & whichField))
    {
        returnValue += _mfInternalActiveModelNodes.getBinSize();
    }
    if(FieldBits::NoField != (GlobalActiveModelNodesFieldMask & whichField))
    {
        returnValue += _mfGlobalActiveModelNodes.getBinSize();
    }
    if(FieldBits::NoField != (CamerasFieldMask & whichField))
    {
        returnValue += _mfCameras.getBinSize();
    }
    if(FieldBits::NoField != (InternalActiveCameraFieldMask & whichField))
    {
        returnValue += _sfInternalActiveCamera.getBinSize();
    }
    if(FieldBits::NoField != (ActiveAnimationsFieldMask & whichField))
    {
        returnValue += _mfActiveAnimations.getBinSize();
    }
    if(FieldBits::NoField != (ActiveParticleSystemsFieldMask & whichField))
    {
        returnValue += _mfActiveParticleSystems.getBinSize();
    }
    if(FieldBits::NoField != (LuaModuleFieldMask & whichField))
    {
        returnValue += _sfLuaModule.getBinSize();
    }
    if(FieldBits::NoField != (LuaModulesDirectoryFieldMask & whichField))
    {
        returnValue += _sfLuaModulesDirectory.getBinSize();
    }

    return returnValue;
}

void ProjectBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (VersionFieldMask & whichField))
    {
        _sfVersion.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MainWindowTitleFieldMask & whichField))
    {
        _sfMainWindowTitle.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FilePathFieldMask & whichField))
    {
        _sfFilePath.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScenesFieldMask & whichField))
    {
        _mfScenes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InitialSceneFieldMask & whichField))
    {
        _sfInitialScene.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalActiveSceneFieldMask & whichField))
    {
        _sfInternalActiveScene.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        _mfBackgrounds.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalActiveBackgroundFieldMask & whichField))
    {
        _sfInternalActiveBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        _mfForegrounds.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalActiveForegroundsFieldMask & whichField))
    {
        _mfInternalActiveForegrounds.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GlobalActiveForegroundsFieldMask & whichField))
    {
        _mfGlobalActiveForegrounds.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ModelNodesFieldMask & whichField))
    {
        _mfModelNodes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalActiveModelNodesFieldMask & whichField))
    {
        _mfInternalActiveModelNodes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GlobalActiveModelNodesFieldMask & whichField))
    {
        _mfGlobalActiveModelNodes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CamerasFieldMask & whichField))
    {
        _mfCameras.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalActiveCameraFieldMask & whichField))
    {
        _sfInternalActiveCamera.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ActiveAnimationsFieldMask & whichField))
    {
        _mfActiveAnimations.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ActiveParticleSystemsFieldMask & whichField))
    {
        _mfActiveParticleSystems.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LuaModuleFieldMask & whichField))
    {
        _sfLuaModule.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LuaModulesDirectoryFieldMask & whichField))
    {
        _sfLuaModulesDirectory.copyToBin(pMem);
    }
}

void ProjectBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (VersionFieldMask & whichField))
    {
        _sfVersion.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MainWindowTitleFieldMask & whichField))
    {
        _sfMainWindowTitle.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FilePathFieldMask & whichField))
    {
        _sfFilePath.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScenesFieldMask & whichField))
    {
        _mfScenes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InitialSceneFieldMask & whichField))
    {
        _sfInitialScene.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalActiveSceneFieldMask & whichField))
    {
        _sfInternalActiveScene.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        _mfBackgrounds.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalActiveBackgroundFieldMask & whichField))
    {
        _sfInternalActiveBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        _mfForegrounds.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalActiveForegroundsFieldMask & whichField))
    {
        _mfInternalActiveForegrounds.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GlobalActiveForegroundsFieldMask & whichField))
    {
        _mfGlobalActiveForegrounds.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ModelNodesFieldMask & whichField))
    {
        _mfModelNodes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalActiveModelNodesFieldMask & whichField))
    {
        _mfInternalActiveModelNodes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GlobalActiveModelNodesFieldMask & whichField))
    {
        _mfGlobalActiveModelNodes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CamerasFieldMask & whichField))
    {
        _mfCameras.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalActiveCameraFieldMask & whichField))
    {
        _sfInternalActiveCamera.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ActiveAnimationsFieldMask & whichField))
    {
        _mfActiveAnimations.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ActiveParticleSystemsFieldMask & whichField))
    {
        _mfActiveParticleSystems.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LuaModuleFieldMask & whichField))
    {
        _sfLuaModule.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LuaModulesDirectoryFieldMask & whichField))
    {
        _sfLuaModulesDirectory.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ProjectTransitPtr ProjectBase::createLocal(BitVector bFlags)
{
    ProjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<Project>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ProjectTransitPtr ProjectBase::createDependent(BitVector bFlags)
{
    ProjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<Project>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ProjectTransitPtr ProjectBase::create(void)
{
    ProjectTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<Project>(tmpPtr);
    }

    return fc;
}

Project *ProjectBase::createEmptyLocal(BitVector bFlags)
{
    Project *returnValue;

    newPtr<Project>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
Project *ProjectBase::createEmpty(void)
{
    Project *returnValue;

    newPtr<Project>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ProjectBase::shallowCopyLocal(
    BitVector bFlags) const
{
    Project *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Project *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ProjectBase::shallowCopyDependent(
    BitVector bFlags) const
{
    Project *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Project *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ProjectBase::shallowCopy(void) const
{
    Project *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const Project *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- event producers ----------------------------------*/
void ProjectBase::produceEvent(UInt32 eventId, EventDetails* const e)
{
    switch(eventId)
    {
    case ProjectStartedEventId:
        OSG_ASSERT(dynamic_cast<ProjectStartedEventDetailsType* const>(e));

        _ProjectStartedEvent.set_combiner(ConsumableEventCombiner(e));
        _ProjectStartedEvent(dynamic_cast<ProjectStartedEventDetailsType* const>(e), ProjectStartedEventId);
        break;
    case ProjectStoppingEventId:
        OSG_ASSERT(dynamic_cast<ProjectStoppingEventDetailsType* const>(e));

        _ProjectStoppingEvent.set_combiner(ConsumableEventCombiner(e));
        _ProjectStoppingEvent(dynamic_cast<ProjectStoppingEventDetailsType* const>(e), ProjectStoppingEventId);
        break;
    case ProjectStoppedEventId:
        OSG_ASSERT(dynamic_cast<ProjectStoppedEventDetailsType* const>(e));

        _ProjectStoppedEvent.set_combiner(ConsumableEventCombiner(e));
        _ProjectStoppedEvent(dynamic_cast<ProjectStoppedEventDetailsType* const>(e), ProjectStoppedEventId);
        break;
    case ProjectResetEventId:
        OSG_ASSERT(dynamic_cast<ProjectResetEventDetailsType* const>(e));

        _ProjectResetEvent.set_combiner(ConsumableEventCombiner(e));
        _ProjectResetEvent(dynamic_cast<ProjectResetEventDetailsType* const>(e), ProjectResetEventId);
        break;
    case SceneChangedEventId:
        OSG_ASSERT(dynamic_cast<SceneChangedEventDetailsType* const>(e));

        _SceneChangedEvent.set_combiner(ConsumableEventCombiner(e));
        _SceneChangedEvent(dynamic_cast<SceneChangedEventDetailsType* const>(e), SceneChangedEventId);
        break;
    case WindowOpenedEventId:
        OSG_ASSERT(dynamic_cast<WindowOpenedEventDetailsType* const>(e));

        _WindowOpenedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowOpenedEvent(dynamic_cast<WindowOpenedEventDetailsType* const>(e), WindowOpenedEventId);
        break;
    case WindowClosingEventId:
        OSG_ASSERT(dynamic_cast<WindowClosingEventDetailsType* const>(e));

        _WindowClosingEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowClosingEvent(dynamic_cast<WindowClosingEventDetailsType* const>(e), WindowClosingEventId);
        break;
    case WindowClosedEventId:
        OSG_ASSERT(dynamic_cast<WindowClosedEventDetailsType* const>(e));

        _WindowClosedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowClosedEvent(dynamic_cast<WindowClosedEventDetailsType* const>(e), WindowClosedEventId);
        break;
    case WindowIconifiedEventId:
        OSG_ASSERT(dynamic_cast<WindowIconifiedEventDetailsType* const>(e));

        _WindowIconifiedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowIconifiedEvent(dynamic_cast<WindowIconifiedEventDetailsType* const>(e), WindowIconifiedEventId);
        break;
    case WindowDeiconifiedEventId:
        OSG_ASSERT(dynamic_cast<WindowDeiconifiedEventDetailsType* const>(e));

        _WindowDeiconifiedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowDeiconifiedEvent(dynamic_cast<WindowDeiconifiedEventDetailsType* const>(e), WindowDeiconifiedEventId);
        break;
    case WindowActivatedEventId:
        OSG_ASSERT(dynamic_cast<WindowActivatedEventDetailsType* const>(e));

        _WindowActivatedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowActivatedEvent(dynamic_cast<WindowActivatedEventDetailsType* const>(e), WindowActivatedEventId);
        break;
    case WindowDeactivatedEventId:
        OSG_ASSERT(dynamic_cast<WindowDeactivatedEventDetailsType* const>(e));

        _WindowDeactivatedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowDeactivatedEvent(dynamic_cast<WindowDeactivatedEventDetailsType* const>(e), WindowDeactivatedEventId);
        break;
    case WindowEnteredEventId:
        OSG_ASSERT(dynamic_cast<WindowEnteredEventDetailsType* const>(e));

        _WindowEnteredEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowEnteredEvent(dynamic_cast<WindowEnteredEventDetailsType* const>(e), WindowEnteredEventId);
        break;
    case WindowExitedEventId:
        OSG_ASSERT(dynamic_cast<WindowExitedEventDetailsType* const>(e));

        _WindowExitedEvent.set_combiner(ConsumableEventCombiner(e));
        _WindowExitedEvent(dynamic_cast<WindowExitedEventDetailsType* const>(e), WindowExitedEventId);
        break;
    case MouseClickedEventId:
        OSG_ASSERT(dynamic_cast<MouseClickedEventDetailsType* const>(e));

        _MouseClickedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseClickedEvent(dynamic_cast<MouseClickedEventDetailsType* const>(e), MouseClickedEventId);
        break;
    case MouseEnteredEventId:
        OSG_ASSERT(dynamic_cast<MouseEnteredEventDetailsType* const>(e));

        _MouseEnteredEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseEnteredEvent(dynamic_cast<MouseEnteredEventDetailsType* const>(e), MouseEnteredEventId);
        break;
    case MouseExitedEventId:
        OSG_ASSERT(dynamic_cast<MouseExitedEventDetailsType* const>(e));

        _MouseExitedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseExitedEvent(dynamic_cast<MouseExitedEventDetailsType* const>(e), MouseExitedEventId);
        break;
    case MousePressedEventId:
        OSG_ASSERT(dynamic_cast<MousePressedEventDetailsType* const>(e));

        _MousePressedEvent.set_combiner(ConsumableEventCombiner(e));
        _MousePressedEvent(dynamic_cast<MousePressedEventDetailsType* const>(e), MousePressedEventId);
        break;
    case MouseReleasedEventId:
        OSG_ASSERT(dynamic_cast<MouseReleasedEventDetailsType* const>(e));

        _MouseReleasedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseReleasedEvent(dynamic_cast<MouseReleasedEventDetailsType* const>(e), MouseReleasedEventId);
        break;
    case MouseMovedEventId:
        OSG_ASSERT(dynamic_cast<MouseMovedEventDetailsType* const>(e));

        _MouseMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseMovedEvent(dynamic_cast<MouseMovedEventDetailsType* const>(e), MouseMovedEventId);
        break;
    case MouseDraggedEventId:
        OSG_ASSERT(dynamic_cast<MouseDraggedEventDetailsType* const>(e));

        _MouseDraggedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseDraggedEvent(dynamic_cast<MouseDraggedEventDetailsType* const>(e), MouseDraggedEventId);
        break;
    case MouseWheelMovedEventId:
        OSG_ASSERT(dynamic_cast<MouseWheelMovedEventDetailsType* const>(e));

        _MouseWheelMovedEvent.set_combiner(ConsumableEventCombiner(e));
        _MouseWheelMovedEvent(dynamic_cast<MouseWheelMovedEventDetailsType* const>(e), MouseWheelMovedEventId);
        break;
    case KeyPressedEventId:
        OSG_ASSERT(dynamic_cast<KeyPressedEventDetailsType* const>(e));

        _KeyPressedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyPressedEvent(dynamic_cast<KeyPressedEventDetailsType* const>(e), KeyPressedEventId);
        break;
    case KeyReleasedEventId:
        OSG_ASSERT(dynamic_cast<KeyReleasedEventDetailsType* const>(e));

        _KeyReleasedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyReleasedEvent(dynamic_cast<KeyReleasedEventDetailsType* const>(e), KeyReleasedEventId);
        break;
    case KeyTypedEventId:
        OSG_ASSERT(dynamic_cast<KeyTypedEventDetailsType* const>(e));

        _KeyTypedEvent.set_combiner(ConsumableEventCombiner(e));
        _KeyTypedEvent(dynamic_cast<KeyTypedEventDetailsType* const>(e), KeyTypedEventId);
        break;
    case UpdateEventId:
        OSG_ASSERT(dynamic_cast<UpdateEventDetailsType* const>(e));

        _UpdateEvent.set_combiner(ConsumableEventCombiner(e));
        _UpdateEvent(dynamic_cast<UpdateEventDetailsType* const>(e), UpdateEventId);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

boost::signals2::connection ProjectBase::connectEvent(UInt32 eventId, 
                                                             const BaseEventType::slot_type &listener, 
                                                             boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ProjectStartedEventId:
        return _ProjectStartedEvent.connect(listener, at);
        break;
    case ProjectStoppingEventId:
        return _ProjectStoppingEvent.connect(listener, at);
        break;
    case ProjectStoppedEventId:
        return _ProjectStoppedEvent.connect(listener, at);
        break;
    case ProjectResetEventId:
        return _ProjectResetEvent.connect(listener, at);
        break;
    case SceneChangedEventId:
        return _SceneChangedEvent.connect(listener, at);
        break;
    case WindowOpenedEventId:
        return _WindowOpenedEvent.connect(listener, at);
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.connect(listener, at);
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.connect(listener, at);
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.connect(listener, at);
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.connect(listener, at);
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.connect(listener, at);
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.connect(listener, at);
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.connect(listener, at);
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.connect(listener, at);
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.connect(listener, at);
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.connect(listener, at);
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.connect(listener, at);
        break;
    case MousePressedEventId:
        return _MousePressedEvent.connect(listener, at);
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.connect(listener, at);
        break;
    case MouseMovedEventId:
        return _MouseMovedEvent.connect(listener, at);
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.connect(listener, at);
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.connect(listener, at);
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.connect(listener, at);
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.connect(listener, at);
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.connect(listener, at);
        break;
    case UpdateEventId:
        return _UpdateEvent.connect(listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}

boost::signals2::connection  ProjectBase::connectEvent(UInt32 eventId, 
                                                              const BaseEventType::group_type &group,
                                                              const BaseEventType::slot_type &listener,
                                                              boost::signals2::connect_position at)
{
    switch(eventId)
    {
    case ProjectStartedEventId:
        return _ProjectStartedEvent.connect(group, listener, at);
        break;
    case ProjectStoppingEventId:
        return _ProjectStoppingEvent.connect(group, listener, at);
        break;
    case ProjectStoppedEventId:
        return _ProjectStoppedEvent.connect(group, listener, at);
        break;
    case ProjectResetEventId:
        return _ProjectResetEvent.connect(group, listener, at);
        break;
    case SceneChangedEventId:
        return _SceneChangedEvent.connect(group, listener, at);
        break;
    case WindowOpenedEventId:
        return _WindowOpenedEvent.connect(group, listener, at);
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.connect(group, listener, at);
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.connect(group, listener, at);
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.connect(group, listener, at);
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.connect(group, listener, at);
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.connect(group, listener, at);
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.connect(group, listener, at);
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.connect(group, listener, at);
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.connect(group, listener, at);
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.connect(group, listener, at);
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.connect(group, listener, at);
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.connect(group, listener, at);
        break;
    case MousePressedEventId:
        return _MousePressedEvent.connect(group, listener, at);
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.connect(group, listener, at);
        break;
    case MouseMovedEventId:
        return _MouseMovedEvent.connect(group, listener, at);
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.connect(group, listener, at);
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.connect(group, listener, at);
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.connect(group, listener, at);
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.connect(group, listener, at);
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.connect(group, listener, at);
        break;
    case UpdateEventId:
        return _UpdateEvent.connect(group, listener, at);
        break;
    default:
        SWARNING << "No event defined with that ID";
        return boost::signals2::connection();
        break;
    }

    return boost::signals2::connection();
}
    
void  ProjectBase::disconnectEvent(UInt32 eventId, const BaseEventType::group_type &group)
{
    switch(eventId)
    {
    case ProjectStartedEventId:
        _ProjectStartedEvent.disconnect(group);
        break;
    case ProjectStoppingEventId:
        _ProjectStoppingEvent.disconnect(group);
        break;
    case ProjectStoppedEventId:
        _ProjectStoppedEvent.disconnect(group);
        break;
    case ProjectResetEventId:
        _ProjectResetEvent.disconnect(group);
        break;
    case SceneChangedEventId:
        _SceneChangedEvent.disconnect(group);
        break;
    case WindowOpenedEventId:
        _WindowOpenedEvent.disconnect(group);
        break;
    case WindowClosingEventId:
        _WindowClosingEvent.disconnect(group);
        break;
    case WindowClosedEventId:
        _WindowClosedEvent.disconnect(group);
        break;
    case WindowIconifiedEventId:
        _WindowIconifiedEvent.disconnect(group);
        break;
    case WindowDeiconifiedEventId:
        _WindowDeiconifiedEvent.disconnect(group);
        break;
    case WindowActivatedEventId:
        _WindowActivatedEvent.disconnect(group);
        break;
    case WindowDeactivatedEventId:
        _WindowDeactivatedEvent.disconnect(group);
        break;
    case WindowEnteredEventId:
        _WindowEnteredEvent.disconnect(group);
        break;
    case WindowExitedEventId:
        _WindowExitedEvent.disconnect(group);
        break;
    case MouseClickedEventId:
        _MouseClickedEvent.disconnect(group);
        break;
    case MouseEnteredEventId:
        _MouseEnteredEvent.disconnect(group);
        break;
    case MouseExitedEventId:
        _MouseExitedEvent.disconnect(group);
        break;
    case MousePressedEventId:
        _MousePressedEvent.disconnect(group);
        break;
    case MouseReleasedEventId:
        _MouseReleasedEvent.disconnect(group);
        break;
    case MouseMovedEventId:
        _MouseMovedEvent.disconnect(group);
        break;
    case MouseDraggedEventId:
        _MouseDraggedEvent.disconnect(group);
        break;
    case MouseWheelMovedEventId:
        _MouseWheelMovedEvent.disconnect(group);
        break;
    case KeyPressedEventId:
        _KeyPressedEvent.disconnect(group);
        break;
    case KeyReleasedEventId:
        _KeyReleasedEvent.disconnect(group);
        break;
    case KeyTypedEventId:
        _KeyTypedEvent.disconnect(group);
        break;
    case UpdateEventId:
        _UpdateEvent.disconnect(group);
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

void  ProjectBase::disconnectAllSlotsEvent(UInt32 eventId)
{
    switch(eventId)
    {
    case ProjectStartedEventId:
        _ProjectStartedEvent.disconnect_all_slots();
        break;
    case ProjectStoppingEventId:
        _ProjectStoppingEvent.disconnect_all_slots();
        break;
    case ProjectStoppedEventId:
        _ProjectStoppedEvent.disconnect_all_slots();
        break;
    case ProjectResetEventId:
        _ProjectResetEvent.disconnect_all_slots();
        break;
    case SceneChangedEventId:
        _SceneChangedEvent.disconnect_all_slots();
        break;
    case WindowOpenedEventId:
        _WindowOpenedEvent.disconnect_all_slots();
        break;
    case WindowClosingEventId:
        _WindowClosingEvent.disconnect_all_slots();
        break;
    case WindowClosedEventId:
        _WindowClosedEvent.disconnect_all_slots();
        break;
    case WindowIconifiedEventId:
        _WindowIconifiedEvent.disconnect_all_slots();
        break;
    case WindowDeiconifiedEventId:
        _WindowDeiconifiedEvent.disconnect_all_slots();
        break;
    case WindowActivatedEventId:
        _WindowActivatedEvent.disconnect_all_slots();
        break;
    case WindowDeactivatedEventId:
        _WindowDeactivatedEvent.disconnect_all_slots();
        break;
    case WindowEnteredEventId:
        _WindowEnteredEvent.disconnect_all_slots();
        break;
    case WindowExitedEventId:
        _WindowExitedEvent.disconnect_all_slots();
        break;
    case MouseClickedEventId:
        _MouseClickedEvent.disconnect_all_slots();
        break;
    case MouseEnteredEventId:
        _MouseEnteredEvent.disconnect_all_slots();
        break;
    case MouseExitedEventId:
        _MouseExitedEvent.disconnect_all_slots();
        break;
    case MousePressedEventId:
        _MousePressedEvent.disconnect_all_slots();
        break;
    case MouseReleasedEventId:
        _MouseReleasedEvent.disconnect_all_slots();
        break;
    case MouseMovedEventId:
        _MouseMovedEvent.disconnect_all_slots();
        break;
    case MouseDraggedEventId:
        _MouseDraggedEvent.disconnect_all_slots();
        break;
    case MouseWheelMovedEventId:
        _MouseWheelMovedEvent.disconnect_all_slots();
        break;
    case KeyPressedEventId:
        _KeyPressedEvent.disconnect_all_slots();
        break;
    case KeyReleasedEventId:
        _KeyReleasedEvent.disconnect_all_slots();
        break;
    case KeyTypedEventId:
        _KeyTypedEvent.disconnect_all_slots();
        break;
    case UpdateEventId:
        _UpdateEvent.disconnect_all_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        break;
    }
}

bool  ProjectBase::isEmptyEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ProjectStartedEventId:
        return _ProjectStartedEvent.empty();
        break;
    case ProjectStoppingEventId:
        return _ProjectStoppingEvent.empty();
        break;
    case ProjectStoppedEventId:
        return _ProjectStoppedEvent.empty();
        break;
    case ProjectResetEventId:
        return _ProjectResetEvent.empty();
        break;
    case SceneChangedEventId:
        return _SceneChangedEvent.empty();
        break;
    case WindowOpenedEventId:
        return _WindowOpenedEvent.empty();
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.empty();
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.empty();
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.empty();
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.empty();
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.empty();
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.empty();
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.empty();
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.empty();
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.empty();
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.empty();
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.empty();
        break;
    case MousePressedEventId:
        return _MousePressedEvent.empty();
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.empty();
        break;
    case MouseMovedEventId:
        return _MouseMovedEvent.empty();
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.empty();
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.empty();
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.empty();
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.empty();
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.empty();
        break;
    case UpdateEventId:
        return _UpdateEvent.empty();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return true;
        break;
    }
}

UInt32  ProjectBase::numSlotsEvent(UInt32 eventId) const
{
    switch(eventId)
    {
    case ProjectStartedEventId:
        return _ProjectStartedEvent.num_slots();
        break;
    case ProjectStoppingEventId:
        return _ProjectStoppingEvent.num_slots();
        break;
    case ProjectStoppedEventId:
        return _ProjectStoppedEvent.num_slots();
        break;
    case ProjectResetEventId:
        return _ProjectResetEvent.num_slots();
        break;
    case SceneChangedEventId:
        return _SceneChangedEvent.num_slots();
        break;
    case WindowOpenedEventId:
        return _WindowOpenedEvent.num_slots();
        break;
    case WindowClosingEventId:
        return _WindowClosingEvent.num_slots();
        break;
    case WindowClosedEventId:
        return _WindowClosedEvent.num_slots();
        break;
    case WindowIconifiedEventId:
        return _WindowIconifiedEvent.num_slots();
        break;
    case WindowDeiconifiedEventId:
        return _WindowDeiconifiedEvent.num_slots();
        break;
    case WindowActivatedEventId:
        return _WindowActivatedEvent.num_slots();
        break;
    case WindowDeactivatedEventId:
        return _WindowDeactivatedEvent.num_slots();
        break;
    case WindowEnteredEventId:
        return _WindowEnteredEvent.num_slots();
        break;
    case WindowExitedEventId:
        return _WindowExitedEvent.num_slots();
        break;
    case MouseClickedEventId:
        return _MouseClickedEvent.num_slots();
        break;
    case MouseEnteredEventId:
        return _MouseEnteredEvent.num_slots();
        break;
    case MouseExitedEventId:
        return _MouseExitedEvent.num_slots();
        break;
    case MousePressedEventId:
        return _MousePressedEvent.num_slots();
        break;
    case MouseReleasedEventId:
        return _MouseReleasedEvent.num_slots();
        break;
    case MouseMovedEventId:
        return _MouseMovedEvent.num_slots();
        break;
    case MouseDraggedEventId:
        return _MouseDraggedEvent.num_slots();
        break;
    case MouseWheelMovedEventId:
        return _MouseWheelMovedEvent.num_slots();
        break;
    case KeyPressedEventId:
        return _KeyPressedEvent.num_slots();
        break;
    case KeyReleasedEventId:
        return _KeyReleasedEvent.num_slots();
        break;
    case KeyTypedEventId:
        return _KeyTypedEvent.num_slots();
        break;
    case UpdateEventId:
        return _UpdateEvent.num_slots();
        break;
    default:
        SWARNING << "No event defined with that ID";
        return 0;
        break;
    }
}


/*------------------------- constructors ----------------------------------*/

ProjectBase::ProjectBase(void) :
    Inherited(),
    _sfVersion                (),
    _sfMainWindowTitle        (),
    _sfFilePath               (),
    _mfScenes                 (this,
                          ScenesFieldId,
                          Scene::ParentProjectFieldId),
    _sfInitialScene           (NULL),
    _sfInternalActiveScene    (NULL),
    _mfBackgrounds            (),
    _sfInternalActiveBackground(NULL),
    _mfForegrounds            (),
    _mfInternalActiveForegrounds(),
    _mfGlobalActiveForegrounds(),
    _mfModelNodes             (),
    _mfInternalActiveModelNodes(),
    _mfGlobalActiveModelNodes (),
    _mfCameras                (),
    _sfInternalActiveCamera   (NULL),
    _mfActiveAnimations       (),
    _mfActiveParticleSystems  (),
    _sfLuaModule              (),
    _sfLuaModulesDirectory    (BoostPath("./lua"))
{
}

ProjectBase::ProjectBase(const ProjectBase &source) :
    Inherited(source),
    _sfVersion                (source._sfVersion                ),
    _sfMainWindowTitle        (source._sfMainWindowTitle        ),
    _sfFilePath               (source._sfFilePath               ),
    _mfScenes                 (this,
                          ScenesFieldId,
                          Scene::ParentProjectFieldId),
    _sfInitialScene           (NULL),
    _sfInternalActiveScene    (NULL),
    _mfBackgrounds            (),
    _sfInternalActiveBackground(NULL),
    _mfForegrounds            (),
    _mfInternalActiveForegrounds(),
    _mfGlobalActiveForegrounds(),
    _mfModelNodes             (),
    _mfInternalActiveModelNodes(),
    _mfGlobalActiveModelNodes (),
    _mfCameras                (),
    _sfInternalActiveCamera   (NULL),
    _mfActiveAnimations       (),
    _mfActiveParticleSystems  (),
    _sfLuaModule              (source._sfLuaModule              ),
    _sfLuaModulesDirectory    (source._sfLuaModulesDirectory    )
{
}


/*-------------------------- destructors ----------------------------------*/

ProjectBase::~ProjectBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool ProjectBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == ScenesFieldId)
    {
        Scene * pTypedChild =
            dynamic_cast<Scene *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfScenes.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(ScenesFieldMask, _mfScenes);

                _mfScenes.erase(iChildIdx);

                return true;
            }

            FWARNING(("ProjectBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void ProjectBase::onCreate(const Project *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Project *pThis = static_cast<Project *>(this);

        MFUnrecChildScenePtr::const_iterator ScenesIt  =
            source->_mfScenes.begin();
        MFUnrecChildScenePtr::const_iterator ScenesEnd =
            source->_mfScenes.end  ();

        while(ScenesIt != ScenesEnd)
        {
            pThis->pushToScenes(*ScenesIt);

            ++ScenesIt;
        }

        pThis->setInitialScene(source->getInitialScene());

        pThis->setInternalActiveScene(source->getInternalActiveScene());

        MFUnrecBackgroundPtr::const_iterator BackgroundsIt  =
            source->_mfBackgrounds.begin();
        MFUnrecBackgroundPtr::const_iterator BackgroundsEnd =
            source->_mfBackgrounds.end  ();

        while(BackgroundsIt != BackgroundsEnd)
        {
            pThis->pushToBackgrounds(*BackgroundsIt);

            ++BackgroundsIt;
        }

        pThis->setInternalActiveBackground(source->getInternalActiveBackground());

        MFUnrecForegroundPtr::const_iterator ForegroundsIt  =
            source->_mfForegrounds.begin();
        MFUnrecForegroundPtr::const_iterator ForegroundsEnd =
            source->_mfForegrounds.end  ();

        while(ForegroundsIt != ForegroundsEnd)
        {
            pThis->pushToForegrounds(*ForegroundsIt);

            ++ForegroundsIt;
        }

        MFUnrecForegroundPtr::const_iterator InternalActiveForegroundsIt  =
            source->_mfInternalActiveForegrounds.begin();
        MFUnrecForegroundPtr::const_iterator InternalActiveForegroundsEnd =
            source->_mfInternalActiveForegrounds.end  ();

        while(InternalActiveForegroundsIt != InternalActiveForegroundsEnd)
        {
            pThis->pushToInternalActiveForegrounds(*InternalActiveForegroundsIt);

            ++InternalActiveForegroundsIt;
        }

        MFUnrecForegroundPtr::const_iterator GlobalActiveForegroundsIt  =
            source->_mfGlobalActiveForegrounds.begin();
        MFUnrecForegroundPtr::const_iterator GlobalActiveForegroundsEnd =
            source->_mfGlobalActiveForegrounds.end  ();

        while(GlobalActiveForegroundsIt != GlobalActiveForegroundsEnd)
        {
            pThis->pushToGlobalActiveForegrounds(*GlobalActiveForegroundsIt);

            ++GlobalActiveForegroundsIt;
        }

        MFUnrecNodePtr::const_iterator ModelNodesIt  =
            source->_mfModelNodes.begin();
        MFUnrecNodePtr::const_iterator ModelNodesEnd =
            source->_mfModelNodes.end  ();

        while(ModelNodesIt != ModelNodesEnd)
        {
            pThis->pushToModelNodes(*ModelNodesIt);

            ++ModelNodesIt;
        }

        MFUnrecNodePtr::const_iterator InternalActiveModelNodesIt  =
            source->_mfInternalActiveModelNodes.begin();
        MFUnrecNodePtr::const_iterator InternalActiveModelNodesEnd =
            source->_mfInternalActiveModelNodes.end  ();

        while(InternalActiveModelNodesIt != InternalActiveModelNodesEnd)
        {
            pThis->pushToInternalActiveModelNodes(*InternalActiveModelNodesIt);

            ++InternalActiveModelNodesIt;
        }

        MFUnrecNodePtr::const_iterator GlobalActiveModelNodesIt  =
            source->_mfGlobalActiveModelNodes.begin();
        MFUnrecNodePtr::const_iterator GlobalActiveModelNodesEnd =
            source->_mfGlobalActiveModelNodes.end  ();

        while(GlobalActiveModelNodesIt != GlobalActiveModelNodesEnd)
        {
            pThis->pushToGlobalActiveModelNodes(*GlobalActiveModelNodesIt);

            ++GlobalActiveModelNodesIt;
        }

        MFUnrecCameraPtr::const_iterator CamerasIt  =
            source->_mfCameras.begin();
        MFUnrecCameraPtr::const_iterator CamerasEnd =
            source->_mfCameras.end  ();

        while(CamerasIt != CamerasEnd)
        {
            pThis->pushToCameras(*CamerasIt);

            ++CamerasIt;
        }

        pThis->setInternalActiveCamera(source->getInternalActiveCamera());

        MFUnrecAnimationPtr::const_iterator ActiveAnimationsIt  =
            source->_mfActiveAnimations.begin();
        MFUnrecAnimationPtr::const_iterator ActiveAnimationsEnd =
            source->_mfActiveAnimations.end  ();

        while(ActiveAnimationsIt != ActiveAnimationsEnd)
        {
            pThis->pushToActiveAnimations(*ActiveAnimationsIt);

            ++ActiveAnimationsIt;
        }

        MFUnrecParticleSystemPtr::const_iterator ActiveParticleSystemsIt  =
            source->_mfActiveParticleSystems.begin();
        MFUnrecParticleSystemPtr::const_iterator ActiveParticleSystemsEnd =
            source->_mfActiveParticleSystems.end  ();

        while(ActiveParticleSystemsIt != ActiveParticleSystemsEnd)
        {
            pThis->pushToActiveParticleSystems(*ActiveParticleSystemsIt);

            ++ActiveParticleSystemsIt;
        }
    }
}

GetFieldHandlePtr ProjectBase::getHandleVersion         (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfVersion,
             this->getType().getFieldDesc(VersionFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleVersion        (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfVersion,
             this->getType().getFieldDesc(VersionFieldId),
             this));


    editSField(VersionFieldMask);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleMainWindowTitle (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfMainWindowTitle,
             this->getType().getFieldDesc(MainWindowTitleFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleMainWindowTitle(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfMainWindowTitle,
             this->getType().getFieldDesc(MainWindowTitleFieldId),
             this));


    editSField(MainWindowTitleFieldMask);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleFilePath        (void) const
{
    SFBoostPath::GetHandlePtr returnValue(
        new  SFBoostPath::GetHandle(
             &_sfFilePath,
             this->getType().getFieldDesc(FilePathFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleFilePath       (void)
{
    SFBoostPath::EditHandlePtr returnValue(
        new  SFBoostPath::EditHandle(
             &_sfFilePath,
             this->getType().getFieldDesc(FilePathFieldId),
             this));


    editSField(FilePathFieldMask);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleScenes          (void) const
{
    MFUnrecChildScenePtr::GetHandlePtr returnValue(
        new  MFUnrecChildScenePtr::GetHandle(
             &_mfScenes,
             this->getType().getFieldDesc(ScenesFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleScenes         (void)
{
    MFUnrecChildScenePtr::EditHandlePtr returnValue(
        new  MFUnrecChildScenePtr::EditHandle(
             &_mfScenes,
             this->getType().getFieldDesc(ScenesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Project::pushToScenes,
                    static_cast<Project *>(this), _1));
    returnValue->setInsertMethod(
        boost::bind(&Project::insertIntoScenes,
                    static_cast<Project *>(this), _1, _2));
    returnValue->setReplaceMethod(
        boost::bind(&Project::replaceInScenes,
                    static_cast<Project *>(this), _1, _2));
    returnValue->setReplaceObjMethod(
        boost::bind(&Project::replaceObjInScenes,
                    static_cast<Project *>(this), _1, _2));
    returnValue->setRemoveMethod(
        boost::bind(&Project::removeFromScenes,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Project::removeObjFromScenes,
                    static_cast<Project *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Project::clearScenes,
                    static_cast<Project *>(this)));

    editMField(ScenesFieldMask, _mfScenes);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleInitialScene    (void) const
{
    SFUnrecScenePtr::GetHandlePtr returnValue(
        new  SFUnrecScenePtr::GetHandle(
             &_sfInitialScene,
             this->getType().getFieldDesc(InitialSceneFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleInitialScene   (void)
{
    SFUnrecScenePtr::EditHandlePtr returnValue(
        new  SFUnrecScenePtr::EditHandle(
             &_sfInitialScene,
             this->getType().getFieldDesc(InitialSceneFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Project::setInitialScene,
                    static_cast<Project *>(this), _1));

    editSField(InitialSceneFieldMask);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleInternalActiveScene (void) const
{
    SFUnrecScenePtr::GetHandlePtr returnValue(
        new  SFUnrecScenePtr::GetHandle(
             &_sfInternalActiveScene,
             this->getType().getFieldDesc(InternalActiveSceneFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleInternalActiveScene(void)
{
    SFUnrecScenePtr::EditHandlePtr returnValue(
        new  SFUnrecScenePtr::EditHandle(
             &_sfInternalActiveScene,
             this->getType().getFieldDesc(InternalActiveSceneFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Project::setInternalActiveScene,
                    static_cast<Project *>(this), _1));

    editSField(InternalActiveSceneFieldMask);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleBackgrounds     (void) const
{
    MFUnrecBackgroundPtr::GetHandlePtr returnValue(
        new  MFUnrecBackgroundPtr::GetHandle(
             &_mfBackgrounds,
             this->getType().getFieldDesc(BackgroundsFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleBackgrounds    (void)
{
    MFUnrecBackgroundPtr::EditHandlePtr returnValue(
        new  MFUnrecBackgroundPtr::EditHandle(
             &_mfBackgrounds,
             this->getType().getFieldDesc(BackgroundsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Project::pushToBackgrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Project::removeFromBackgrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Project::removeObjFromBackgrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Project::clearBackgrounds,
                    static_cast<Project *>(this)));

    editMField(BackgroundsFieldMask, _mfBackgrounds);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleInternalActiveBackground (void) const
{
    SFUnrecBackgroundPtr::GetHandlePtr returnValue(
        new  SFUnrecBackgroundPtr::GetHandle(
             &_sfInternalActiveBackground,
             this->getType().getFieldDesc(InternalActiveBackgroundFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleInternalActiveBackground(void)
{
    SFUnrecBackgroundPtr::EditHandlePtr returnValue(
        new  SFUnrecBackgroundPtr::EditHandle(
             &_sfInternalActiveBackground,
             this->getType().getFieldDesc(InternalActiveBackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Project::setInternalActiveBackground,
                    static_cast<Project *>(this), _1));

    editSField(InternalActiveBackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleForegrounds     (void) const
{
    MFUnrecForegroundPtr::GetHandlePtr returnValue(
        new  MFUnrecForegroundPtr::GetHandle(
             &_mfForegrounds,
             this->getType().getFieldDesc(ForegroundsFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleForegrounds    (void)
{
    MFUnrecForegroundPtr::EditHandlePtr returnValue(
        new  MFUnrecForegroundPtr::EditHandle(
             &_mfForegrounds,
             this->getType().getFieldDesc(ForegroundsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Project::pushToForegrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Project::removeFromForegrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Project::removeObjFromForegrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Project::clearForegrounds,
                    static_cast<Project *>(this)));

    editMField(ForegroundsFieldMask, _mfForegrounds);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleInternalActiveForegrounds (void) const
{
    MFUnrecForegroundPtr::GetHandlePtr returnValue(
        new  MFUnrecForegroundPtr::GetHandle(
             &_mfInternalActiveForegrounds,
             this->getType().getFieldDesc(InternalActiveForegroundsFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleInternalActiveForegrounds(void)
{
    MFUnrecForegroundPtr::EditHandlePtr returnValue(
        new  MFUnrecForegroundPtr::EditHandle(
             &_mfInternalActiveForegrounds,
             this->getType().getFieldDesc(InternalActiveForegroundsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Project::pushToInternalActiveForegrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Project::removeFromInternalActiveForegrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Project::removeObjFromInternalActiveForegrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Project::clearInternalActiveForegrounds,
                    static_cast<Project *>(this)));

    editMField(InternalActiveForegroundsFieldMask, _mfInternalActiveForegrounds);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleGlobalActiveForegrounds (void) const
{
    MFUnrecForegroundPtr::GetHandlePtr returnValue(
        new  MFUnrecForegroundPtr::GetHandle(
             &_mfGlobalActiveForegrounds,
             this->getType().getFieldDesc(GlobalActiveForegroundsFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleGlobalActiveForegrounds(void)
{
    MFUnrecForegroundPtr::EditHandlePtr returnValue(
        new  MFUnrecForegroundPtr::EditHandle(
             &_mfGlobalActiveForegrounds,
             this->getType().getFieldDesc(GlobalActiveForegroundsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Project::pushToGlobalActiveForegrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Project::removeFromGlobalActiveForegrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Project::removeObjFromGlobalActiveForegrounds,
                    static_cast<Project *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Project::clearGlobalActiveForegrounds,
                    static_cast<Project *>(this)));

    editMField(GlobalActiveForegroundsFieldMask, _mfGlobalActiveForegrounds);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleModelNodes      (void) const
{
    MFUnrecNodePtr::GetHandlePtr returnValue(
        new  MFUnrecNodePtr::GetHandle(
             &_mfModelNodes,
             this->getType().getFieldDesc(ModelNodesFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleModelNodes     (void)
{
    MFUnrecNodePtr::EditHandlePtr returnValue(
        new  MFUnrecNodePtr::EditHandle(
             &_mfModelNodes,
             this->getType().getFieldDesc(ModelNodesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Project::pushToModelNodes,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Project::removeFromModelNodes,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Project::removeObjFromModelNodes,
                    static_cast<Project *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Project::clearModelNodes,
                    static_cast<Project *>(this)));

    editMField(ModelNodesFieldMask, _mfModelNodes);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleInternalActiveModelNodes (void) const
{
    MFUnrecNodePtr::GetHandlePtr returnValue(
        new  MFUnrecNodePtr::GetHandle(
             &_mfInternalActiveModelNodes,
             this->getType().getFieldDesc(InternalActiveModelNodesFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleInternalActiveModelNodes(void)
{
    MFUnrecNodePtr::EditHandlePtr returnValue(
        new  MFUnrecNodePtr::EditHandle(
             &_mfInternalActiveModelNodes,
             this->getType().getFieldDesc(InternalActiveModelNodesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Project::pushToInternalActiveModelNodes,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Project::removeFromInternalActiveModelNodes,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Project::removeObjFromInternalActiveModelNodes,
                    static_cast<Project *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Project::clearInternalActiveModelNodes,
                    static_cast<Project *>(this)));

    editMField(InternalActiveModelNodesFieldMask, _mfInternalActiveModelNodes);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleGlobalActiveModelNodes (void) const
{
    MFUnrecNodePtr::GetHandlePtr returnValue(
        new  MFUnrecNodePtr::GetHandle(
             &_mfGlobalActiveModelNodes,
             this->getType().getFieldDesc(GlobalActiveModelNodesFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleGlobalActiveModelNodes(void)
{
    MFUnrecNodePtr::EditHandlePtr returnValue(
        new  MFUnrecNodePtr::EditHandle(
             &_mfGlobalActiveModelNodes,
             this->getType().getFieldDesc(GlobalActiveModelNodesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Project::pushToGlobalActiveModelNodes,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Project::removeFromGlobalActiveModelNodes,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Project::removeObjFromGlobalActiveModelNodes,
                    static_cast<Project *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Project::clearGlobalActiveModelNodes,
                    static_cast<Project *>(this)));

    editMField(GlobalActiveModelNodesFieldMask, _mfGlobalActiveModelNodes);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleCameras         (void) const
{
    MFUnrecCameraPtr::GetHandlePtr returnValue(
        new  MFUnrecCameraPtr::GetHandle(
             &_mfCameras,
             this->getType().getFieldDesc(CamerasFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleCameras        (void)
{
    MFUnrecCameraPtr::EditHandlePtr returnValue(
        new  MFUnrecCameraPtr::EditHandle(
             &_mfCameras,
             this->getType().getFieldDesc(CamerasFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Project::pushToCameras,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Project::removeFromCameras,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Project::removeObjFromCameras,
                    static_cast<Project *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Project::clearCameras,
                    static_cast<Project *>(this)));

    editMField(CamerasFieldMask, _mfCameras);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleInternalActiveCamera (void) const
{
    SFUnrecCameraPtr::GetHandlePtr returnValue(
        new  SFUnrecCameraPtr::GetHandle(
             &_sfInternalActiveCamera,
             this->getType().getFieldDesc(InternalActiveCameraFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleInternalActiveCamera(void)
{
    SFUnrecCameraPtr::EditHandlePtr returnValue(
        new  SFUnrecCameraPtr::EditHandle(
             &_sfInternalActiveCamera,
             this->getType().getFieldDesc(InternalActiveCameraFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Project::setInternalActiveCamera,
                    static_cast<Project *>(this), _1));

    editSField(InternalActiveCameraFieldMask);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleActiveAnimations (void) const
{
    MFUnrecAnimationPtr::GetHandlePtr returnValue(
        new  MFUnrecAnimationPtr::GetHandle(
             &_mfActiveAnimations,
             this->getType().getFieldDesc(ActiveAnimationsFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleActiveAnimations(void)
{
    MFUnrecAnimationPtr::EditHandlePtr returnValue(
        new  MFUnrecAnimationPtr::EditHandle(
             &_mfActiveAnimations,
             this->getType().getFieldDesc(ActiveAnimationsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Project::pushToActiveAnimations,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Project::removeFromActiveAnimations,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Project::removeObjFromActiveAnimations,
                    static_cast<Project *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Project::clearActiveAnimations,
                    static_cast<Project *>(this)));

    editMField(ActiveAnimationsFieldMask, _mfActiveAnimations);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleActiveParticleSystems (void) const
{
    MFUnrecParticleSystemPtr::GetHandlePtr returnValue(
        new  MFUnrecParticleSystemPtr::GetHandle(
             &_mfActiveParticleSystems,
             this->getType().getFieldDesc(ActiveParticleSystemsFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleActiveParticleSystems(void)
{
    MFUnrecParticleSystemPtr::EditHandlePtr returnValue(
        new  MFUnrecParticleSystemPtr::EditHandle(
             &_mfActiveParticleSystems,
             this->getType().getFieldDesc(ActiveParticleSystemsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Project::pushToActiveParticleSystems,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&Project::removeFromActiveParticleSystems,
                    static_cast<Project *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Project::removeObjFromActiveParticleSystems,
                    static_cast<Project *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&Project::clearActiveParticleSystems,
                    static_cast<Project *>(this)));

    editMField(ActiveParticleSystemsFieldMask, _mfActiveParticleSystems);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleLuaModule       (void) const
{
    SFBoostPath::GetHandlePtr returnValue(
        new  SFBoostPath::GetHandle(
             &_sfLuaModule,
             this->getType().getFieldDesc(LuaModuleFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleLuaModule      (void)
{
    SFBoostPath::EditHandlePtr returnValue(
        new  SFBoostPath::EditHandle(
             &_sfLuaModule,
             this->getType().getFieldDesc(LuaModuleFieldId),
             this));


    editSField(LuaModuleFieldMask);

    return returnValue;
}

GetFieldHandlePtr ProjectBase::getHandleLuaModulesDirectory (void) const
{
    SFBoostPath::GetHandlePtr returnValue(
        new  SFBoostPath::GetHandle(
             &_sfLuaModulesDirectory,
             this->getType().getFieldDesc(LuaModulesDirectoryFieldId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ProjectBase::editHandleLuaModulesDirectory(void)
{
    SFBoostPath::EditHandlePtr returnValue(
        new  SFBoostPath::EditHandle(
             &_sfLuaModulesDirectory,
             this->getType().getFieldDesc(LuaModulesDirectoryFieldId),
             this));


    editSField(LuaModulesDirectoryFieldMask);

    return returnValue;
}


GetEventHandlePtr ProjectBase::getHandleProjectStartedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ProjectStartedEventType>(
             const_cast<ProjectStartedEventType *>(&_ProjectStartedEvent),
             _producerType.getEventDescription(ProjectStartedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleProjectStoppingSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ProjectStoppingEventType>(
             const_cast<ProjectStoppingEventType *>(&_ProjectStoppingEvent),
             _producerType.getEventDescription(ProjectStoppingEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleProjectStoppedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ProjectStoppedEventType>(
             const_cast<ProjectStoppedEventType *>(&_ProjectStoppedEvent),
             _producerType.getEventDescription(ProjectStoppedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleProjectResetSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<ProjectResetEventType>(
             const_cast<ProjectResetEventType *>(&_ProjectResetEvent),
             _producerType.getEventDescription(ProjectResetEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleSceneChangedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<SceneChangedEventType>(
             const_cast<SceneChangedEventType *>(&_SceneChangedEvent),
             _producerType.getEventDescription(SceneChangedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleWindowOpenedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowOpenedEventType>(
             const_cast<WindowOpenedEventType *>(&_WindowOpenedEvent),
             _producerType.getEventDescription(WindowOpenedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleWindowClosingSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowClosingEventType>(
             const_cast<WindowClosingEventType *>(&_WindowClosingEvent),
             _producerType.getEventDescription(WindowClosingEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleWindowClosedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowClosedEventType>(
             const_cast<WindowClosedEventType *>(&_WindowClosedEvent),
             _producerType.getEventDescription(WindowClosedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleWindowIconifiedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowIconifiedEventType>(
             const_cast<WindowIconifiedEventType *>(&_WindowIconifiedEvent),
             _producerType.getEventDescription(WindowIconifiedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleWindowDeiconifiedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowDeiconifiedEventType>(
             const_cast<WindowDeiconifiedEventType *>(&_WindowDeiconifiedEvent),
             _producerType.getEventDescription(WindowDeiconifiedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleWindowActivatedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowActivatedEventType>(
             const_cast<WindowActivatedEventType *>(&_WindowActivatedEvent),
             _producerType.getEventDescription(WindowActivatedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleWindowDeactivatedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowDeactivatedEventType>(
             const_cast<WindowDeactivatedEventType *>(&_WindowDeactivatedEvent),
             _producerType.getEventDescription(WindowDeactivatedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleWindowEnteredSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowEnteredEventType>(
             const_cast<WindowEnteredEventType *>(&_WindowEnteredEvent),
             _producerType.getEventDescription(WindowEnteredEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleWindowExitedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<WindowExitedEventType>(
             const_cast<WindowExitedEventType *>(&_WindowExitedEvent),
             _producerType.getEventDescription(WindowExitedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleMouseClickedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseClickedEventType>(
             const_cast<MouseClickedEventType *>(&_MouseClickedEvent),
             _producerType.getEventDescription(MouseClickedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleMouseEnteredSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseEnteredEventType>(
             const_cast<MouseEnteredEventType *>(&_MouseEnteredEvent),
             _producerType.getEventDescription(MouseEnteredEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleMouseExitedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseExitedEventType>(
             const_cast<MouseExitedEventType *>(&_MouseExitedEvent),
             _producerType.getEventDescription(MouseExitedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleMousePressedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MousePressedEventType>(
             const_cast<MousePressedEventType *>(&_MousePressedEvent),
             _producerType.getEventDescription(MousePressedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleMouseReleasedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseReleasedEventType>(
             const_cast<MouseReleasedEventType *>(&_MouseReleasedEvent),
             _producerType.getEventDescription(MouseReleasedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleMouseMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseMovedEventType>(
             const_cast<MouseMovedEventType *>(&_MouseMovedEvent),
             _producerType.getEventDescription(MouseMovedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleMouseDraggedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseDraggedEventType>(
             const_cast<MouseDraggedEventType *>(&_MouseDraggedEvent),
             _producerType.getEventDescription(MouseDraggedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleMouseWheelMovedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<MouseWheelMovedEventType>(
             const_cast<MouseWheelMovedEventType *>(&_MouseWheelMovedEvent),
             _producerType.getEventDescription(MouseWheelMovedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleKeyPressedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyPressedEventType>(
             const_cast<KeyPressedEventType *>(&_KeyPressedEvent),
             _producerType.getEventDescription(KeyPressedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleKeyReleasedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyReleasedEventType>(
             const_cast<KeyReleasedEventType *>(&_KeyReleasedEvent),
             _producerType.getEventDescription(KeyReleasedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleKeyTypedSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<KeyTypedEventType>(
             const_cast<KeyTypedEventType *>(&_KeyTypedEvent),
             _producerType.getEventDescription(KeyTypedEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}

GetEventHandlePtr ProjectBase::getHandleUpdateSignal(void) const
{
    GetEventHandlePtr returnValue(
        new  GetTypedEventHandle<UpdateEventType>(
             const_cast<UpdateEventType *>(&_UpdateEvent),
             _producerType.getEventDescription(UpdateEventId),
             const_cast<ProjectBase *>(this)));

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ProjectBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Project *pThis = static_cast<Project *>(this);

    pThis->execSync(static_cast<Project *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ProjectBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    Project *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const Project *>(pRefAspect),
                  dynamic_cast<const Project *>(this));

    return returnValue;
}
#endif

void ProjectBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Project *>(this)->clearScenes();

    static_cast<Project *>(this)->setInitialScene(NULL);

    static_cast<Project *>(this)->setInternalActiveScene(NULL);

    static_cast<Project *>(this)->clearBackgrounds();

    static_cast<Project *>(this)->setInternalActiveBackground(NULL);

    static_cast<Project *>(this)->clearForegrounds();

    static_cast<Project *>(this)->clearInternalActiveForegrounds();

    static_cast<Project *>(this)->clearGlobalActiveForegrounds();

    static_cast<Project *>(this)->clearModelNodes();

    static_cast<Project *>(this)->clearInternalActiveModelNodes();

    static_cast<Project *>(this)->clearGlobalActiveModelNodes();

    static_cast<Project *>(this)->clearCameras();

    static_cast<Project *>(this)->setInternalActiveCamera(NULL);

    static_cast<Project *>(this)->clearActiveAnimations();

    static_cast<Project *>(this)->clearActiveParticleSystems();


}


OSG_END_NAMESPACE
