/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Project
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _KEPROJECTBASE_H_
#define _KEPROJECTBASE_H_
#ifdef __sgi
#pragma once
#endif



#include <OpenSG/OSGConfig.h>
#include "KEKabalaEngineDef.h"
#include "KEConfig.h"

//#include "OpenSG/OSGBaseTypes.h"


#include <OpenSG/OSGAttachmentContainer.h> // Parent

#include <OpenSG/OSGBaseFields.h>       // Version type
#include <OpenSG/OSGBoostPathFields.h>  // FilePath type
#include "Project/Scene/KESceneFields.h" // Scenes type
#include <OpenSG/OSGBackgroundFields.h> // Backgrounds type
#include <OpenSG/OSGForegroundFields.h> // Foregrounds type
#include <OpenSG/OSGNodeFields.h>       // ModelNodes type
#include <OpenSG/OSGCameraFields.h>     // Cameras type
#include <OpenSG/OSGAnimationFields.h>  // ActiveAnimations type
#include <OpenSG/OSGParticleSystemFields.h> // ActiveParticleSystems type

#include "KEProjectFields.h"

//Event Producer Headers
#include <OpenSG/OSGActivity.h>
#include <OpenSG/OSGConsumableEventCombiner.h>

#include "Project/KEProjectEventDetailsFields.h"
#include <OpenSG/OSGWindowEventDetailsFields.h>
#include <OpenSG/OSGMouseEventDetailsFields.h>
#include <OpenSG/OSGMouseWheelEventDetailsFields.h>
#include <OpenSG/OSGKeyEventDetailsFields.h>
#include <OpenSG/OSGUpdateEventDetailsFields.h>

OSG_BEGIN_NAMESPACE

class Project;

//! \brief Project Base Class.

class KE_KABALAENGINE_DLLMAPPING ProjectBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(Project);
    
    
    typedef ProjectEventDetails ProjectStartedEventDetailsType;
    typedef ProjectEventDetails ProjectStoppingEventDetailsType;
    typedef ProjectEventDetails ProjectStoppedEventDetailsType;
    typedef ProjectEventDetails ProjectResetEventDetailsType;
    typedef ProjectEventDetails SceneChangedEventDetailsType;
    typedef WindowEventDetails WindowOpenedEventDetailsType;
    typedef WindowEventDetails WindowClosingEventDetailsType;
    typedef WindowEventDetails WindowClosedEventDetailsType;
    typedef WindowEventDetails WindowIconifiedEventDetailsType;
    typedef WindowEventDetails WindowDeiconifiedEventDetailsType;
    typedef WindowEventDetails WindowActivatedEventDetailsType;
    typedef WindowEventDetails WindowDeactivatedEventDetailsType;
    typedef WindowEventDetails WindowEnteredEventDetailsType;
    typedef WindowEventDetails WindowExitedEventDetailsType;
    typedef MouseEventDetails  MouseClickedEventDetailsType;
    typedef MouseEventDetails  MouseEnteredEventDetailsType;
    typedef MouseEventDetails  MouseExitedEventDetailsType;
    typedef MouseEventDetails  MousePressedEventDetailsType;
    typedef MouseEventDetails  MouseReleasedEventDetailsType;
    typedef MouseEventDetails  MouseMovedEventDetailsType;
    typedef MouseEventDetails  MouseDraggedEventDetailsType;
    typedef MouseWheelEventDetails MouseWheelMovedEventDetailsType;
    typedef KeyEventDetails    KeyPressedEventDetailsType;
    typedef KeyEventDetails    KeyReleasedEventDetailsType;
    typedef KeyEventDetails    KeyTypedEventDetailsType;
    typedef UpdateEventDetails UpdateEventDetailsType;

    typedef boost::signals2::signal<void (EventDetails* const            , UInt32)> BaseEventType;
    typedef boost::signals2::signal<void (ProjectEventDetails* const, UInt32), ConsumableEventCombiner> ProjectStartedEventType;
    typedef boost::signals2::signal<void (ProjectEventDetails* const, UInt32), ConsumableEventCombiner> ProjectStoppingEventType;
    typedef boost::signals2::signal<void (ProjectEventDetails* const, UInt32), ConsumableEventCombiner> ProjectStoppedEventType;
    typedef boost::signals2::signal<void (ProjectEventDetails* const, UInt32), ConsumableEventCombiner> ProjectResetEventType;
    typedef boost::signals2::signal<void (ProjectEventDetails* const, UInt32), ConsumableEventCombiner> SceneChangedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowOpenedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowClosingEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowClosedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowIconifiedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowDeiconifiedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowActivatedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowDeactivatedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowEnteredEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowExitedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseClickedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseEnteredEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseExitedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MousePressedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseReleasedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseMovedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseDraggedEventType;
    typedef boost::signals2::signal<void (MouseWheelEventDetails* const, UInt32), ConsumableEventCombiner> MouseWheelMovedEventType;
    typedef boost::signals2::signal<void (KeyEventDetails* const  , UInt32), ConsumableEventCombiner> KeyPressedEventType;
    typedef boost::signals2::signal<void (KeyEventDetails* const  , UInt32), ConsumableEventCombiner> KeyReleasedEventType;
    typedef boost::signals2::signal<void (KeyEventDetails* const  , UInt32), ConsumableEventCombiner> KeyTypedEventType;
    typedef boost::signals2::signal<void (UpdateEventDetails* const, UInt32), ConsumableEventCombiner> UpdateEventType;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        VersionFieldId = Inherited::NextFieldId,
        MainWindowTitleFieldId = VersionFieldId + 1,
        FilePathFieldId = MainWindowTitleFieldId + 1,
        ScenesFieldId = FilePathFieldId + 1,
        InitialSceneFieldId = ScenesFieldId + 1,
        InternalActiveSceneFieldId = InitialSceneFieldId + 1,
        BackgroundsFieldId = InternalActiveSceneFieldId + 1,
        InternalActiveBackgroundFieldId = BackgroundsFieldId + 1,
        ForegroundsFieldId = InternalActiveBackgroundFieldId + 1,
        InternalActiveForegroundsFieldId = ForegroundsFieldId + 1,
        GlobalActiveForegroundsFieldId = InternalActiveForegroundsFieldId + 1,
        ModelNodesFieldId = GlobalActiveForegroundsFieldId + 1,
        InternalActiveModelNodesFieldId = ModelNodesFieldId + 1,
        GlobalActiveModelNodesFieldId = InternalActiveModelNodesFieldId + 1,
        CamerasFieldId = GlobalActiveModelNodesFieldId + 1,
        InternalActiveCameraFieldId = CamerasFieldId + 1,
        ActiveAnimationsFieldId = InternalActiveCameraFieldId + 1,
        ActiveParticleSystemsFieldId = ActiveAnimationsFieldId + 1,
        LuaModuleFieldId = ActiveParticleSystemsFieldId + 1,
        LuaModulesDirectoryFieldId = LuaModuleFieldId + 1,
        NextFieldId = LuaModulesDirectoryFieldId + 1
    };

    static const OSG::BitVector VersionFieldMask =
        (TypeTraits<BitVector>::One << VersionFieldId);
    static const OSG::BitVector MainWindowTitleFieldMask =
        (TypeTraits<BitVector>::One << MainWindowTitleFieldId);
    static const OSG::BitVector FilePathFieldMask =
        (TypeTraits<BitVector>::One << FilePathFieldId);
    static const OSG::BitVector ScenesFieldMask =
        (TypeTraits<BitVector>::One << ScenesFieldId);
    static const OSG::BitVector InitialSceneFieldMask =
        (TypeTraits<BitVector>::One << InitialSceneFieldId);
    static const OSG::BitVector InternalActiveSceneFieldMask =
        (TypeTraits<BitVector>::One << InternalActiveSceneFieldId);
    static const OSG::BitVector BackgroundsFieldMask =
        (TypeTraits<BitVector>::One << BackgroundsFieldId);
    static const OSG::BitVector InternalActiveBackgroundFieldMask =
        (TypeTraits<BitVector>::One << InternalActiveBackgroundFieldId);
    static const OSG::BitVector ForegroundsFieldMask =
        (TypeTraits<BitVector>::One << ForegroundsFieldId);
    static const OSG::BitVector InternalActiveForegroundsFieldMask =
        (TypeTraits<BitVector>::One << InternalActiveForegroundsFieldId);
    static const OSG::BitVector GlobalActiveForegroundsFieldMask =
        (TypeTraits<BitVector>::One << GlobalActiveForegroundsFieldId);
    static const OSG::BitVector ModelNodesFieldMask =
        (TypeTraits<BitVector>::One << ModelNodesFieldId);
    static const OSG::BitVector InternalActiveModelNodesFieldMask =
        (TypeTraits<BitVector>::One << InternalActiveModelNodesFieldId);
    static const OSG::BitVector GlobalActiveModelNodesFieldMask =
        (TypeTraits<BitVector>::One << GlobalActiveModelNodesFieldId);
    static const OSG::BitVector CamerasFieldMask =
        (TypeTraits<BitVector>::One << CamerasFieldId);
    static const OSG::BitVector InternalActiveCameraFieldMask =
        (TypeTraits<BitVector>::One << InternalActiveCameraFieldId);
    static const OSG::BitVector ActiveAnimationsFieldMask =
        (TypeTraits<BitVector>::One << ActiveAnimationsFieldId);
    static const OSG::BitVector ActiveParticleSystemsFieldMask =
        (TypeTraits<BitVector>::One << ActiveParticleSystemsFieldId);
    static const OSG::BitVector LuaModuleFieldMask =
        (TypeTraits<BitVector>::One << LuaModuleFieldId);
    static const OSG::BitVector LuaModulesDirectoryFieldMask =
        (TypeTraits<BitVector>::One << LuaModulesDirectoryFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFString          SFVersionType;
    typedef SFString          SFMainWindowTitleType;
    typedef SFBoostPath       SFFilePathType;
    typedef MFUnrecChildScenePtr MFScenesType;
    typedef SFUnrecScenePtr   SFInitialSceneType;
    typedef SFUnrecScenePtr   SFInternalActiveSceneType;
    typedef MFUnrecBackgroundPtr MFBackgroundsType;
    typedef SFUnrecBackgroundPtr SFInternalActiveBackgroundType;
    typedef MFUnrecForegroundPtr MFForegroundsType;
    typedef MFUnrecForegroundPtr MFInternalActiveForegroundsType;
    typedef MFUnrecForegroundPtr MFGlobalActiveForegroundsType;
    typedef MFUnrecNodePtr    MFModelNodesType;
    typedef MFUnrecNodePtr    MFInternalActiveModelNodesType;
    typedef MFUnrecNodePtr    MFGlobalActiveModelNodesType;
    typedef MFUnrecCameraPtr  MFCamerasType;
    typedef SFUnrecCameraPtr  SFInternalActiveCameraType;
    typedef MFUnrecAnimationPtr MFActiveAnimationsType;
    typedef MFUnrecParticleSystemPtr MFActiveParticleSystemsType;
    typedef SFBoostPath       SFLuaModuleType;
    typedef SFBoostPath       SFLuaModulesDirectoryType;

    enum
    {
        ProjectStartedEventId = 1,
        ProjectStoppingEventId = ProjectStartedEventId + 1,
        ProjectStoppedEventId = ProjectStoppingEventId + 1,
        ProjectResetEventId = ProjectStoppedEventId + 1,
        SceneChangedEventId = ProjectResetEventId + 1,
        WindowOpenedEventId = SceneChangedEventId + 1,
        WindowClosingEventId = WindowOpenedEventId + 1,
        WindowClosedEventId = WindowClosingEventId + 1,
        WindowIconifiedEventId = WindowClosedEventId + 1,
        WindowDeiconifiedEventId = WindowIconifiedEventId + 1,
        WindowActivatedEventId = WindowDeiconifiedEventId + 1,
        WindowDeactivatedEventId = WindowActivatedEventId + 1,
        WindowEnteredEventId = WindowDeactivatedEventId + 1,
        WindowExitedEventId = WindowEnteredEventId + 1,
        MouseClickedEventId = WindowExitedEventId + 1,
        MouseEnteredEventId = MouseClickedEventId + 1,
        MouseExitedEventId = MouseEnteredEventId + 1,
        MousePressedEventId = MouseExitedEventId + 1,
        MouseReleasedEventId = MousePressedEventId + 1,
        MouseMovedEventId = MouseReleasedEventId + 1,
        MouseDraggedEventId = MouseMovedEventId + 1,
        MouseWheelMovedEventId = MouseDraggedEventId + 1,
        KeyPressedEventId = MouseWheelMovedEventId + 1,
        KeyReleasedEventId = KeyPressedEventId + 1,
        KeyTypedEventId = KeyReleasedEventId + 1,
        UpdateEventId = KeyTypedEventId + 1,
        NextProducedEventId = UpdateEventId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFString            *editSFVersion        (void);
            const SFString            *getSFVersion         (void) const;

                  SFString            *editSFMainWindowTitle(void);
            const SFString            *getSFMainWindowTitle (void) const;

                  SFBoostPath         *editSFFilePath       (void);
            const SFBoostPath         *getSFFilePath        (void) const;
            const MFUnrecChildScenePtr *getMFScenes         (void) const;
            const SFUnrecScenePtr     *getSFInitialScene   (void) const;
                  SFUnrecScenePtr     *editSFInitialScene   (void);
            const MFUnrecBackgroundPtr *getMFBackgrounds    (void) const;
                  MFUnrecBackgroundPtr *editMFBackgrounds    (void);
            const MFUnrecForegroundPtr *getMFForegrounds    (void) const;
                  MFUnrecForegroundPtr *editMFForegrounds    (void);
            const MFUnrecForegroundPtr *getMFGlobalActiveForegrounds(void) const;
                  MFUnrecForegroundPtr *editMFGlobalActiveForegrounds(void);
            const MFUnrecNodePtr      *getMFModelNodes     (void) const;
                  MFUnrecNodePtr      *editMFModelNodes     (void);
            const MFUnrecNodePtr      *getMFGlobalActiveModelNodes(void) const;
                  MFUnrecNodePtr      *editMFGlobalActiveModelNodes(void);
            const MFUnrecCameraPtr    *getMFCameras        (void) const;
                  MFUnrecCameraPtr    *editMFCameras        (void);

                  SFBoostPath         *editSFLuaModule      (void);
            const SFBoostPath         *getSFLuaModule       (void) const;

                  SFBoostPath         *editSFLuaModulesDirectory(void);
            const SFBoostPath         *getSFLuaModulesDirectory (void) const;


                  std::string         &editVersion        (void);
            const std::string         &getVersion         (void) const;

                  std::string         &editMainWindowTitle(void);
            const std::string         &getMainWindowTitle (void) const;

                  BoostPath           &editFilePath       (void);
            const BoostPath           &getFilePath        (void) const;

                  Scene * getScenes         (const UInt32 index) const;

                  Scene * getInitialScene   (void) const;

                  Background * getBackgrounds    (const UInt32 index) const;

                  Foreground * getForegrounds    (const UInt32 index) const;

                  Foreground * getGlobalActiveForegrounds(const UInt32 index) const;

                  Node * getModelNodes     (const UInt32 index) const;

                  Node * getGlobalActiveModelNodes(const UInt32 index) const;

                  Camera * getCameras        (const UInt32 index) const;

                  BoostPath           &editLuaModule      (void);
            const BoostPath           &getLuaModule       (void) const;

                  BoostPath           &editLuaModulesDirectory(void);
            const BoostPath           &getLuaModulesDirectory (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setVersion        (const std::string &value);
            void setMainWindowTitle(const std::string &value);
            void setFilePath       (const BoostPath &value);
            void setInitialScene   (Scene * const value);
            void setLuaModule      (const BoostPath &value);
            void setLuaModulesDirectory(const BoostPath &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToScenes              (Scene * const value   );
    void assignScenes             (const MFUnrecChildScenePtr &value);
    void clearScenes                (void                         );
    void insertIntoScenes      (UInt32               uiIndex,
                                             Scene * const value   );
    void replaceInScenes  (      UInt32         uiIndex,
                                             Scene * const value   );
    void replaceObjInScenes (Scene * const pOldElem,
                                             Scene * const pNewElem);
    void removeFromScenes (UInt32               uiIndex );
    void removeObjFromScenes(Scene * const value   );

    void pushToBackgrounds           (Background * const value   );
    void assignBackgrounds          (const MFUnrecBackgroundPtr &value);
    void removeFromBackgrounds (UInt32               uiIndex );
    void removeObjFromBackgrounds(Background * const value   );
    void clearBackgrounds            (void                         );

    void pushToForegrounds           (Foreground * const value   );
    void assignForegrounds          (const MFUnrecForegroundPtr &value);
    void removeFromForegrounds (UInt32               uiIndex );
    void removeObjFromForegrounds(Foreground * const value   );
    void clearForegrounds            (void                         );

    void pushToGlobalActiveForegrounds           (Foreground * const value   );
    void assignGlobalActiveForegrounds          (const MFUnrecForegroundPtr &value);
    void removeFromGlobalActiveForegrounds (UInt32               uiIndex );
    void removeObjFromGlobalActiveForegrounds(Foreground * const value   );
    void clearGlobalActiveForegrounds            (void                         );

    void pushToModelNodes           (Node * const value   );
    void assignModelNodes          (const MFUnrecNodePtr    &value);
    void removeFromModelNodes (UInt32               uiIndex );
    void removeObjFromModelNodes(Node * const value   );
    void clearModelNodes            (void                         );

    void pushToGlobalActiveModelNodes           (Node * const value   );
    void assignGlobalActiveModelNodes          (const MFUnrecNodePtr    &value);
    void removeFromGlobalActiveModelNodes (UInt32               uiIndex );
    void removeObjFromGlobalActiveModelNodes(Node * const value   );
    void clearGlobalActiveModelNodes            (void                         );

    void pushToCameras             (Camera * const value   );
    void assignCameras            (const MFUnrecCameraPtr  &value);
    void removeFromCameras (UInt32               uiIndex );
    void removeObjFromCameras(Camera * const value   );
    void clearCameras               (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Event Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    virtual boost::signals2::connection attachActivity(UInt32 eventId,
                                                       Activity* TheActivity);
                                                         
    virtual UInt32                   getNumProducedEvents       (void                                ) const;
    virtual const EventDescription *getProducedEventDescription(const std::string &ProducedEventName) const;
    virtual const EventDescription *getProducedEventDescription(UInt32 ProducedEventId              ) const;
    virtual UInt32                   getProducedEventId         (const std::string &ProducedEventName) const;
    
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::group_type &group,
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectEvent        (UInt32 eventId, const BaseEventType::group_type &group);
    virtual void   disconnectAllSlotsEvent(UInt32 eventId);
    virtual bool   isEmptyEvent           (UInt32 eventId) const;
    virtual UInt32 numSlotsEvent          (UInt32 eventId) const;

    /*! \}                                                                 */
    /*! \name                Event Access                                 */
    /*! \{                                                                 */
    
    //ProjectStarted
    boost::signals2::connection connectProjectStarted (const ProjectStartedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectProjectStarted (const ProjectStartedEventType::group_type &group,
                                                       const ProjectStartedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectProjectStarted         (const ProjectStartedEventType::group_type &group);
    void   disconnectAllSlotsProjectStarted (void);
    bool   isEmptyProjectStarted            (void) const;
    UInt32 numSlotsProjectStarted           (void) const;
    
    //ProjectStopping
    boost::signals2::connection connectProjectStopping(const ProjectStoppingEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectProjectStopping(const ProjectStoppingEventType::group_type &group,
                                                       const ProjectStoppingEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectProjectStopping        (const ProjectStoppingEventType::group_type &group);
    void   disconnectAllSlotsProjectStopping(void);
    bool   isEmptyProjectStopping           (void) const;
    UInt32 numSlotsProjectStopping          (void) const;
    
    //ProjectStopped
    boost::signals2::connection connectProjectStopped (const ProjectStoppedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectProjectStopped (const ProjectStoppedEventType::group_type &group,
                                                       const ProjectStoppedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectProjectStopped         (const ProjectStoppedEventType::group_type &group);
    void   disconnectAllSlotsProjectStopped (void);
    bool   isEmptyProjectStopped            (void) const;
    UInt32 numSlotsProjectStopped           (void) const;
    
    //ProjectReset
    boost::signals2::connection connectProjectReset   (const ProjectResetEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectProjectReset   (const ProjectResetEventType::group_type &group,
                                                       const ProjectResetEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectProjectReset           (const ProjectResetEventType::group_type &group);
    void   disconnectAllSlotsProjectReset   (void);
    bool   isEmptyProjectReset              (void) const;
    UInt32 numSlotsProjectReset             (void) const;
    
    //SceneChanged
    boost::signals2::connection connectSceneChanged   (const SceneChangedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectSceneChanged   (const SceneChangedEventType::group_type &group,
                                                       const SceneChangedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectSceneChanged           (const SceneChangedEventType::group_type &group);
    void   disconnectAllSlotsSceneChanged   (void);
    bool   isEmptySceneChanged              (void) const;
    UInt32 numSlotsSceneChanged             (void) const;
    
    //WindowOpened
    boost::signals2::connection connectWindowOpened   (const WindowOpenedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowOpened   (const WindowOpenedEventType::group_type &group,
                                                       const WindowOpenedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowOpened           (const WindowOpenedEventType::group_type &group);
    void   disconnectAllSlotsWindowOpened   (void);
    bool   isEmptyWindowOpened              (void) const;
    UInt32 numSlotsWindowOpened             (void) const;
    
    //WindowClosing
    boost::signals2::connection connectWindowClosing  (const WindowClosingEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowClosing  (const WindowClosingEventType::group_type &group,
                                                       const WindowClosingEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowClosing          (const WindowClosingEventType::group_type &group);
    void   disconnectAllSlotsWindowClosing  (void);
    bool   isEmptyWindowClosing             (void) const;
    UInt32 numSlotsWindowClosing            (void) const;
    
    //WindowClosed
    boost::signals2::connection connectWindowClosed   (const WindowClosedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowClosed   (const WindowClosedEventType::group_type &group,
                                                       const WindowClosedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowClosed           (const WindowClosedEventType::group_type &group);
    void   disconnectAllSlotsWindowClosed   (void);
    bool   isEmptyWindowClosed              (void) const;
    UInt32 numSlotsWindowClosed             (void) const;
    
    //WindowIconified
    boost::signals2::connection connectWindowIconified(const WindowIconifiedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowIconified(const WindowIconifiedEventType::group_type &group,
                                                       const WindowIconifiedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowIconified        (const WindowIconifiedEventType::group_type &group);
    void   disconnectAllSlotsWindowIconified(void);
    bool   isEmptyWindowIconified           (void) const;
    UInt32 numSlotsWindowIconified          (void) const;
    
    //WindowDeiconified
    boost::signals2::connection connectWindowDeiconified(const WindowDeiconifiedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowDeiconified(const WindowDeiconifiedEventType::group_type &group,
                                                       const WindowDeiconifiedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowDeiconified      (const WindowDeiconifiedEventType::group_type &group);
    void   disconnectAllSlotsWindowDeiconified(void);
    bool   isEmptyWindowDeiconified         (void) const;
    UInt32 numSlotsWindowDeiconified        (void) const;
    
    //WindowActivated
    boost::signals2::connection connectWindowActivated(const WindowActivatedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowActivated(const WindowActivatedEventType::group_type &group,
                                                       const WindowActivatedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowActivated        (const WindowActivatedEventType::group_type &group);
    void   disconnectAllSlotsWindowActivated(void);
    bool   isEmptyWindowActivated           (void) const;
    UInt32 numSlotsWindowActivated          (void) const;
    
    //WindowDeactivated
    boost::signals2::connection connectWindowDeactivated(const WindowDeactivatedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowDeactivated(const WindowDeactivatedEventType::group_type &group,
                                                       const WindowDeactivatedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowDeactivated      (const WindowDeactivatedEventType::group_type &group);
    void   disconnectAllSlotsWindowDeactivated(void);
    bool   isEmptyWindowDeactivated         (void) const;
    UInt32 numSlotsWindowDeactivated        (void) const;
    
    //WindowEntered
    boost::signals2::connection connectWindowEntered  (const WindowEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowEntered  (const WindowEnteredEventType::group_type &group,
                                                       const WindowEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowEntered          (const WindowEnteredEventType::group_type &group);
    void   disconnectAllSlotsWindowEntered  (void);
    bool   isEmptyWindowEntered             (void) const;
    UInt32 numSlotsWindowEntered            (void) const;
    
    //WindowExited
    boost::signals2::connection connectWindowExited   (const WindowExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowExited   (const WindowExitedEventType::group_type &group,
                                                       const WindowExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowExited           (const WindowExitedEventType::group_type &group);
    void   disconnectAllSlotsWindowExited   (void);
    bool   isEmptyWindowExited              (void) const;
    UInt32 numSlotsWindowExited             (void) const;
    
    //MouseClicked
    boost::signals2::connection connectMouseClicked   (const MouseClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseClicked   (const MouseClickedEventType::group_type &group,
                                                       const MouseClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseClicked           (const MouseClickedEventType::group_type &group);
    void   disconnectAllSlotsMouseClicked   (void);
    bool   isEmptyMouseClicked              (void) const;
    UInt32 numSlotsMouseClicked             (void) const;
    
    //MouseEntered
    boost::signals2::connection connectMouseEntered   (const MouseEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseEntered   (const MouseEnteredEventType::group_type &group,
                                                       const MouseEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseEntered           (const MouseEnteredEventType::group_type &group);
    void   disconnectAllSlotsMouseEntered   (void);
    bool   isEmptyMouseEntered              (void) const;
    UInt32 numSlotsMouseEntered             (void) const;
    
    //MouseExited
    boost::signals2::connection connectMouseExited    (const MouseExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseExited    (const MouseExitedEventType::group_type &group,
                                                       const MouseExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseExited            (const MouseExitedEventType::group_type &group);
    void   disconnectAllSlotsMouseExited    (void);
    bool   isEmptyMouseExited               (void) const;
    UInt32 numSlotsMouseExited              (void) const;
    
    //MousePressed
    boost::signals2::connection connectMousePressed   (const MousePressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMousePressed   (const MousePressedEventType::group_type &group,
                                                       const MousePressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMousePressed           (const MousePressedEventType::group_type &group);
    void   disconnectAllSlotsMousePressed   (void);
    bool   isEmptyMousePressed              (void) const;
    UInt32 numSlotsMousePressed             (void) const;
    
    //MouseReleased
    boost::signals2::connection connectMouseReleased  (const MouseReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseReleased  (const MouseReleasedEventType::group_type &group,
                                                       const MouseReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseReleased          (const MouseReleasedEventType::group_type &group);
    void   disconnectAllSlotsMouseReleased  (void);
    bool   isEmptyMouseReleased             (void) const;
    UInt32 numSlotsMouseReleased            (void) const;
    
    //MouseMoved
    boost::signals2::connection connectMouseMoved     (const MouseMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseMoved     (const MouseMovedEventType::group_type &group,
                                                       const MouseMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseMoved             (const MouseMovedEventType::group_type &group);
    void   disconnectAllSlotsMouseMoved     (void);
    bool   isEmptyMouseMoved                (void) const;
    UInt32 numSlotsMouseMoved               (void) const;
    
    //MouseDragged
    boost::signals2::connection connectMouseDragged   (const MouseDraggedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseDragged   (const MouseDraggedEventType::group_type &group,
                                                       const MouseDraggedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseDragged           (const MouseDraggedEventType::group_type &group);
    void   disconnectAllSlotsMouseDragged   (void);
    bool   isEmptyMouseDragged              (void) const;
    UInt32 numSlotsMouseDragged             (void) const;
    
    //MouseWheelMoved
    boost::signals2::connection connectMouseWheelMoved(const MouseWheelMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseWheelMoved(const MouseWheelMovedEventType::group_type &group,
                                                       const MouseWheelMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseWheelMoved        (const MouseWheelMovedEventType::group_type &group);
    void   disconnectAllSlotsMouseWheelMoved(void);
    bool   isEmptyMouseWheelMoved           (void) const;
    UInt32 numSlotsMouseWheelMoved          (void) const;
    
    //KeyPressed
    boost::signals2::connection connectKeyPressed     (const KeyPressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyPressed     (const KeyPressedEventType::group_type &group,
                                                       const KeyPressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyPressed             (const KeyPressedEventType::group_type &group);
    void   disconnectAllSlotsKeyPressed     (void);
    bool   isEmptyKeyPressed                (void) const;
    UInt32 numSlotsKeyPressed               (void) const;
    
    //KeyReleased
    boost::signals2::connection connectKeyReleased    (const KeyReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyReleased    (const KeyReleasedEventType::group_type &group,
                                                       const KeyReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyReleased            (const KeyReleasedEventType::group_type &group);
    void   disconnectAllSlotsKeyReleased    (void);
    bool   isEmptyKeyReleased               (void) const;
    UInt32 numSlotsKeyReleased              (void) const;
    
    //KeyTyped
    boost::signals2::connection connectKeyTyped       (const KeyTypedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyTyped       (const KeyTypedEventType::group_type &group,
                                                       const KeyTypedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyTyped               (const KeyTypedEventType::group_type &group);
    void   disconnectAllSlotsKeyTyped       (void);
    bool   isEmptyKeyTyped                  (void) const;
    UInt32 numSlotsKeyTyped                 (void) const;
    
    //Update
    boost::signals2::connection connectUpdate         (const UpdateEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectUpdate         (const UpdateEventType::group_type &group,
                                                       const UpdateEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectUpdate                 (const UpdateEventType::group_type &group);
    void   disconnectAllSlotsUpdate         (void);
    bool   isEmptyUpdate                    (void) const;
    UInt32 numSlotsUpdate                   (void) const;
    
    
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ProjectTransitPtr  create          (void);
    static  Project           *createEmpty     (void);

    static  ProjectTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  Project            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ProjectTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Event Signals                   */
    /*! \{                                                                 */

    //Event Event producers
    ProjectStartedEventType _ProjectStartedEvent;
    ProjectStoppingEventType _ProjectStoppingEvent;
    ProjectStoppedEventType _ProjectStoppedEvent;
    ProjectResetEventType _ProjectResetEvent;
    SceneChangedEventType _SceneChangedEvent;
    WindowOpenedEventType _WindowOpenedEvent;
    WindowClosingEventType _WindowClosingEvent;
    WindowClosedEventType _WindowClosedEvent;
    WindowIconifiedEventType _WindowIconifiedEvent;
    WindowDeiconifiedEventType _WindowDeiconifiedEvent;
    WindowActivatedEventType _WindowActivatedEvent;
    WindowDeactivatedEventType _WindowDeactivatedEvent;
    WindowEnteredEventType _WindowEnteredEvent;
    WindowExitedEventType _WindowExitedEvent;
    MouseClickedEventType _MouseClickedEvent;
    MouseEnteredEventType _MouseEnteredEvent;
    MouseExitedEventType _MouseExitedEvent;
    MousePressedEventType _MousePressedEvent;
    MouseReleasedEventType _MouseReleasedEvent;
    MouseMovedEventType _MouseMovedEvent;
    MouseDraggedEventType _MouseDraggedEvent;
    MouseWheelMovedEventType _MouseWheelMovedEvent;
    KeyPressedEventType _KeyPressedEvent;
    KeyReleasedEventType _KeyReleasedEvent;
    KeyTypedEventType _KeyTypedEvent;
    UpdateEventType _UpdateEvent;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFString          _sfVersion;
    SFString          _sfMainWindowTitle;
    SFBoostPath       _sfFilePath;
    MFUnrecChildScenePtr _mfScenes;
    SFUnrecScenePtr   _sfInitialScene;
    SFUnrecScenePtr   _sfInternalActiveScene;
    MFUnrecBackgroundPtr _mfBackgrounds;
    SFUnrecBackgroundPtr _sfInternalActiveBackground;
    MFUnrecForegroundPtr _mfForegrounds;
    MFUnrecForegroundPtr _mfInternalActiveForegrounds;
    MFUnrecForegroundPtr _mfGlobalActiveForegrounds;
    MFUnrecNodePtr    _mfModelNodes;
    MFUnrecNodePtr    _mfInternalActiveModelNodes;
    MFUnrecNodePtr    _mfGlobalActiveModelNodes;
    MFUnrecCameraPtr  _mfCameras;
    SFUnrecCameraPtr  _sfInternalActiveCamera;
    MFUnrecAnimationPtr _mfActiveAnimations;
    MFUnrecParticleSystemPtr _mfActiveParticleSystems;
    SFBoostPath       _sfLuaModule;
    SFBoostPath       _sfLuaModulesDirectory;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ProjectBase(void);
    ProjectBase(const ProjectBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ProjectBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const Project *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Child linking                                                */
    /*! \{                                                                 */

    virtual bool unlinkChild(FieldContainer * const pChild,
                             UInt16           const childFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleVersion         (void) const;
    EditFieldHandlePtr editHandleVersion        (void);
    GetFieldHandlePtr  getHandleMainWindowTitle (void) const;
    EditFieldHandlePtr editHandleMainWindowTitle(void);
    GetFieldHandlePtr  getHandleFilePath        (void) const;
    EditFieldHandlePtr editHandleFilePath       (void);
    GetFieldHandlePtr  getHandleScenes          (void) const;
    EditFieldHandlePtr editHandleScenes         (void);
    GetFieldHandlePtr  getHandleInitialScene    (void) const;
    EditFieldHandlePtr editHandleInitialScene   (void);
    GetFieldHandlePtr  getHandleInternalActiveScene (void) const;
    EditFieldHandlePtr editHandleInternalActiveScene(void);
    GetFieldHandlePtr  getHandleBackgrounds     (void) const;
    EditFieldHandlePtr editHandleBackgrounds    (void);
    GetFieldHandlePtr  getHandleInternalActiveBackground (void) const;
    EditFieldHandlePtr editHandleInternalActiveBackground(void);
    GetFieldHandlePtr  getHandleForegrounds     (void) const;
    EditFieldHandlePtr editHandleForegrounds    (void);
    GetFieldHandlePtr  getHandleInternalActiveForegrounds (void) const;
    EditFieldHandlePtr editHandleInternalActiveForegrounds(void);
    GetFieldHandlePtr  getHandleGlobalActiveForegrounds (void) const;
    EditFieldHandlePtr editHandleGlobalActiveForegrounds(void);
    GetFieldHandlePtr  getHandleModelNodes      (void) const;
    EditFieldHandlePtr editHandleModelNodes     (void);
    GetFieldHandlePtr  getHandleInternalActiveModelNodes (void) const;
    EditFieldHandlePtr editHandleInternalActiveModelNodes(void);
    GetFieldHandlePtr  getHandleGlobalActiveModelNodes (void) const;
    EditFieldHandlePtr editHandleGlobalActiveModelNodes(void);
    GetFieldHandlePtr  getHandleCameras         (void) const;
    EditFieldHandlePtr editHandleCameras        (void);
    GetFieldHandlePtr  getHandleInternalActiveCamera (void) const;
    EditFieldHandlePtr editHandleInternalActiveCamera(void);
    GetFieldHandlePtr  getHandleActiveAnimations (void) const;
    EditFieldHandlePtr editHandleActiveAnimations(void);
    GetFieldHandlePtr  getHandleActiveParticleSystems (void) const;
    EditFieldHandlePtr editHandleActiveParticleSystems(void);
    GetFieldHandlePtr  getHandleLuaModule       (void) const;
    EditFieldHandlePtr editHandleLuaModule      (void);
    GetFieldHandlePtr  getHandleLuaModulesDirectory (void) const;
    EditFieldHandlePtr editHandleLuaModulesDirectory(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Event Access                     */
    /*! \{                                                                 */

    GetEventHandlePtr getHandleProjectStartedSignal(void) const;
    GetEventHandlePtr getHandleProjectStoppingSignal(void) const;
    GetEventHandlePtr getHandleProjectStoppedSignal(void) const;
    GetEventHandlePtr getHandleProjectResetSignal(void) const;
    GetEventHandlePtr getHandleSceneChangedSignal(void) const;
    GetEventHandlePtr getHandleWindowOpenedSignal(void) const;
    GetEventHandlePtr getHandleWindowClosingSignal(void) const;
    GetEventHandlePtr getHandleWindowClosedSignal(void) const;
    GetEventHandlePtr getHandleWindowIconifiedSignal(void) const;
    GetEventHandlePtr getHandleWindowDeiconifiedSignal(void) const;
    GetEventHandlePtr getHandleWindowActivatedSignal(void) const;
    GetEventHandlePtr getHandleWindowDeactivatedSignal(void) const;
    GetEventHandlePtr getHandleWindowEnteredSignal(void) const;
    GetEventHandlePtr getHandleWindowExitedSignal(void) const;
    GetEventHandlePtr getHandleMouseClickedSignal(void) const;
    GetEventHandlePtr getHandleMouseEnteredSignal(void) const;
    GetEventHandlePtr getHandleMouseExitedSignal(void) const;
    GetEventHandlePtr getHandleMousePressedSignal(void) const;
    GetEventHandlePtr getHandleMouseReleasedSignal(void) const;
    GetEventHandlePtr getHandleMouseMovedSignal(void) const;
    GetEventHandlePtr getHandleMouseDraggedSignal(void) const;
    GetEventHandlePtr getHandleMouseWheelMovedSignal(void) const;
    GetEventHandlePtr getHandleKeyPressedSignal(void) const;
    GetEventHandlePtr getHandleKeyReleasedSignal(void) const;
    GetEventHandlePtr getHandleKeyTypedSignal(void) const;
    GetEventHandlePtr getHandleUpdateSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecScenePtr     *getSFInternalActiveScene (void) const;
                  SFUnrecScenePtr     *editSFInternalActiveScene(void);
            const SFUnrecBackgroundPtr *getSFInternalActiveBackground (void) const;
                  SFUnrecBackgroundPtr *editSFInternalActiveBackground(void);
            const MFUnrecForegroundPtr *getMFInternalActiveForegrounds (void) const;
                  MFUnrecForegroundPtr *editMFInternalActiveForegrounds(void);
            const MFUnrecNodePtr      *getMFInternalActiveModelNodes (void) const;
                  MFUnrecNodePtr      *editMFInternalActiveModelNodes(void);
            const SFUnrecCameraPtr    *getSFInternalActiveCamera (void) const;
                  SFUnrecCameraPtr    *editSFInternalActiveCamera(void);
            const MFUnrecAnimationPtr *getMFActiveAnimations (void) const;
                  MFUnrecAnimationPtr *editMFActiveAnimations(void);
            const MFUnrecParticleSystemPtr *getMFActiveParticleSystems (void) const;
                  MFUnrecParticleSystemPtr *editMFActiveParticleSystems(void);


                  Scene * getInternalActiveScene(void) const;

                  Background * getInternalActiveBackground(void) const;

                  Foreground * getInternalActiveForegrounds(const UInt32 index) const;

                  Node * getInternalActiveModelNodes(const UInt32 index) const;

                  Camera * getInternalActiveCamera(void) const;

                  Animation * getActiveAnimations(const UInt32 index) const;

                  ParticleSystem * getActiveParticleSystems(const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setInternalActiveScene(Scene * const value);
            void setInternalActiveBackground(Background * const value);
            void setInternalActiveCamera(Camera * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToInternalActiveForegrounds           (Foreground * const value   );
    void assignInternalActiveForegrounds           (const MFUnrecForegroundPtr &value);
    void removeFromInternalActiveForegrounds (UInt32                uiIndex );
    void removeObjFromInternalActiveForegrounds(Foreground * const value   );
    void clearInternalActiveForegrounds            (void                          );

    void pushToInternalActiveModelNodes           (Node * const value   );
    void assignInternalActiveModelNodes           (const MFUnrecNodePtr    &value);
    void removeFromInternalActiveModelNodes (UInt32                uiIndex );
    void removeObjFromInternalActiveModelNodes(Node * const value   );
    void clearInternalActiveModelNodes            (void                          );

    void pushToActiveAnimations           (Animation * const value   );
    void assignActiveAnimations           (const MFUnrecAnimationPtr &value);
    void removeFromActiveAnimations (UInt32                uiIndex );
    void removeObjFromActiveAnimations(Animation * const value   );
    void clearActiveAnimations            (void                          );

    void pushToActiveParticleSystems           (ParticleSystem * const value   );
    void assignActiveParticleSystems           (const MFUnrecParticleSystemPtr &value);
    void removeFromActiveParticleSystems (UInt32                uiIndex );
    void removeObjFromActiveParticleSystems(ParticleSystem * const value   );
    void clearActiveParticleSystems            (void                          );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Event Producer Firing                    */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 eventId, EventDetails* const e);
    
    void produceProjectStarted      (ProjectStartedEventDetailsType* const e);
    void produceProjectStopping     (ProjectStoppingEventDetailsType* const e);
    void produceProjectStopped      (ProjectStoppedEventDetailsType* const e);
    void produceProjectReset        (ProjectResetEventDetailsType* const e);
    void produceSceneChanged        (SceneChangedEventDetailsType* const e);
    void produceWindowOpened        (WindowOpenedEventDetailsType* const e);
    void produceWindowClosing       (WindowClosingEventDetailsType* const e);
    void produceWindowClosed        (WindowClosedEventDetailsType* const e);
    void produceWindowIconified     (WindowIconifiedEventDetailsType* const e);
    void produceWindowDeiconified   (WindowDeiconifiedEventDetailsType* const e);
    void produceWindowActivated     (WindowActivatedEventDetailsType* const e);
    void produceWindowDeactivated   (WindowDeactivatedEventDetailsType* const e);
    void produceWindowEntered       (WindowEnteredEventDetailsType* const e);
    void produceWindowExited        (WindowExitedEventDetailsType* const e);
    void produceMouseClicked        (MouseClickedEventDetailsType* const e);
    void produceMouseEntered        (MouseEnteredEventDetailsType* const e);
    void produceMouseExited         (MouseExitedEventDetailsType* const e);
    void produceMousePressed        (MousePressedEventDetailsType* const e);
    void produceMouseReleased       (MouseReleasedEventDetailsType* const e);
    void produceMouseMoved          (MouseMovedEventDetailsType* const e);
    void produceMouseDragged        (MouseDraggedEventDetailsType* const e);
    void produceMouseWheelMoved     (MouseWheelMovedEventDetailsType* const e);
    void produceKeyPressed          (KeyPressedEventDetailsType* const e);
    void produceKeyReleased         (KeyReleasedEventDetailsType* const e);
    void produceKeyTyped            (KeyTypedEventDetailsType* const e);
    void produceUpdate              (UpdateEventDetailsType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ProjectBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static EventDescription   *_eventDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ProjectBase &source);
};

typedef ProjectBase *ProjectBaseP;

OSG_END_NAMESPACE

#endif /* _OSGPROJECTBASE_H_ */
