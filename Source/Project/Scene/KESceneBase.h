/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Scene
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _KESCENEBASE_H_
#define _KESCENEBASE_H_
#ifdef __sgi
#pragma once
#endif



#include <OpenSG/OSGConfig.h>
#include "KEKabalaEngineDef.h"
#include "KEConfig.h"

//#include "OpenSG/OSGBaseTypes.h"


#include <OpenSG/OSGAttachmentContainer.h> // Parent

#include "Project/SceneObject/KESceneObjectFields.h" // SceneObjects type
#include "Project/KEProjectFields.h"    // ParentProject type
#include <OpenSG/OSGViewportFields.h>   // Viewports type
#include <OpenSG/OSGBackgroundFields.h> // Backgrounds type
#include <OpenSG/OSGUIDrawingSurfaceFields.h> // UIDrawingSurfaces type
#include <OpenSG/OSGForegroundFields.h> // Foregrounds type
#include <OpenSG/OSGNodeFields.h>       // ModelNodes type
#include <OpenSG/OSGTransformFields.h>  // RootCore type
#include <OpenSG/OSGCameraFields.h>     // Cameras type
#include <OpenSG/OSGAnimationFields.h>  // Animations type
#include <OpenSG/OSGParticleSystemFields.h> // ParticleSystems type
#include <OpenSG/OSGBoostPathFields.h>  // LuaModule type
#include <OpenSG/OSGPhysicsHandlerFields.h> // PhysicsHandler type
#include <OpenSG/OSGPhysicsWorldFields.h> // PhysicsWorld type
#include <OpenSG/OSGSysFields.h>        // GenericMethodIDs type

#include "KESceneFields.h"

//Event Producer Headers
#include <OpenSG/OSGActivity.h>
#include <OpenSG/OSGConsumableEventCombiner.h>

#include "Project/Scene/KESceneEventDetailsFields.h"
#include <OpenSG/OSGWindowEventDetailsFields.h>
#include <OpenSG/OSGMouseEventDetailsFields.h>
#include <OpenSG/OSGMouseWheelEventDetailsFields.h>
#include <OpenSG/OSGKeyEventDetailsFields.h>
#include <OpenSG/OSGUpdateEventDetailsFields.h>

OSG_BEGIN_NAMESPACE

class Scene;

//! \brief Scene Base Class.

class KE_KABALAENGINE_DLLMAPPING SceneBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(Scene);
    
    
    typedef SceneEventDetails  SceneEnteredEventDetailsType;
    typedef SceneEventDetails  SceneExitedEventDetailsType;
    typedef SceneEventDetails  SceneStartedEventDetailsType;
    typedef SceneEventDetails  SceneEndedEventDetailsType;
    typedef SceneEventDetails  SceneResetEventDetailsType;
    typedef WindowEventDetails WindowOpenedEventDetailsType;
    typedef WindowEventDetails WindowClosingEventDetailsType;
    typedef WindowEventDetails WindowClosedEventDetailsType;
    typedef WindowEventDetails WindowIconifiedEventDetailsType;
    typedef WindowEventDetails WindowDeiconifiedEventDetailsType;
    typedef WindowEventDetails WindowActivatedEventDetailsType;
    typedef WindowEventDetails WindowDeactivatedEventDetailsType;
    typedef WindowEventDetails WindowEnteredEventDetailsType;
    typedef WindowEventDetails WindowExitedEventDetailsType;
    typedef MouseEventDetails  MouseClickedEventDetailsType;
    typedef MouseEventDetails  MouseEnteredEventDetailsType;
    typedef MouseEventDetails  MouseExitedEventDetailsType;
    typedef MouseEventDetails  MousePressedEventDetailsType;
    typedef MouseEventDetails  MouseReleasedEventDetailsType;
    typedef MouseEventDetails  MouseMovedEventDetailsType;
    typedef MouseEventDetails  MouseDraggedEventDetailsType;
    typedef MouseWheelEventDetails MouseWheelMovedEventDetailsType;
    typedef KeyEventDetails    KeyPressedEventDetailsType;
    typedef KeyEventDetails    KeyReleasedEventDetailsType;
    typedef KeyEventDetails    KeyTypedEventDetailsType;
    typedef UpdateEventDetails UpdateEventDetailsType;

    typedef boost::signals2::signal<void (EventDetails* const            , UInt32)> BaseEventType;
    typedef boost::signals2::signal<void (SceneEventDetails* const, UInt32), ConsumableEventCombiner> SceneEnteredEventType;
    typedef boost::signals2::signal<void (SceneEventDetails* const, UInt32), ConsumableEventCombiner> SceneExitedEventType;
    typedef boost::signals2::signal<void (SceneEventDetails* const, UInt32), ConsumableEventCombiner> SceneStartedEventType;
    typedef boost::signals2::signal<void (SceneEventDetails* const, UInt32), ConsumableEventCombiner> SceneEndedEventType;
    typedef boost::signals2::signal<void (SceneEventDetails* const, UInt32), ConsumableEventCombiner> SceneResetEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowOpenedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowClosingEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowClosedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowIconifiedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowDeiconifiedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowActivatedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowDeactivatedEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowEnteredEventType;
    typedef boost::signals2::signal<void (WindowEventDetails* const, UInt32), ConsumableEventCombiner> WindowExitedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseClickedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseEnteredEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseExitedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MousePressedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseReleasedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseMovedEventType;
    typedef boost::signals2::signal<void (MouseEventDetails* const, UInt32), ConsumableEventCombiner> MouseDraggedEventType;
    typedef boost::signals2::signal<void (MouseWheelEventDetails* const, UInt32), ConsumableEventCombiner> MouseWheelMovedEventType;
    typedef boost::signals2::signal<void (KeyEventDetails* const  , UInt32), ConsumableEventCombiner> KeyPressedEventType;
    typedef boost::signals2::signal<void (KeyEventDetails* const  , UInt32), ConsumableEventCombiner> KeyReleasedEventType;
    typedef boost::signals2::signal<void (KeyEventDetails* const  , UInt32), ConsumableEventCombiner> KeyTypedEventType;
    typedef boost::signals2::signal<void (UpdateEventDetails* const, UInt32), ConsumableEventCombiner> UpdateEventType;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        SceneObjectsFieldId = Inherited::NextFieldId,
        ParentProjectFieldId = SceneObjectsFieldId + 1,
        ViewportsFieldId = ParentProjectFieldId + 1,
        BackgroundsFieldId = ViewportsFieldId + 1,
        UIDrawingSurfacesFieldId = BackgroundsFieldId + 1,
        InitialBackgroundFieldId = UIDrawingSurfacesFieldId + 1,
        ForegroundsFieldId = InitialBackgroundFieldId + 1,
        InitialForegroundsFieldId = ForegroundsFieldId + 1,
        ModelNodesFieldId = InitialForegroundsFieldId + 1,
        InitialModelNodesFieldId = ModelNodesFieldId + 1,
        RootFieldId = InitialModelNodesFieldId + 1,
        RootCoreFieldId = RootFieldId + 1,
        DefaultCameraBeaconFieldId = RootCoreFieldId + 1,
        DefaultCameraBeaconCoreFieldId = DefaultCameraBeaconFieldId + 1,
        CamerasFieldId = DefaultCameraBeaconCoreFieldId + 1,
        InitialCameraFieldId = CamerasFieldId + 1,
        AnimationsFieldId = InitialCameraFieldId + 1,
        InitialAnimationsFieldId = AnimationsFieldId + 1,
        ParticleSystemsFieldId = InitialAnimationsFieldId + 1,
        InitialParticleSystemsFieldId = ParticleSystemsFieldId + 1,
        LuaModuleFieldId = InitialParticleSystemsFieldId + 1,
        PhysicsHandlerFieldId = LuaModuleFieldId + 1,
        PhysicsWorldFieldId = PhysicsHandlerFieldId + 1,
        GenericMethodIDsFieldId = PhysicsWorldFieldId + 1,
        NextFieldId = GenericMethodIDsFieldId + 1
    };

    static const OSG::BitVector SceneObjectsFieldMask =
        (TypeTraits<BitVector>::One << SceneObjectsFieldId);
    static const OSG::BitVector ParentProjectFieldMask =
        (TypeTraits<BitVector>::One << ParentProjectFieldId);
    static const OSG::BitVector ViewportsFieldMask =
        (TypeTraits<BitVector>::One << ViewportsFieldId);
    static const OSG::BitVector BackgroundsFieldMask =
        (TypeTraits<BitVector>::One << BackgroundsFieldId);
    static const OSG::BitVector UIDrawingSurfacesFieldMask =
        (TypeTraits<BitVector>::One << UIDrawingSurfacesFieldId);
    static const OSG::BitVector InitialBackgroundFieldMask =
        (TypeTraits<BitVector>::One << InitialBackgroundFieldId);
    static const OSG::BitVector ForegroundsFieldMask =
        (TypeTraits<BitVector>::One << ForegroundsFieldId);
    static const OSG::BitVector InitialForegroundsFieldMask =
        (TypeTraits<BitVector>::One << InitialForegroundsFieldId);
    static const OSG::BitVector ModelNodesFieldMask =
        (TypeTraits<BitVector>::One << ModelNodesFieldId);
    static const OSG::BitVector InitialModelNodesFieldMask =
        (TypeTraits<BitVector>::One << InitialModelNodesFieldId);
    static const OSG::BitVector RootFieldMask =
        (TypeTraits<BitVector>::One << RootFieldId);
    static const OSG::BitVector RootCoreFieldMask =
        (TypeTraits<BitVector>::One << RootCoreFieldId);
    static const OSG::BitVector DefaultCameraBeaconFieldMask =
        (TypeTraits<BitVector>::One << DefaultCameraBeaconFieldId);
    static const OSG::BitVector DefaultCameraBeaconCoreFieldMask =
        (TypeTraits<BitVector>::One << DefaultCameraBeaconCoreFieldId);
    static const OSG::BitVector CamerasFieldMask =
        (TypeTraits<BitVector>::One << CamerasFieldId);
    static const OSG::BitVector InitialCameraFieldMask =
        (TypeTraits<BitVector>::One << InitialCameraFieldId);
    static const OSG::BitVector AnimationsFieldMask =
        (TypeTraits<BitVector>::One << AnimationsFieldId);
    static const OSG::BitVector InitialAnimationsFieldMask =
        (TypeTraits<BitVector>::One << InitialAnimationsFieldId);
    static const OSG::BitVector ParticleSystemsFieldMask =
        (TypeTraits<BitVector>::One << ParticleSystemsFieldId);
    static const OSG::BitVector InitialParticleSystemsFieldMask =
        (TypeTraits<BitVector>::One << InitialParticleSystemsFieldId);
    static const OSG::BitVector LuaModuleFieldMask =
        (TypeTraits<BitVector>::One << LuaModuleFieldId);
    static const OSG::BitVector PhysicsHandlerFieldMask =
        (TypeTraits<BitVector>::One << PhysicsHandlerFieldId);
    static const OSG::BitVector PhysicsWorldFieldMask =
        (TypeTraits<BitVector>::One << PhysicsWorldFieldId);
    static const OSG::BitVector GenericMethodIDsFieldMask =
        (TypeTraits<BitVector>::One << GenericMethodIDsFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef MFUnrecChildSceneObjectPtr MFSceneObjectsType;
    typedef SFParentFieldContainerPtr SFParentProjectType;
    typedef MFUnrecViewportPtr MFViewportsType;
    typedef MFUnrecBackgroundPtr MFBackgroundsType;
    typedef MFUnrecUIDrawingSurfacePtr MFUIDrawingSurfacesType;
    typedef SFUnrecBackgroundPtr SFInitialBackgroundType;
    typedef MFUnrecForegroundPtr MFForegroundsType;
    typedef MFUnrecForegroundPtr MFInitialForegroundsType;
    typedef MFUnrecNodePtr    MFModelNodesType;
    typedef MFUnrecNodePtr    MFInitialModelNodesType;
    typedef SFUnrecNodePtr    SFRootType;
    typedef SFUnrecTransformPtr SFRootCoreType;
    typedef SFUnrecNodePtr    SFDefaultCameraBeaconType;
    typedef SFUnrecTransformPtr SFDefaultCameraBeaconCoreType;
    typedef MFUnrecCameraPtr  MFCamerasType;
    typedef SFUnrecCameraPtr  SFInitialCameraType;
    typedef MFUnrecAnimationPtr MFAnimationsType;
    typedef MFUnrecAnimationPtr MFInitialAnimationsType;
    typedef MFUnrecParticleSystemPtr MFParticleSystemsType;
    typedef MFUnrecParticleSystemPtr MFInitialParticleSystemsType;
    typedef SFBoostPath       SFLuaModuleType;
    typedef SFUnrecPhysicsHandlerPtr SFPhysicsHandlerType;
    typedef SFUnrecPhysicsWorldPtr SFPhysicsWorldType;
    typedef SFUInt32          SFGenericMethodIDsType;

    enum
    {
        SceneEnteredEventId = 1,
        SceneExitedEventId = SceneEnteredEventId + 1,
        SceneStartedEventId = SceneExitedEventId + 1,
        SceneEndedEventId = SceneStartedEventId + 1,
        SceneResetEventId = SceneEndedEventId + 1,
        WindowOpenedEventId = SceneResetEventId + 1,
        WindowClosingEventId = WindowOpenedEventId + 1,
        WindowClosedEventId = WindowClosingEventId + 1,
        WindowIconifiedEventId = WindowClosedEventId + 1,
        WindowDeiconifiedEventId = WindowIconifiedEventId + 1,
        WindowActivatedEventId = WindowDeiconifiedEventId + 1,
        WindowDeactivatedEventId = WindowActivatedEventId + 1,
        WindowEnteredEventId = WindowDeactivatedEventId + 1,
        WindowExitedEventId = WindowEnteredEventId + 1,
        MouseClickedEventId = WindowExitedEventId + 1,
        MouseEnteredEventId = MouseClickedEventId + 1,
        MouseExitedEventId = MouseEnteredEventId + 1,
        MousePressedEventId = MouseExitedEventId + 1,
        MouseReleasedEventId = MousePressedEventId + 1,
        MouseMovedEventId = MouseReleasedEventId + 1,
        MouseDraggedEventId = MouseMovedEventId + 1,
        MouseWheelMovedEventId = MouseDraggedEventId + 1,
        KeyPressedEventId = MouseWheelMovedEventId + 1,
        KeyReleasedEventId = KeyPressedEventId + 1,
        KeyTypedEventId = KeyReleasedEventId + 1,
        UpdateEventId = KeyTypedEventId + 1,
        NextProducedEventId = UpdateEventId + 1
    };

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);
    static const  EventProducerType  &getProducerClassType  (void);
    static        UInt32              getProducerClassTypeId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const MFUnrecChildSceneObjectPtr *getMFSceneObjects   (void) const;
                  MFUnrecChildSceneObjectPtr *editMFSceneObjects   (void);
            const MFUnrecViewportPtr  *getMFViewports      (void) const;
                  MFUnrecViewportPtr  *editMFViewports      (void);
            const MFUnrecBackgroundPtr *getMFBackgrounds    (void) const;
                  MFUnrecBackgroundPtr *editMFBackgrounds    (void);
            const MFUnrecUIDrawingSurfacePtr *getMFUIDrawingSurfaces(void) const;
                  MFUnrecUIDrawingSurfacePtr *editMFUIDrawingSurfaces(void);
            const SFUnrecBackgroundPtr *getSFInitialBackground(void) const;
                  SFUnrecBackgroundPtr *editSFInitialBackground(void);
            const MFUnrecForegroundPtr *getMFForegrounds    (void) const;
                  MFUnrecForegroundPtr *editMFForegrounds    (void);
            const MFUnrecForegroundPtr *getMFInitialForegrounds(void) const;
                  MFUnrecForegroundPtr *editMFInitialForegrounds(void);
            const MFUnrecNodePtr      *getMFModelNodes     (void) const;
                  MFUnrecNodePtr      *editMFModelNodes     (void);
            const MFUnrecNodePtr      *getMFInitialModelNodes(void) const;
                  MFUnrecNodePtr      *editMFInitialModelNodes(void);
            const MFUnrecCameraPtr    *getMFCameras        (void) const;
                  MFUnrecCameraPtr    *editMFCameras        (void);
            const SFUnrecCameraPtr    *getSFInitialCamera  (void) const;
                  SFUnrecCameraPtr    *editSFInitialCamera  (void);
            const MFUnrecAnimationPtr *getMFAnimations     (void) const;
                  MFUnrecAnimationPtr *editMFAnimations     (void);
            const MFUnrecAnimationPtr *getMFInitialAnimations(void) const;
                  MFUnrecAnimationPtr *editMFInitialAnimations(void);
            const MFUnrecParticleSystemPtr *getMFParticleSystems(void) const;
                  MFUnrecParticleSystemPtr *editMFParticleSystems(void);
            const MFUnrecParticleSystemPtr *getMFInitialParticleSystems(void) const;
                  MFUnrecParticleSystemPtr *editMFInitialParticleSystems(void);

                  SFBoostPath         *editSFLuaModule      (void);
            const SFBoostPath         *getSFLuaModule       (void) const;
            const SFUnrecPhysicsHandlerPtr *getSFPhysicsHandler (void) const;
                  SFUnrecPhysicsHandlerPtr *editSFPhysicsHandler (void);
            const SFUnrecPhysicsWorldPtr *getSFPhysicsWorld   (void) const;
                  SFUnrecPhysicsWorldPtr *editSFPhysicsWorld   (void);


                  SceneObject * getSceneObjects   (const UInt32 index) const;

                  Viewport * getViewports      (const UInt32 index) const;

                  Background * getBackgrounds    (const UInt32 index) const;

                  UIDrawingSurface * getUIDrawingSurfaces(const UInt32 index) const;

                  Background * getInitialBackground(void) const;

                  Foreground * getForegrounds    (const UInt32 index) const;

                  Foreground * getInitialForegrounds(const UInt32 index) const;

                  Node * getModelNodes     (const UInt32 index) const;

                  Node * getInitialModelNodes(const UInt32 index) const;

                  Camera * getCameras        (const UInt32 index) const;

                  Camera * getInitialCamera  (void) const;

                  Animation * getAnimations     (const UInt32 index) const;

                  Animation * getInitialAnimations(const UInt32 index) const;

                  ParticleSystem * getParticleSystems(const UInt32 index) const;

                  ParticleSystem * getInitialParticleSystems(const UInt32 index) const;

                  BoostPath           &editLuaModule      (void);
            const BoostPath           &getLuaModule       (void) const;

                  PhysicsHandler * getPhysicsHandler (void) const;

                  PhysicsWorld * getPhysicsWorld   (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setInitialBackground(Background * const value);
            void setInitialCamera  (Camera * const value);
            void setLuaModule      (const BoostPath &value);
            void setPhysicsHandler (PhysicsHandler * const value);
            void setPhysicsWorld   (PhysicsWorld * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToSceneObjects           (SceneObject * const value   );
    void assignSceneObjects          (const MFUnrecChildSceneObjectPtr &value);
    void removeFromSceneObjects (UInt32               uiIndex );
    void removeObjFromSceneObjects(SceneObject * const value   );
    void clearSceneObjects            (void                         );

    void pushToViewports           (Viewport * const value   );
    void assignViewports          (const MFUnrecViewportPtr &value);
    void removeFromViewports (UInt32               uiIndex );
    void removeObjFromViewports(Viewport * const value   );
    void clearViewports             (void                         );

    void pushToBackgrounds           (Background * const value   );
    void assignBackgrounds          (const MFUnrecBackgroundPtr &value);
    void removeFromBackgrounds (UInt32               uiIndex );
    void removeObjFromBackgrounds(Background * const value   );
    void clearBackgrounds            (void                         );

    void pushToUIDrawingSurfaces           (UIDrawingSurface * const value   );
    void assignUIDrawingSurfaces          (const MFUnrecUIDrawingSurfacePtr &value);
    void removeFromUIDrawingSurfaces (UInt32               uiIndex );
    void removeObjFromUIDrawingSurfaces(UIDrawingSurface * const value   );
    void clearUIDrawingSurfaces            (void                         );

    void pushToForegrounds           (Foreground * const value   );
    void assignForegrounds          (const MFUnrecForegroundPtr &value);
    void removeFromForegrounds (UInt32               uiIndex );
    void removeObjFromForegrounds(Foreground * const value   );
    void clearForegrounds            (void                         );

    void pushToInitialForegrounds           (Foreground * const value   );
    void assignInitialForegrounds          (const MFUnrecForegroundPtr &value);
    void removeFromInitialForegrounds (UInt32               uiIndex );
    void removeObjFromInitialForegrounds(Foreground * const value   );
    void clearInitialForegrounds            (void                         );

    void pushToModelNodes           (Node * const value   );
    void assignModelNodes          (const MFUnrecNodePtr    &value);
    void removeFromModelNodes (UInt32               uiIndex );
    void removeObjFromModelNodes(Node * const value   );
    void clearModelNodes            (void                         );

    void pushToInitialModelNodes           (Node * const value   );
    void assignInitialModelNodes          (const MFUnrecNodePtr    &value);
    void removeFromInitialModelNodes (UInt32               uiIndex );
    void removeObjFromInitialModelNodes(Node * const value   );
    void clearInitialModelNodes            (void                         );

    void pushToCameras             (Camera * const value   );
    void assignCameras            (const MFUnrecCameraPtr  &value);
    void removeFromCameras (UInt32               uiIndex );
    void removeObjFromCameras(Camera * const value   );
    void clearCameras               (void                         );

    void pushToAnimations           (Animation * const value   );
    void assignAnimations          (const MFUnrecAnimationPtr &value);
    void removeFromAnimations (UInt32               uiIndex );
    void removeObjFromAnimations(Animation * const value   );
    void clearAnimations            (void                         );

    void pushToInitialAnimations           (Animation * const value   );
    void assignInitialAnimations          (const MFUnrecAnimationPtr &value);
    void removeFromInitialAnimations (UInt32               uiIndex );
    void removeObjFromInitialAnimations(Animation * const value   );
    void clearInitialAnimations            (void                         );

    void pushToParticleSystems           (ParticleSystem * const value   );
    void assignParticleSystems          (const MFUnrecParticleSystemPtr &value);
    void removeFromParticleSystems (UInt32               uiIndex );
    void removeObjFromParticleSystems(ParticleSystem * const value   );
    void clearParticleSystems            (void                         );

    void pushToInitialParticleSystems           (ParticleSystem * const value   );
    void assignInitialParticleSystems          (const MFUnrecParticleSystemPtr &value);
    void removeFromInitialParticleSystems (UInt32               uiIndex );
    void removeObjFromInitialParticleSystems(ParticleSystem * const value   );
    void clearInitialParticleSystems            (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Event Produced Get                           */
    /*! \{                                                                 */

    virtual const EventProducerType &getProducerType(void) const; 

    virtual boost::signals2::connection attachActivity(UInt32 eventId,
                                                       Activity* TheActivity);
                                                         
    virtual UInt32                   getNumProducedEvents       (void                                ) const;
    virtual const EventDescription *getProducedEventDescription(const std::string &ProducedEventName) const;
    virtual const EventDescription *getProducedEventDescription(UInt32 ProducedEventId              ) const;
    virtual UInt32                   getProducedEventId         (const std::string &ProducedEventName) const;
    
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
                                              
    virtual boost::signals2::connection connectEvent(UInt32 eventId, 
                                              const BaseEventType::group_type &group,
                                              const BaseEventType::slot_type &listener,
                                              boost::signals2::connect_position at= boost::signals2::at_back);
    
    virtual void   disconnectEvent        (UInt32 eventId, const BaseEventType::group_type &group);
    virtual void   disconnectAllSlotsEvent(UInt32 eventId);
    virtual bool   isEmptyEvent           (UInt32 eventId) const;
    virtual UInt32 numSlotsEvent          (UInt32 eventId) const;

    /*! \}                                                                 */
    /*! \name                Event Access                                 */
    /*! \{                                                                 */
    
    //SceneEntered
    boost::signals2::connection connectSceneEntered   (const SceneEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectSceneEntered   (const SceneEnteredEventType::group_type &group,
                                                       const SceneEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectSceneEntered           (const SceneEnteredEventType::group_type &group);
    void   disconnectAllSlotsSceneEntered   (void);
    bool   isEmptySceneEntered              (void) const;
    UInt32 numSlotsSceneEntered             (void) const;
    
    //SceneExited
    boost::signals2::connection connectSceneExited    (const SceneExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectSceneExited    (const SceneExitedEventType::group_type &group,
                                                       const SceneExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectSceneExited            (const SceneExitedEventType::group_type &group);
    void   disconnectAllSlotsSceneExited    (void);
    bool   isEmptySceneExited               (void) const;
    UInt32 numSlotsSceneExited              (void) const;
    
    //SceneStarted
    boost::signals2::connection connectSceneStarted   (const SceneStartedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectSceneStarted   (const SceneStartedEventType::group_type &group,
                                                       const SceneStartedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectSceneStarted           (const SceneStartedEventType::group_type &group);
    void   disconnectAllSlotsSceneStarted   (void);
    bool   isEmptySceneStarted              (void) const;
    UInt32 numSlotsSceneStarted             (void) const;
    
    //SceneEnded
    boost::signals2::connection connectSceneEnded     (const SceneEndedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectSceneEnded     (const SceneEndedEventType::group_type &group,
                                                       const SceneEndedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectSceneEnded             (const SceneEndedEventType::group_type &group);
    void   disconnectAllSlotsSceneEnded     (void);
    bool   isEmptySceneEnded                (void) const;
    UInt32 numSlotsSceneEnded               (void) const;
    
    //SceneReset
    boost::signals2::connection connectSceneReset     (const SceneResetEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectSceneReset     (const SceneResetEventType::group_type &group,
                                                       const SceneResetEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectSceneReset             (const SceneResetEventType::group_type &group);
    void   disconnectAllSlotsSceneReset     (void);
    bool   isEmptySceneReset                (void) const;
    UInt32 numSlotsSceneReset               (void) const;
    
    //WindowOpened
    boost::signals2::connection connectWindowOpened   (const WindowOpenedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowOpened   (const WindowOpenedEventType::group_type &group,
                                                       const WindowOpenedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowOpened           (const WindowOpenedEventType::group_type &group);
    void   disconnectAllSlotsWindowOpened   (void);
    bool   isEmptyWindowOpened              (void) const;
    UInt32 numSlotsWindowOpened             (void) const;
    
    //WindowClosing
    boost::signals2::connection connectWindowClosing  (const WindowClosingEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowClosing  (const WindowClosingEventType::group_type &group,
                                                       const WindowClosingEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowClosing          (const WindowClosingEventType::group_type &group);
    void   disconnectAllSlotsWindowClosing  (void);
    bool   isEmptyWindowClosing             (void) const;
    UInt32 numSlotsWindowClosing            (void) const;
    
    //WindowClosed
    boost::signals2::connection connectWindowClosed   (const WindowClosedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowClosed   (const WindowClosedEventType::group_type &group,
                                                       const WindowClosedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowClosed           (const WindowClosedEventType::group_type &group);
    void   disconnectAllSlotsWindowClosed   (void);
    bool   isEmptyWindowClosed              (void) const;
    UInt32 numSlotsWindowClosed             (void) const;
    
    //WindowIconified
    boost::signals2::connection connectWindowIconified(const WindowIconifiedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowIconified(const WindowIconifiedEventType::group_type &group,
                                                       const WindowIconifiedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowIconified        (const WindowIconifiedEventType::group_type &group);
    void   disconnectAllSlotsWindowIconified(void);
    bool   isEmptyWindowIconified           (void) const;
    UInt32 numSlotsWindowIconified          (void) const;
    
    //WindowDeiconified
    boost::signals2::connection connectWindowDeiconified(const WindowDeiconifiedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowDeiconified(const WindowDeiconifiedEventType::group_type &group,
                                                       const WindowDeiconifiedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowDeiconified      (const WindowDeiconifiedEventType::group_type &group);
    void   disconnectAllSlotsWindowDeiconified(void);
    bool   isEmptyWindowDeiconified         (void) const;
    UInt32 numSlotsWindowDeiconified        (void) const;
    
    //WindowActivated
    boost::signals2::connection connectWindowActivated(const WindowActivatedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowActivated(const WindowActivatedEventType::group_type &group,
                                                       const WindowActivatedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowActivated        (const WindowActivatedEventType::group_type &group);
    void   disconnectAllSlotsWindowActivated(void);
    bool   isEmptyWindowActivated           (void) const;
    UInt32 numSlotsWindowActivated          (void) const;
    
    //WindowDeactivated
    boost::signals2::connection connectWindowDeactivated(const WindowDeactivatedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowDeactivated(const WindowDeactivatedEventType::group_type &group,
                                                       const WindowDeactivatedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowDeactivated      (const WindowDeactivatedEventType::group_type &group);
    void   disconnectAllSlotsWindowDeactivated(void);
    bool   isEmptyWindowDeactivated         (void) const;
    UInt32 numSlotsWindowDeactivated        (void) const;
    
    //WindowEntered
    boost::signals2::connection connectWindowEntered  (const WindowEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowEntered  (const WindowEnteredEventType::group_type &group,
                                                       const WindowEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowEntered          (const WindowEnteredEventType::group_type &group);
    void   disconnectAllSlotsWindowEntered  (void);
    bool   isEmptyWindowEntered             (void) const;
    UInt32 numSlotsWindowEntered            (void) const;
    
    //WindowExited
    boost::signals2::connection connectWindowExited   (const WindowExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectWindowExited   (const WindowExitedEventType::group_type &group,
                                                       const WindowExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectWindowExited           (const WindowExitedEventType::group_type &group);
    void   disconnectAllSlotsWindowExited   (void);
    bool   isEmptyWindowExited              (void) const;
    UInt32 numSlotsWindowExited             (void) const;
    
    //MouseClicked
    boost::signals2::connection connectMouseClicked   (const MouseClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseClicked   (const MouseClickedEventType::group_type &group,
                                                       const MouseClickedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseClicked           (const MouseClickedEventType::group_type &group);
    void   disconnectAllSlotsMouseClicked   (void);
    bool   isEmptyMouseClicked              (void) const;
    UInt32 numSlotsMouseClicked             (void) const;
    
    //MouseEntered
    boost::signals2::connection connectMouseEntered   (const MouseEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseEntered   (const MouseEnteredEventType::group_type &group,
                                                       const MouseEnteredEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseEntered           (const MouseEnteredEventType::group_type &group);
    void   disconnectAllSlotsMouseEntered   (void);
    bool   isEmptyMouseEntered              (void) const;
    UInt32 numSlotsMouseEntered             (void) const;
    
    //MouseExited
    boost::signals2::connection connectMouseExited    (const MouseExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseExited    (const MouseExitedEventType::group_type &group,
                                                       const MouseExitedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseExited            (const MouseExitedEventType::group_type &group);
    void   disconnectAllSlotsMouseExited    (void);
    bool   isEmptyMouseExited               (void) const;
    UInt32 numSlotsMouseExited              (void) const;
    
    //MousePressed
    boost::signals2::connection connectMousePressed   (const MousePressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMousePressed   (const MousePressedEventType::group_type &group,
                                                       const MousePressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMousePressed           (const MousePressedEventType::group_type &group);
    void   disconnectAllSlotsMousePressed   (void);
    bool   isEmptyMousePressed              (void) const;
    UInt32 numSlotsMousePressed             (void) const;
    
    //MouseReleased
    boost::signals2::connection connectMouseReleased  (const MouseReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseReleased  (const MouseReleasedEventType::group_type &group,
                                                       const MouseReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseReleased          (const MouseReleasedEventType::group_type &group);
    void   disconnectAllSlotsMouseReleased  (void);
    bool   isEmptyMouseReleased             (void) const;
    UInt32 numSlotsMouseReleased            (void) const;
    
    //MouseMoved
    boost::signals2::connection connectMouseMoved     (const MouseMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseMoved     (const MouseMovedEventType::group_type &group,
                                                       const MouseMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseMoved             (const MouseMovedEventType::group_type &group);
    void   disconnectAllSlotsMouseMoved     (void);
    bool   isEmptyMouseMoved                (void) const;
    UInt32 numSlotsMouseMoved               (void) const;
    
    //MouseDragged
    boost::signals2::connection connectMouseDragged   (const MouseDraggedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseDragged   (const MouseDraggedEventType::group_type &group,
                                                       const MouseDraggedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseDragged           (const MouseDraggedEventType::group_type &group);
    void   disconnectAllSlotsMouseDragged   (void);
    bool   isEmptyMouseDragged              (void) const;
    UInt32 numSlotsMouseDragged             (void) const;
    
    //MouseWheelMoved
    boost::signals2::connection connectMouseWheelMoved(const MouseWheelMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectMouseWheelMoved(const MouseWheelMovedEventType::group_type &group,
                                                       const MouseWheelMovedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectMouseWheelMoved        (const MouseWheelMovedEventType::group_type &group);
    void   disconnectAllSlotsMouseWheelMoved(void);
    bool   isEmptyMouseWheelMoved           (void) const;
    UInt32 numSlotsMouseWheelMoved          (void) const;
    
    //KeyPressed
    boost::signals2::connection connectKeyPressed     (const KeyPressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyPressed     (const KeyPressedEventType::group_type &group,
                                                       const KeyPressedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyPressed             (const KeyPressedEventType::group_type &group);
    void   disconnectAllSlotsKeyPressed     (void);
    bool   isEmptyKeyPressed                (void) const;
    UInt32 numSlotsKeyPressed               (void) const;
    
    //KeyReleased
    boost::signals2::connection connectKeyReleased    (const KeyReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyReleased    (const KeyReleasedEventType::group_type &group,
                                                       const KeyReleasedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyReleased            (const KeyReleasedEventType::group_type &group);
    void   disconnectAllSlotsKeyReleased    (void);
    bool   isEmptyKeyReleased               (void) const;
    UInt32 numSlotsKeyReleased              (void) const;
    
    //KeyTyped
    boost::signals2::connection connectKeyTyped       (const KeyTypedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectKeyTyped       (const KeyTypedEventType::group_type &group,
                                                       const KeyTypedEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectKeyTyped               (const KeyTypedEventType::group_type &group);
    void   disconnectAllSlotsKeyTyped       (void);
    bool   isEmptyKeyTyped                  (void) const;
    UInt32 numSlotsKeyTyped                 (void) const;
    
    //Update
    boost::signals2::connection connectUpdate         (const UpdateEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    boost::signals2::connection connectUpdate         (const UpdateEventType::group_type &group,
                                                       const UpdateEventType::slot_type &listener,
                                                       boost::signals2::connect_position at= boost::signals2::at_back);
    void   disconnectUpdate                 (const UpdateEventType::group_type &group);
    void   disconnectAllSlotsUpdate         (void);
    bool   isEmptyUpdate                    (void) const;
    UInt32 numSlotsUpdate                   (void) const;
    
    
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SceneTransitPtr  create          (void);
    static  Scene           *createEmpty     (void);

    static  SceneTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  Scene            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SceneTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:
    /*---------------------------------------------------------------------*/
    /*! \name                    Produced Event Signals                   */
    /*! \{                                                                 */

    //Event Event producers
    SceneEnteredEventType _SceneEnteredEvent;
    SceneExitedEventType _SceneExitedEvent;
    SceneStartedEventType _SceneStartedEvent;
    SceneEndedEventType _SceneEndedEvent;
    SceneResetEventType _SceneResetEvent;
    WindowOpenedEventType _WindowOpenedEvent;
    WindowClosingEventType _WindowClosingEvent;
    WindowClosedEventType _WindowClosedEvent;
    WindowIconifiedEventType _WindowIconifiedEvent;
    WindowDeiconifiedEventType _WindowDeiconifiedEvent;
    WindowActivatedEventType _WindowActivatedEvent;
    WindowDeactivatedEventType _WindowDeactivatedEvent;
    WindowEnteredEventType _WindowEnteredEvent;
    WindowExitedEventType _WindowExitedEvent;
    MouseClickedEventType _MouseClickedEvent;
    MouseEnteredEventType _MouseEnteredEvent;
    MouseExitedEventType _MouseExitedEvent;
    MousePressedEventType _MousePressedEvent;
    MouseReleasedEventType _MouseReleasedEvent;
    MouseMovedEventType _MouseMovedEvent;
    MouseDraggedEventType _MouseDraggedEvent;
    MouseWheelMovedEventType _MouseWheelMovedEvent;
    KeyPressedEventType _KeyPressedEvent;
    KeyReleasedEventType _KeyReleasedEvent;
    KeyTypedEventType _KeyTypedEvent;
    UpdateEventType _UpdateEvent;
    /*! \}                                                                 */

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFUnrecChildSceneObjectPtr _mfSceneObjects;
    SFParentFieldContainerPtr _sfParentProject;
    MFUnrecViewportPtr _mfViewports;
    MFUnrecBackgroundPtr _mfBackgrounds;
    MFUnrecUIDrawingSurfacePtr _mfUIDrawingSurfaces;
    SFUnrecBackgroundPtr _sfInitialBackground;
    MFUnrecForegroundPtr _mfForegrounds;
    MFUnrecForegroundPtr _mfInitialForegrounds;
    MFUnrecNodePtr    _mfModelNodes;
    MFUnrecNodePtr    _mfInitialModelNodes;
    SFUnrecNodePtr    _sfRoot;
    SFUnrecTransformPtr _sfRootCore;
    SFUnrecNodePtr    _sfDefaultCameraBeacon;
    SFUnrecTransformPtr _sfDefaultCameraBeaconCore;
    MFUnrecCameraPtr  _mfCameras;
    SFUnrecCameraPtr  _sfInitialCamera;
    MFUnrecAnimationPtr _mfAnimations;
    MFUnrecAnimationPtr _mfInitialAnimations;
    MFUnrecParticleSystemPtr _mfParticleSystems;
    MFUnrecParticleSystemPtr _mfInitialParticleSystems;
    SFBoostPath       _sfLuaModule;
    SFUnrecPhysicsHandlerPtr _sfPhysicsHandler;
    SFUnrecPhysicsWorldPtr _sfPhysicsWorld;
    SFUInt32          _sfGenericMethodIDs;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SceneBase(void);
    SceneBase(const SceneBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SceneBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const Scene *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Parent linking                                               */
    /*! \{                                                                 */

    virtual bool linkParent  (FieldContainer * const pParent,
                              UInt16           const childFieldId,
                              UInt16           const parentFieldId);
    virtual bool unlinkParent(FieldContainer * const pParent,
                              UInt16           const parentFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Child linking                                                */
    /*! \{                                                                 */

    virtual bool unlinkChild(FieldContainer * const pChild,
                             UInt16           const childFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleSceneObjects    (void) const;
    EditFieldHandlePtr editHandleSceneObjects   (void);
    GetFieldHandlePtr  getHandleParentProject   (void) const;
    EditFieldHandlePtr editHandleParentProject  (void);
    GetFieldHandlePtr  getHandleViewports       (void) const;
    EditFieldHandlePtr editHandleViewports      (void);
    GetFieldHandlePtr  getHandleBackgrounds     (void) const;
    EditFieldHandlePtr editHandleBackgrounds    (void);
    GetFieldHandlePtr  getHandleUIDrawingSurfaces (void) const;
    EditFieldHandlePtr editHandleUIDrawingSurfaces(void);
    GetFieldHandlePtr  getHandleInitialBackground (void) const;
    EditFieldHandlePtr editHandleInitialBackground(void);
    GetFieldHandlePtr  getHandleForegrounds     (void) const;
    EditFieldHandlePtr editHandleForegrounds    (void);
    GetFieldHandlePtr  getHandleInitialForegrounds (void) const;
    EditFieldHandlePtr editHandleInitialForegrounds(void);
    GetFieldHandlePtr  getHandleModelNodes      (void) const;
    EditFieldHandlePtr editHandleModelNodes     (void);
    GetFieldHandlePtr  getHandleInitialModelNodes (void) const;
    EditFieldHandlePtr editHandleInitialModelNodes(void);
    GetFieldHandlePtr  getHandleRoot            (void) const;
    EditFieldHandlePtr editHandleRoot           (void);
    GetFieldHandlePtr  getHandleRootCore        (void) const;
    EditFieldHandlePtr editHandleRootCore       (void);
    GetFieldHandlePtr  getHandleDefaultCameraBeacon (void) const;
    EditFieldHandlePtr editHandleDefaultCameraBeacon(void);
    GetFieldHandlePtr  getHandleDefaultCameraBeaconCore (void) const;
    EditFieldHandlePtr editHandleDefaultCameraBeaconCore(void);
    GetFieldHandlePtr  getHandleCameras         (void) const;
    EditFieldHandlePtr editHandleCameras        (void);
    GetFieldHandlePtr  getHandleInitialCamera   (void) const;
    EditFieldHandlePtr editHandleInitialCamera  (void);
    GetFieldHandlePtr  getHandleAnimations      (void) const;
    EditFieldHandlePtr editHandleAnimations     (void);
    GetFieldHandlePtr  getHandleInitialAnimations (void) const;
    EditFieldHandlePtr editHandleInitialAnimations(void);
    GetFieldHandlePtr  getHandleParticleSystems (void) const;
    EditFieldHandlePtr editHandleParticleSystems(void);
    GetFieldHandlePtr  getHandleInitialParticleSystems (void) const;
    EditFieldHandlePtr editHandleInitialParticleSystems(void);
    GetFieldHandlePtr  getHandleLuaModule       (void) const;
    EditFieldHandlePtr editHandleLuaModule      (void);
    GetFieldHandlePtr  getHandlePhysicsHandler  (void) const;
    EditFieldHandlePtr editHandlePhysicsHandler (void);
    GetFieldHandlePtr  getHandlePhysicsWorld    (void) const;
    EditFieldHandlePtr editHandlePhysicsWorld   (void);
    GetFieldHandlePtr  getHandleGenericMethodIDs (void) const;
    EditFieldHandlePtr editHandleGenericMethodIDs(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Event Access                     */
    /*! \{                                                                 */

    GetEventHandlePtr getHandleSceneEnteredSignal(void) const;
    GetEventHandlePtr getHandleSceneExitedSignal(void) const;
    GetEventHandlePtr getHandleSceneStartedSignal(void) const;
    GetEventHandlePtr getHandleSceneEndedSignal(void) const;
    GetEventHandlePtr getHandleSceneResetSignal(void) const;
    GetEventHandlePtr getHandleWindowOpenedSignal(void) const;
    GetEventHandlePtr getHandleWindowClosingSignal(void) const;
    GetEventHandlePtr getHandleWindowClosedSignal(void) const;
    GetEventHandlePtr getHandleWindowIconifiedSignal(void) const;
    GetEventHandlePtr getHandleWindowDeiconifiedSignal(void) const;
    GetEventHandlePtr getHandleWindowActivatedSignal(void) const;
    GetEventHandlePtr getHandleWindowDeactivatedSignal(void) const;
    GetEventHandlePtr getHandleWindowEnteredSignal(void) const;
    GetEventHandlePtr getHandleWindowExitedSignal(void) const;
    GetEventHandlePtr getHandleMouseClickedSignal(void) const;
    GetEventHandlePtr getHandleMouseEnteredSignal(void) const;
    GetEventHandlePtr getHandleMouseExitedSignal(void) const;
    GetEventHandlePtr getHandleMousePressedSignal(void) const;
    GetEventHandlePtr getHandleMouseReleasedSignal(void) const;
    GetEventHandlePtr getHandleMouseMovedSignal(void) const;
    GetEventHandlePtr getHandleMouseDraggedSignal(void) const;
    GetEventHandlePtr getHandleMouseWheelMovedSignal(void) const;
    GetEventHandlePtr getHandleKeyPressedSignal(void) const;
    GetEventHandlePtr getHandleKeyReleasedSignal(void) const;
    GetEventHandlePtr getHandleKeyTypedSignal(void) const;
    GetEventHandlePtr getHandleUpdateSignal(void) const;
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecNodePtr      *getSFRoot            (void) const;
                  SFUnrecNodePtr      *editSFRoot           (void);
            const SFUnrecTransformPtr *getSFRootCore        (void) const;
                  SFUnrecTransformPtr *editSFRootCore       (void);
            const SFUnrecNodePtr      *getSFDefaultCameraBeacon (void) const;
                  SFUnrecNodePtr      *editSFDefaultCameraBeacon(void);
            const SFUnrecTransformPtr *getSFDefaultCameraBeaconCore (void) const;
                  SFUnrecTransformPtr *editSFDefaultCameraBeaconCore(void);

                  SFUInt32            *editSFGenericMethodIDs(void);
            const SFUInt32            *getSFGenericMethodIDs (void) const;


                  Node * getRoot           (void) const;

                  Transform * getRootCore       (void) const;

                  Node * getDefaultCameraBeacon(void) const;

                  Transform * getDefaultCameraBeaconCore(void) const;

                  UInt32              &editGenericMethodIDs(void);
                  UInt32               getGenericMethodIDs (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setRoot           (Node * const value);
            void setRootCore       (Transform * const value);
            void setDefaultCameraBeacon(Node * const value);
            void setDefaultCameraBeaconCore(Transform * const value);
            void setGenericMethodIDs(const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Event Producer Firing                    */
    /*! \{                                                                 */

    virtual void produceEvent       (UInt32 eventId, EventDetails* const e);
    
    void produceSceneEntered        (SceneEnteredEventDetailsType* const e);
    void produceSceneExited         (SceneExitedEventDetailsType* const e);
    void produceSceneStarted        (SceneStartedEventDetailsType* const e);
    void produceSceneEnded          (SceneEndedEventDetailsType* const e);
    void produceSceneReset          (SceneResetEventDetailsType* const e);
    void produceWindowOpened        (WindowOpenedEventDetailsType* const e);
    void produceWindowClosing       (WindowClosingEventDetailsType* const e);
    void produceWindowClosed        (WindowClosedEventDetailsType* const e);
    void produceWindowIconified     (WindowIconifiedEventDetailsType* const e);
    void produceWindowDeiconified   (WindowDeiconifiedEventDetailsType* const e);
    void produceWindowActivated     (WindowActivatedEventDetailsType* const e);
    void produceWindowDeactivated   (WindowDeactivatedEventDetailsType* const e);
    void produceWindowEntered       (WindowEnteredEventDetailsType* const e);
    void produceWindowExited        (WindowExitedEventDetailsType* const e);
    void produceMouseClicked        (MouseClickedEventDetailsType* const e);
    void produceMouseEntered        (MouseEnteredEventDetailsType* const e);
    void produceMouseExited         (MouseExitedEventDetailsType* const e);
    void produceMousePressed        (MousePressedEventDetailsType* const e);
    void produceMouseReleased       (MouseReleasedEventDetailsType* const e);
    void produceMouseMoved          (MouseMovedEventDetailsType* const e);
    void produceMouseDragged        (MouseDraggedEventDetailsType* const e);
    void produceMouseWheelMoved     (MouseWheelMovedEventDetailsType* const e);
    void produceKeyPressed          (KeyPressedEventDetailsType* const e);
    void produceKeyReleased         (KeyReleasedEventDetailsType* const e);
    void produceKeyTyped            (KeyTypedEventDetailsType* const e);
    void produceUpdate              (UpdateEventDetailsType* const e);
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SceneBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/
    static EventDescription   *_eventDesc[];
    static EventProducerType _producerType;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SceneBase &source);
};

typedef SceneBase *SceneBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSCENEBASE_H_ */
