/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Inherited swig_types[0]
#define SWIGTYPE_p_MFChildrenType swig_types[1]
#define SWIGTYPE_p_MatrixType swig_types[2]
#define SWIGTYPE_p_OSG__Activity swig_types[3]
#define SWIGTYPE_p_OSG__ActivityRefPtr swig_types[4]
#define SWIGTYPE_p_OSG__Animation swig_types[5]
#define SWIGTYPE_p_OSG__AnimationRefPtr swig_types[6]
#define SWIGTYPE_p_OSG__ApplicationPlayer swig_types[7]
#define SWIGTYPE_p_OSG__Attachment swig_types[8]
#define SWIGTYPE_p_OSG__AttachmentContainer swig_types[9]
#define SWIGTYPE_p_OSG__AttachmentContainerRefPtr swig_types[10]
#define SWIGTYPE_p_OSG__AttachmentRefPtr swig_types[11]
#define SWIGTYPE_p_OSG__Behavior swig_types[12]
#define SWIGTYPE_p_OSG__BehaviorFactory swig_types[13]
#define SWIGTYPE_p_OSG__BehaviorRefPtr swig_types[14]
#define SWIGTYPE_p_OSG__BehaviorType swig_types[15]
#define SWIGTYPE_p_OSG__Camera swig_types[16]
#define SWIGTYPE_p_OSG__CameraRefPtr swig_types[17]
#define SWIGTYPE_p_OSG__Component swig_types[18]
#define SWIGTYPE_p_OSG__ComponentRefPtr swig_types[19]
#define SWIGTYPE_p_OSG__DataType swig_types[20]
#define SWIGTYPE_p_OSG__Distribution1D swig_types[21]
#define SWIGTYPE_p_OSG__Distribution1DRefPtr swig_types[22]
#define SWIGTYPE_p_OSG__Distribution2D swig_types[23]
#define SWIGTYPE_p_OSG__Distribution2DRefPtr swig_types[24]
#define SWIGTYPE_p_OSG__Distribution3D swig_types[25]
#define SWIGTYPE_p_OSG__Distribution3DRefPtr swig_types[26]
#define SWIGTYPE_p_OSG__Effect swig_types[27]
#define SWIGTYPE_p_OSG__EffectRefPtr swig_types[28]
#define SWIGTYPE_p_OSG__EventDescription swig_types[29]
#define SWIGTYPE_p_OSG__EventDetails swig_types[30]
#define SWIGTYPE_p_OSG__EventDetailsRefPtr swig_types[31]
#define SWIGTYPE_p_OSG__EventProducerType swig_types[32]
#define SWIGTYPE_p_OSG__FieldContainer swig_types[33]
#define SWIGTYPE_p_OSG__FieldContainerRefPtr swig_types[34]
#define SWIGTYPE_p_OSG__FieldContainerType swig_types[35]
#define SWIGTYPE_p_OSG__FieldDescriptionBase swig_types[36]
#define SWIGTYPE_p_OSG__FieldType swig_types[37]
#define SWIGTYPE_p_OSG__GenericEventDetails swig_types[38]
#define SWIGTYPE_p_OSG__GenericEventDetailsRefPtr swig_types[39]
#define SWIGTYPE_p_OSG__Geometry swig_types[40]
#define SWIGTYPE_p_OSG__GeometryRefPtr swig_types[41]
#define SWIGTYPE_p_OSG__Image swig_types[42]
#define SWIGTYPE_p_OSG__ImageRefPtr swig_types[43]
#define SWIGTYPE_p_OSG__LuaActivity swig_types[44]
#define SWIGTYPE_p_OSG__LuaActivityRefPtr swig_types[45]
#define SWIGTYPE_p_OSG__LuaBehavior swig_types[46]
#define SWIGTYPE_p_OSG__LuaBehaviorRefPtr swig_types[47]
#define SWIGTYPE_p_OSG__LuaBehaviorType swig_types[48]
#define SWIGTYPE_p_OSG__Node swig_types[49]
#define SWIGTYPE_p_OSG__NodeCore swig_types[50]
#define SWIGTYPE_p_OSG__NodeCoreRefPtr swig_types[51]
#define SWIGTYPE_p_OSG__NodeRefPtr swig_types[52]
#define SWIGTYPE_p_OSG__ParticleSystem swig_types[53]
#define SWIGTYPE_p_OSG__ParticleSystemRefPtr swig_types[54]
#define SWIGTYPE_p_OSG__PhysicsBody swig_types[55]
#define SWIGTYPE_p_OSG__PhysicsBodyRefPtr swig_types[56]
#define SWIGTYPE_p_OSG__PhysicsHandler swig_types[57]
#define SWIGTYPE_p_OSG__PhysicsHandlerRefPtr swig_types[58]
#define SWIGTYPE_p_OSG__PhysicsSpace swig_types[59]
#define SWIGTYPE_p_OSG__PhysicsSpaceRefPtr swig_types[60]
#define SWIGTYPE_p_OSG__PhysicsWorld swig_types[61]
#define SWIGTYPE_p_OSG__PhysicsWorldRefPtr swig_types[62]
#define SWIGTYPE_p_OSG__Project swig_types[63]
#define SWIGTYPE_p_OSG__ProjectRefPtr swig_types[64]
#define SWIGTYPE_p_OSG__ReflexiveContainer swig_types[65]
#define SWIGTYPE_p_OSG__ReflexiveContainerType swig_types[66]
#define SWIGTYPE_p_OSG__Scene swig_types[67]
#define SWIGTYPE_p_OSG__SceneObject swig_types[68]
#define SWIGTYPE_p_OSG__SceneObjectRefPtr swig_types[69]
#define SWIGTYPE_p_OSG__SceneRefPtr swig_types[70]
#define SWIGTYPE_p_OSG__Sound swig_types[71]
#define SWIGTYPE_p_OSG__SoundGroup swig_types[72]
#define SWIGTYPE_p_OSG__SoundGroupRefPtr swig_types[73]
#define SWIGTYPE_p_OSG__SoundRefPtr swig_types[74]
#define SWIGTYPE_p_OSG__TextureObjChunk swig_types[75]
#define SWIGTYPE_p_OSG__TextureObjChunkRefPtr swig_types[76]
#define SWIGTYPE_p_OSG__TypeBase swig_types[77]
#define SWIGTYPE_p_OSG__VideoWrapper swig_types[78]
#define SWIGTYPE_p_OSG__VideoWrapperRefPtr swig_types[79]
#define SWIGTYPE_p_OSG__Viewport swig_types[80]
#define SWIGTYPE_p_OSG__ViewportRefPtr swig_types[81]
#define SWIGTYPE_p_OSG__WindowEventProducer swig_types[82]
#define SWIGTYPE_p_OSG__WindowEventProducerRefPtr swig_types[83]
#define SWIGTYPE_p_ParentContainer swig_types[84]
#define SWIGTYPE_p_PlaneSet swig_types[85]
#define SWIGTYPE_p_PointType swig_types[86]
#define SWIGTYPE_p_PointType3f swig_types[87]
#define SWIGTYPE_p_QuaternionType swig_types[88]
#define SWIGTYPE_p_SFCoreType swig_types[89]
#define SWIGTYPE_p_SFParentType swig_types[90]
#define SWIGTYPE_p_SFTravMaskType swig_types[91]
#define SWIGTYPE_p_SFVolumeType swig_types[92]
#define SWIGTYPE_p_TypeObject swig_types[93]
#define SWIGTYPE_p_ValueType swig_types[94]
#define SWIGTYPE_p_VectorType swig_types[95]
#define SWIGTYPE_p_VectorType3f swig_types[96]
#define SWIGTYPE_p_VolumeType swig_types[97]
#define SWIGTYPE_p_boost__signals2__connection swig_types[98]
#define SWIGTYPE_p_char swig_types[99]
#define SWIGTYPE_p_difference_type swig_types[100]
#define SWIGTYPE_p_double swig_types[101]
#define SWIGTYPE_p_float swig_types[102]
#define SWIGTYPE_p_int swig_types[103]
#define SWIGTYPE_p_key_type swig_types[104]
#define SWIGTYPE_p_long swig_types[105]
#define SWIGTYPE_p_long_double swig_types[106]
#define SWIGTYPE_p_mapped_type swig_types[107]
#define SWIGTYPE_p_signed_char swig_types[108]
#define SWIGTYPE_p_size_type swig_types[109]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[110]
#define SWIGTYPE_p_unsigned_char swig_types[111]
#define SWIGTYPE_p_unsigned_int swig_types[112]
#define SWIGTYPE_p_unsigned_long swig_types[113]
static swig_type_info *swig_types[115];
static swig_module_info swig_module = {swig_types, 114, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "KabalaEngine"
#define SWIG_init      luaopen_KabalaEngine
#define SWIG_init_user luaopen_KabalaEngine_user

#define SWIG_LUACODE   luaopen_KabalaEngine_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <OpenSG/OSGConfig.h>
#include <OpenSG/OSGActivity.h>
#include <OpenSG/OSGLuaActivity.h>
#include <OpenSG/OSGGenericEventDetails.h>
#include <boost/bind.hpp>
#include <OpenSG/OSGPathType.h>
#include "KELuaBindings.h"
#include "Project/KEProject.h"
#include "Project/Scene/KEScene.h"

#include "Project/Effect/KEEffect.h"
#include "Player/KEApplicationPlayer.h"

#include "Project/SceneObject/KEBehaviorFactory.h"
#include "Project/SceneObject/KEBehavior.h"
#include "Project/SceneObject/KELuaBehavior.h"
#include "Project/SceneObject/KEBehaviorType.h"
#include "Project/SceneObject/KELuaBehaviorType.h"

//#include <OpenSG/OSGWindowEventProducer.h>
#include <OpenSG/OSGSound.h>
#include <OpenSG/OSGSoundGroup.h>
#include <OpenSG/OSGSoundManager.h>
#include <OpenSG/OSGAnimation.h>
#include <OpenSG/OSGComponent.h>
#include <OpenSG/OSGParticleSystem.h>
#include <OpenSG/OSGDistribution1D.h>
#include <OpenSG/OSGDistribution1D.h>
#include <OpenSG/OSGDistribution2D.h>
#include <OpenSG/OSGDistribution3D.h>

#include <OpenSG/OSGPhysicsHandler.h>
#include <OpenSG/OSGPhysicsBody.h>
#include <OpenSG/OSGPhysicsSpace.h>
#include <OpenSG/OSGPhysicsWorld.h>

#include <OpenSG/OSGVideoWrapper.h>
#include <OpenSG/OSGVideoManager.h>

SWIGINTERN OSG::SceneRefPtr OSG_SceneRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Scene>(oIn);
        }
SWIGINTERN void OSG_Scene_produceGenericEvent(OSG::Scene *self,OSG::UInt32 GenericEventId,OSG::GenericEventDetailsRefPtr e){
            self->produceGenericEvent(GenericEventId, e);
        }
SWIGINTERN OSG::ProjectRefPtr OSG_ProjectRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Project>(oIn);
        }

  int SWIG_lua_isnilstring(lua_State *L, int idx) {
    int ret = lua_isstring(L, idx);
    if (!ret)
     ret = lua_isnil(L, idx);
    return ret;
  }

SWIGINTERN OSG::SceneObjectRefPtr OSG_SceneObjectRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::SceneObject>(oIn);
        }
SWIGINTERN OSG::BehaviorRefPtr OSG_SceneObject_getBehaviors(OSG::SceneObject *self,OSG::UInt32 index){
            return self->getBehaviors(index);
        }
SWIGINTERN OSG::UInt32 OSG_BehaviorFactory_registerType(OSG::BehaviorFactory *self,OSG::BehaviorType *pType){
            return OSG::BehaviorFactory::the()->registerType(pType);
        }
SWIGINTERN OSG::UInt32 OSG_BehaviorFactory_findTypeId(OSG::BehaviorFactory *self,OSG::Char8 const *szName){
            return OSG::BehaviorFactory::the()->findTypeId(szName);
        }
SWIGINTERN OSG::BehaviorType *OSG_BehaviorFactory_findType__SWIG_0(OSG::BehaviorFactory *self,OSG::UInt32 uiTypeId){
            return OSG::BehaviorFactory::the()->findType(uiTypeId);
        }
SWIGINTERN OSG::BehaviorType *OSG_BehaviorFactory_findType__SWIG_1(OSG::BehaviorFactory *self,OSG::Char8 const *szName){
            return OSG::BehaviorFactory::the()->findType(szName);
        }
SWIGINTERN OSG::BehaviorRefPtr OSG_BehaviorFactory_createBehavior(OSG::BehaviorFactory *self,std::string Name){
            return OSG::BehaviorFactory::the()->createBehavior(Name);
        }
SWIGINTERN OSG::SceneObjectRefPtr OSG_Behavior_getParentSceneObject(OSG::Behavior const *self){
            return self->getParentSceneObject();
        }
SWIGINTERN void OSG_Behavior_produceEvent__SWIG_0(OSG::Behavior *self,std::string name,OSG::GenericEventDetailsRefPtr eventData=NULL){
            self->produceEvent(name, eventData);
        }
SWIGINTERN void OSG_Behavior_produceEvent__SWIG_2(OSG::Behavior *self,OSG::UInt32 id,OSG::GenericEventDetailsRefPtr eventData=NULL){
            self->produceEvent(id, eventData);
        }
SWIGINTERN OSG::BehaviorRefPtr OSG_BehaviorRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Behavior>(oIn);
        }
SWIGINTERN OSG::LuaBehaviorRefPtr OSG_LuaBehaviorRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::LuaBehavior>(oIn);
        }
SWIGINTERN OSG::SceneObjectRefPtr OSG_Effect_getParentSceneObject(OSG::Effect const *self){
            return self->getParentSceneObject();
        }
SWIGINTERN OSG::EffectRefPtr OSG_EffectRefPtr_dcast(OSG::FieldContainerRefPtr const oIn){
            return OSG::dynamic_pointer_cast<OSG::Effect>(oIn);
        }
SWIGINTERN void OSG_ApplicationPlayer_openEditor(OSG::FieldContainerRefPtr FCToEdit){
            dynamic_cast<OSG::ApplicationPlayer*>(OSG::MainApplication::the()->getPlayerMode())->openEditor(FCToEdit);
        }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_SceneRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::SceneRefPtr",0,0)
  result = (OSG::SceneRefPtr *)new OSG::SceneRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__SceneRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = 0 ;
  OSG::SceneRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::SceneRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::SceneRefPtr",1,"OSG::SceneRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("new_SceneRefPtr",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  result = (OSG::SceneRefPtr *)new OSG::SceneRefPtr((OSG::SceneRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__SceneRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SceneRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SceneRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_SceneRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::SceneRefPtr()\n"
    "    OSG::SceneRefPtr(OSG::SceneRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  OSG::Scene *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::SceneRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr___deref__",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  result = (OSG::Scene *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Scene,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::SceneRefPtr result;
  
  SWIG_check_num_args("OSG_SceneRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_SceneRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_SceneRefPtr_dcast(arg1);
  {
    OSG::SceneRefPtr * resultptr = new OSG::SceneRefPtr((const OSG::SceneRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_isStarted(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isStarted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isStarted",1,"OSG::SceneRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_isStarted",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  result = (bool)(*arg1)->isStarted();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_blockInput(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("blockInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blockInput",1,"OSG::SceneRefPtr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("blockInput",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_blockInput",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (*arg1)->blockInput(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_isInputBlocked(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInputBlocked",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInputBlocked",1,"OSG::SceneRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_isInputBlocked",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  result = (bool)(*arg1)->isInputBlocked();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_registerNewGenericEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("registerNewGenericEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerNewGenericEvent",1,"OSG::SceneRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("registerNewGenericEvent",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("registerNewGenericEvent",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_registerNewGenericEvent",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (OSG::UInt32)(*arg1)->registerNewGenericEvent((std::string const &)*arg2,(std::string const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_registerNewGenericEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("registerNewGenericEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerNewGenericEvent",1,"OSG::SceneRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("registerNewGenericEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_registerNewGenericEvent",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (OSG::UInt32)(*arg1)->registerNewGenericEvent((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_registerNewGenericEvent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneRefPtr_registerNewGenericEvent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneRefPtr_registerNewGenericEvent__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneRefPtr_registerNewGenericEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    registerNewGenericEvent(OSG::SceneRefPtr *,std::string const &,std::string const &)\n"
    "    registerNewGenericEvent(OSG::SceneRefPtr *,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneRefPtr_unregisterNewGenericEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("unregisterNewGenericEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unregisterNewGenericEvent",1,"OSG::SceneRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("unregisterNewGenericEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_unregisterNewGenericEvent",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->unregisterNewGenericEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_unregisterNewGenericEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("unregisterNewGenericEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unregisterNewGenericEvent",1,"OSG::SceneRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("unregisterNewGenericEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_unregisterNewGenericEvent",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)(*arg1)->unregisterNewGenericEvent((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_unregisterNewGenericEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneRefPtr_unregisterNewGenericEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneRefPtr_unregisterNewGenericEvent__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneRefPtr_unregisterNewGenericEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    unregisterNewGenericEvent(OSG::SceneRefPtr *,OSG::UInt32)\n"
    "    unregisterNewGenericEvent(OSG::SceneRefPtr *,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneRefPtr_isGenericEventDefined__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isGenericEventDefined",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isGenericEventDefined",1,"OSG::SceneRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isGenericEventDefined",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_isGenericEventDefined",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isGenericEventDefined(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_isGenericEventDefined__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("isGenericEventDefined",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isGenericEventDefined",1,"OSG::SceneRefPtr const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("isGenericEventDefined",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_isGenericEventDefined",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)(*arg1)->isGenericEventDefined((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_isGenericEventDefined(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneRefPtr_isGenericEventDefined__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneRefPtr_isGenericEventDefined__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneRefPtr_isGenericEventDefined'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isGenericEventDefined(OSG::SceneRefPtr const *,OSG::UInt32)\n"
    "    isGenericEventDefined(OSG::SceneRefPtr const *,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneRefPtr_getGenericEventId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getGenericEventId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGenericEventId",1,"OSG::SceneRefPtr const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getGenericEventId",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_getGenericEventId",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (OSG::UInt32)(*arg1)->getGenericEventId((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneRefPtr_produceGenericEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::GenericEventDetailsRefPtr arg3 ;
  OSG::GenericEventDetailsRefPtr *argp3 ;
  
  SWIG_check_num_args("produceGenericEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceGenericEvent",1,"OSG::SceneRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("produceGenericEvent",2,"OSG::UInt32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("produceGenericEvent",3,"OSG::GenericEventDetailsRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_produceGenericEvent",1,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,0))){
    SWIG_fail_ptr("SceneRefPtr_produceGenericEvent",3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr);
  }
  arg3 = *argp3;
  
  OSG_Scene_produceGenericEvent((OSG::Scene*)(arg1)->operator ->(),arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SceneRefPtr(void *obj) {
OSG::SceneRefPtr *arg1 = (OSG::SceneRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_SceneRefPtr_methods[] = {
    {"__deref__", _wrap_SceneRefPtr___deref__}, 
    {"isStarted", _wrap_SceneRefPtr_isStarted}, 
    {"blockInput", _wrap_SceneRefPtr_blockInput}, 
    {"isInputBlocked", _wrap_SceneRefPtr_isInputBlocked}, 
    {"registerNewGenericEvent", _wrap_SceneRefPtr_registerNewGenericEvent}, 
    {"unregisterNewGenericEvent", _wrap_SceneRefPtr_unregisterNewGenericEvent}, 
    {"isGenericEventDefined", _wrap_SceneRefPtr_isGenericEventDefined}, 
    {"getGenericEventId", _wrap_SceneRefPtr_getGenericEventId}, 
    {"produceGenericEvent", _wrap_SceneRefPtr_produceGenericEvent}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_SceneRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_SceneRefPtr_bases[] = {0,0};
static const char *swig_OSG_SceneRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_SceneRefPtr = { "SceneRefPtr", &SWIGTYPE_p_OSG__SceneRefPtr,_wrap_new_SceneRefPtr, swig_delete_SceneRefPtr, swig_OSG_SceneRefPtr_methods, swig_OSG_SceneRefPtr_attributes, swig_OSG_SceneRefPtr_bases, swig_OSG_SceneRefPtr_base_names };

static int _wrap_Scene_isStarted(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Scene *arg1 = (OSG::Scene *) 0 ;
  bool result;
  
  SWIG_check_num_args("isStarted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isStarted",1,"OSG::Scene const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Scene,0))){
    SWIG_fail_ptr("Scene_isStarted",1,SWIGTYPE_p_OSG__Scene);
  }
  
  result = (bool)((OSG::Scene const *)arg1)->isStarted();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_blockInput(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Scene *arg1 = (OSG::Scene *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("blockInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blockInput",1,"OSG::Scene *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("blockInput",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Scene,0))){
    SWIG_fail_ptr("Scene_blockInput",1,SWIGTYPE_p_OSG__Scene);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->blockInput(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_isInputBlocked(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Scene *arg1 = (OSG::Scene *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInputBlocked",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInputBlocked",1,"OSG::Scene const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Scene,0))){
    SWIG_fail_ptr("Scene_isInputBlocked",1,SWIGTYPE_p_OSG__Scene);
  }
  
  result = (bool)((OSG::Scene const *)arg1)->isInputBlocked();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_registerNewGenericEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Scene *arg1 = (OSG::Scene *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("registerNewGenericEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerNewGenericEvent",1,"OSG::Scene *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("registerNewGenericEvent",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("registerNewGenericEvent",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Scene,0))){
    SWIG_fail_ptr("Scene_registerNewGenericEvent",1,SWIGTYPE_p_OSG__Scene);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = (OSG::UInt32)(arg1)->registerNewGenericEvent((std::string const &)*arg2,(std::string const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_registerNewGenericEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Scene *arg1 = (OSG::Scene *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("registerNewGenericEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerNewGenericEvent",1,"OSG::Scene *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("registerNewGenericEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Scene,0))){
    SWIG_fail_ptr("Scene_registerNewGenericEvent",1,SWIGTYPE_p_OSG__Scene);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (OSG::UInt32)(arg1)->registerNewGenericEvent((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_registerNewGenericEvent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Scene_registerNewGenericEvent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Scene_registerNewGenericEvent__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Scene_registerNewGenericEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    registerNewGenericEvent(OSG::Scene *,std::string const &,std::string const &)\n"
    "    registerNewGenericEvent(OSG::Scene *,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_unregisterNewGenericEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Scene *arg1 = (OSG::Scene *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("unregisterNewGenericEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unregisterNewGenericEvent",1,"OSG::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("unregisterNewGenericEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Scene,0))){
    SWIG_fail_ptr("Scene_unregisterNewGenericEvent",1,SWIGTYPE_p_OSG__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(arg1)->unregisterNewGenericEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_unregisterNewGenericEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Scene *arg1 = (OSG::Scene *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("unregisterNewGenericEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unregisterNewGenericEvent",1,"OSG::Scene *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("unregisterNewGenericEvent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Scene,0))){
    SWIG_fail_ptr("Scene_unregisterNewGenericEvent",1,SWIGTYPE_p_OSG__Scene);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->unregisterNewGenericEvent((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_unregisterNewGenericEvent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Scene_unregisterNewGenericEvent__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Scene_unregisterNewGenericEvent__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Scene_unregisterNewGenericEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    unregisterNewGenericEvent(OSG::Scene *,OSG::UInt32)\n"
    "    unregisterNewGenericEvent(OSG::Scene *,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_isGenericEventDefined__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Scene *arg1 = (OSG::Scene *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isGenericEventDefined",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isGenericEventDefined",1,"OSG::Scene const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isGenericEventDefined",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Scene,0))){
    SWIG_fail_ptr("Scene_isGenericEventDefined",1,SWIGTYPE_p_OSG__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)((OSG::Scene const *)arg1)->isGenericEventDefined(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_isGenericEventDefined__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Scene *arg1 = (OSG::Scene *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("isGenericEventDefined",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isGenericEventDefined",1,"OSG::Scene const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("isGenericEventDefined",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Scene,0))){
    SWIG_fail_ptr("Scene_isGenericEventDefined",1,SWIGTYPE_p_OSG__Scene);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (bool)((OSG::Scene const *)arg1)->isGenericEventDefined((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_isGenericEventDefined(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Scene_isGenericEventDefined__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Scene_isGenericEventDefined__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Scene_isGenericEventDefined'\n"
    "  Possible C/C++ prototypes are:\n"
    "    isGenericEventDefined(OSG::Scene const *,OSG::UInt32)\n"
    "    isGenericEventDefined(OSG::Scene const *,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_getGenericEventId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Scene *arg1 = (OSG::Scene *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getGenericEventId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGenericEventId",1,"OSG::Scene const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getGenericEventId",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Scene,0))){
    SWIG_fail_ptr("Scene_getGenericEventId",1,SWIGTYPE_p_OSG__Scene);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (OSG::UInt32)((OSG::Scene const *)arg1)->getGenericEventId((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_produceGenericEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Scene *arg1 = (OSG::Scene *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::GenericEventDetailsRefPtr arg3 ;
  OSG::GenericEventDetailsRefPtr *argp3 ;
  
  SWIG_check_num_args("produceGenericEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceGenericEvent",1,"OSG::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("produceGenericEvent",2,"OSG::UInt32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("produceGenericEvent",3,"OSG::GenericEventDetailsRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Scene,0))){
    SWIG_fail_ptr("Scene_produceGenericEvent",1,SWIGTYPE_p_OSG__Scene);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,0))){
    SWIG_fail_ptr("Scene_produceGenericEvent",3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr);
  }
  arg3 = *argp3;
  
  OSG_Scene_produceGenericEvent(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_Scene_methods[] = {
    {"isStarted", _wrap_Scene_isStarted}, 
    {"blockInput", _wrap_Scene_blockInput}, 
    {"isInputBlocked", _wrap_Scene_isInputBlocked}, 
    {"registerNewGenericEvent", _wrap_Scene_registerNewGenericEvent}, 
    {"unregisterNewGenericEvent", _wrap_Scene_unregisterNewGenericEvent}, 
    {"isGenericEventDefined", _wrap_Scene_isGenericEventDefined}, 
    {"getGenericEventId", _wrap_Scene_getGenericEventId}, 
    {"produceGenericEvent", _wrap_Scene_produceGenericEvent}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Scene_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Scene_bases[] = {0};
static const char *swig_OSG_Scene_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_Scene = { "Scene", &SWIGTYPE_p_OSG__Scene,0,0, swig_OSG_Scene_methods, swig_OSG_Scene_attributes, swig_OSG_Scene_bases, swig_OSG_Scene_base_names };

static int _wrap_new_ProjectRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ProjectRefPtr",0,0)
  result = (OSG::ProjectRefPtr *)new OSG::ProjectRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ProjectRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProjectRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = 0 ;
  OSG::ProjectRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::ProjectRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::ProjectRefPtr",1,"OSG::ProjectRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("new_ProjectRefPtr",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (OSG::ProjectRefPtr *)new OSG::ProjectRefPtr((OSG::ProjectRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__ProjectRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProjectRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ProjectRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ProjectRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_ProjectRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::ProjectRefPtr()\n"
    "    OSG::ProjectRefPtr(OSG::ProjectRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ProjectRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::Project *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::ProjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr___deref__",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (OSG::Project *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Project,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::ProjectRefPtr result;
  
  SWIG_check_num_args("OSG_ProjectRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_ProjectRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_ProjectRefPtr_dcast(arg1);
  {
    OSG::ProjectRefPtr * resultptr = new OSG::ProjectRefPtr((const OSG::ProjectRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__ProjectRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_start(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  
  SWIG_check_num_args("start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("start",1,"OSG::ProjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_start",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  (*arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_reset(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  
  SWIG_check_num_args("reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reset",1,"OSG::ProjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_reset",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  (*arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_stop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  
  SWIG_check_num_args("stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::ProjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_stop",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  (*arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_setActiveScene(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::SceneRefPtr arg2 ;
  OSG::SceneRefPtr *argp2 ;
  
  SWIG_check_num_args("setActiveScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setActiveScene",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setActiveScene",2,"OSG::SceneRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_setActiveScene",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_setActiveScene",2,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  arg2 = *argp2;
  
  (*arg1)->setActiveScene(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getActiveScene(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::SceneRefPtr result;
  
  SWIG_check_num_args("getActiveScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getActiveScene",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getActiveScene",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (*arg1)->getActiveScene();
  {
    OSG::SceneRefPtr * resultptr = new OSG::SceneRefPtr((const OSG::SceneRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_setActiveNode(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::NodeRefPtr arg2 ;
  OSG::NodeRefPtr *argp2 ;
  
  SWIG_check_num_args("setActiveNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setActiveNode",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setActiveNode",2,"OSG::NodeRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_setActiveNode",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_setActiveNode",2,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg2 = *argp2;
  
  (*arg1)->setActiveNode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_addActiveAnimation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::AnimationRefPtr arg2 ;
  OSG::AnimationRefPtr *argp2 ;
  
  SWIG_check_num_args("addActiveAnimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addActiveAnimation",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addActiveAnimation",2,"OSG::AnimationRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_addActiveAnimation",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_addActiveAnimation",2,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  arg2 = *argp2;
  
  (*arg1)->addActiveAnimation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_removeActiveAnimation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::AnimationRefPtr arg2 ;
  OSG::AnimationRefPtr *argp2 ;
  
  SWIG_check_num_args("removeActiveAnimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeActiveAnimation",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("removeActiveAnimation",2,"OSG::AnimationRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_removeActiveAnimation",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_removeActiveAnimation",2,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  arg2 = *argp2;
  
  (*arg1)->removeActiveAnimation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_addActiveParticleSystem(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::ParticleSystemRefPtr arg2 ;
  OSG::ParticleSystemRefPtr *argp2 ;
  
  SWIG_check_num_args("addActiveParticleSystem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addActiveParticleSystem",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addActiveParticleSystem",2,"OSG::ParticleSystemRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_addActiveParticleSystem",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_addActiveParticleSystem",2,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  arg2 = *argp2;
  
  (*arg1)->addActiveParticleSystem(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_removeActiveParticleSystem(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::ParticleSystemRefPtr arg2 ;
  OSG::ParticleSystemRefPtr *argp2 ;
  
  SWIG_check_num_args("removeActiveParticleSystem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeActiveParticleSystem",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("removeActiveParticleSystem",2,"OSG::ParticleSystemRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_removeActiveParticleSystem",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_removeActiveParticleSystem",2,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  arg2 = *argp2;
  
  (*arg1)->removeActiveParticleSystem(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_pauseActiveUpdates(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  
  SWIG_check_num_args("pauseActiveUpdates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pauseActiveUpdates",1,"OSG::ProjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_pauseActiveUpdates",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  (*arg1)->pauseActiveUpdates();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_unpauseActiveUpdates(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  
  SWIG_check_num_args("unpauseActiveUpdates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpauseActiveUpdates",1,"OSG::ProjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_unpauseActiveUpdates",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  (*arg1)->unpauseActiveUpdates();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_togglePauseActiveUpdates(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  
  SWIG_check_num_args("togglePauseActiveUpdates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("togglePauseActiveUpdates",1,"OSG::ProjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_togglePauseActiveUpdates",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  (*arg1)->togglePauseActiveUpdates();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getLastActiveScene(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::SceneRefPtr result;
  
  SWIG_check_num_args("getLastActiveScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLastActiveScene",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getLastActiveScene",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (*arg1)->getLastActiveScene();
  {
    OSG::SceneRefPtr * resultptr = new OSG::SceneRefPtr((const OSG::SceneRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_addAttachment",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ProjectRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ProjectRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ProjectRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::ProjectRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::ProjectRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ProjectRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_subAttachment",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ProjectRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ProjectRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ProjectRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::ProjectRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::ProjectRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ProjectRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ProjectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ProjectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ProjectRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::ProjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("ProjectRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ProjectRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ProjectRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ProjectRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ProjectRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ProjectRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::ProjectRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::ProjectRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::ProjectRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::ProjectRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ProjectRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::ProjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getType",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getTypeId",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getGroupId",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getTypeName",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getProducerType",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getId",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getNumFields",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::ProjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::ProjectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_attachActivity",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("ProjectRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::ProjectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::ProjectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::ProjectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::ProjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ProjectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::ProjectRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ProjectRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ProjectRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ProjectRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::ProjectRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::ProjectRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_ProjectRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ProjectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::ProjectRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__ProjectRefPtr,0))){
    SWIG_fail_ptr("ProjectRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__ProjectRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProjectRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ProjectRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__ProjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ProjectRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'ProjectRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::ProjectRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::ProjectRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_ProjectRefPtr(void *obj) {
OSG::ProjectRefPtr *arg1 = (OSG::ProjectRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_ProjectRefPtr_methods[] = {
    {"__deref__", _wrap_ProjectRefPtr___deref__}, 
    {"start", _wrap_ProjectRefPtr_start}, 
    {"reset", _wrap_ProjectRefPtr_reset}, 
    {"stop", _wrap_ProjectRefPtr_stop}, 
    {"setActiveScene", _wrap_ProjectRefPtr_setActiveScene}, 
    {"getActiveScene", _wrap_ProjectRefPtr_getActiveScene}, 
    {"setActiveNode", _wrap_ProjectRefPtr_setActiveNode}, 
    {"addActiveAnimation", _wrap_ProjectRefPtr_addActiveAnimation}, 
    {"removeActiveAnimation", _wrap_ProjectRefPtr_removeActiveAnimation}, 
    {"addActiveParticleSystem", _wrap_ProjectRefPtr_addActiveParticleSystem}, 
    {"removeActiveParticleSystem", _wrap_ProjectRefPtr_removeActiveParticleSystem}, 
    {"pauseActiveUpdates", _wrap_ProjectRefPtr_pauseActiveUpdates}, 
    {"unpauseActiveUpdates", _wrap_ProjectRefPtr_unpauseActiveUpdates}, 
    {"togglePauseActiveUpdates", _wrap_ProjectRefPtr_togglePauseActiveUpdates}, 
    {"getLastActiveScene", _wrap_ProjectRefPtr_getLastActiveScene}, 
    {"addAttachment", _wrap_ProjectRefPtr_addAttachment}, 
    {"subAttachment", _wrap_ProjectRefPtr_subAttachment}, 
    {"findAttachment", _wrap_ProjectRefPtr_findAttachment}, 
    {"getType", _wrap_ProjectRefPtr_getType}, 
    {"shallowCopy", _wrap_ProjectRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_ProjectRefPtr_getTypeId}, 
    {"getGroupId", _wrap_ProjectRefPtr_getGroupId}, 
    {"getTypeName", _wrap_ProjectRefPtr_getTypeName}, 
    {"getProducerType", _wrap_ProjectRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_ProjectRefPtr_getContainerSize}, 
    {"getId", _wrap_ProjectRefPtr_getId}, 
    {"getNumFields", _wrap_ProjectRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_ProjectRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_ProjectRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_ProjectRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_ProjectRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_ProjectRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_ProjectRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_ProjectRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_ProjectRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_ProjectRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_ProjectRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ProjectRefPtr_bases[] = {0,0};
static const char *swig_OSG_ProjectRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_ProjectRefPtr = { "ProjectRefPtr", &SWIGTYPE_p_OSG__ProjectRefPtr,_wrap_new_ProjectRefPtr, swig_delete_ProjectRefPtr, swig_OSG_ProjectRefPtr_methods, swig_OSG_ProjectRefPtr_attributes, swig_OSG_ProjectRefPtr_bases, swig_OSG_ProjectRefPtr_base_names };

static int _wrap_Project_start(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  
  SWIG_check_num_args("start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("start",1,"OSG::Project *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_start",1,SWIGTYPE_p_OSG__Project);
  }
  
  (arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_reset(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  
  SWIG_check_num_args("reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reset",1,"OSG::Project *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_reset",1,SWIGTYPE_p_OSG__Project);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_stop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  
  SWIG_check_num_args("stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::Project *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_stop",1,SWIGTYPE_p_OSG__Project);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_setActiveScene(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  OSG::SceneRefPtr arg2 ;
  OSG::SceneRefPtr *argp2 ;
  
  SWIG_check_num_args("setActiveScene",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setActiveScene",1,"OSG::Project *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setActiveScene",2,"OSG::SceneRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_setActiveScene",1,SWIGTYPE_p_OSG__Project);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__SceneRefPtr,0))){
    SWIG_fail_ptr("Project_setActiveScene",2,SWIGTYPE_p_OSG__SceneRefPtr);
  }
  arg2 = *argp2;
  
  (arg1)->setActiveScene(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_getActiveScene(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  OSG::SceneRefPtr result;
  
  SWIG_check_num_args("getActiveScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getActiveScene",1,"OSG::Project const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_getActiveScene",1,SWIGTYPE_p_OSG__Project);
  }
  
  result = ((OSG::Project const *)arg1)->getActiveScene();
  {
    OSG::SceneRefPtr * resultptr = new OSG::SceneRefPtr((const OSG::SceneRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_setActiveNode(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  OSG::NodeRefPtr arg2 ;
  OSG::NodeRefPtr *argp2 ;
  
  SWIG_check_num_args("setActiveNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setActiveNode",1,"OSG::Project *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setActiveNode",2,"OSG::NodeRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_setActiveNode",1,SWIGTYPE_p_OSG__Project);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__NodeRefPtr,0))){
    SWIG_fail_ptr("Project_setActiveNode",2,SWIGTYPE_p_OSG__NodeRefPtr);
  }
  arg2 = *argp2;
  
  (arg1)->setActiveNode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_addActiveAnimation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  OSG::AnimationRefPtr arg2 ;
  OSG::AnimationRefPtr *argp2 ;
  
  SWIG_check_num_args("addActiveAnimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addActiveAnimation",1,"OSG::Project *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addActiveAnimation",2,"OSG::AnimationRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_addActiveAnimation",1,SWIGTYPE_p_OSG__Project);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("Project_addActiveAnimation",2,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  arg2 = *argp2;
  
  (arg1)->addActiveAnimation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_removeActiveAnimation(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  OSG::AnimationRefPtr arg2 ;
  OSG::AnimationRefPtr *argp2 ;
  
  SWIG_check_num_args("removeActiveAnimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeActiveAnimation",1,"OSG::Project *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("removeActiveAnimation",2,"OSG::AnimationRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_removeActiveAnimation",1,SWIGTYPE_p_OSG__Project);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__AnimationRefPtr,0))){
    SWIG_fail_ptr("Project_removeActiveAnimation",2,SWIGTYPE_p_OSG__AnimationRefPtr);
  }
  arg2 = *argp2;
  
  (arg1)->removeActiveAnimation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_addActiveParticleSystem(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  OSG::ParticleSystemRefPtr arg2 ;
  OSG::ParticleSystemRefPtr *argp2 ;
  
  SWIG_check_num_args("addActiveParticleSystem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addActiveParticleSystem",1,"OSG::Project *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addActiveParticleSystem",2,"OSG::ParticleSystemRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_addActiveParticleSystem",1,SWIGTYPE_p_OSG__Project);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("Project_addActiveParticleSystem",2,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  arg2 = *argp2;
  
  (arg1)->addActiveParticleSystem(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_removeActiveParticleSystem(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  OSG::ParticleSystemRefPtr arg2 ;
  OSG::ParticleSystemRefPtr *argp2 ;
  
  SWIG_check_num_args("removeActiveParticleSystem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeActiveParticleSystem",1,"OSG::Project *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("removeActiveParticleSystem",2,"OSG::ParticleSystemRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_removeActiveParticleSystem",1,SWIGTYPE_p_OSG__Project);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OSG__ParticleSystemRefPtr,0))){
    SWIG_fail_ptr("Project_removeActiveParticleSystem",2,SWIGTYPE_p_OSG__ParticleSystemRefPtr);
  }
  arg2 = *argp2;
  
  (arg1)->removeActiveParticleSystem(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_pauseActiveUpdates(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  
  SWIG_check_num_args("pauseActiveUpdates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pauseActiveUpdates",1,"OSG::Project *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_pauseActiveUpdates",1,SWIGTYPE_p_OSG__Project);
  }
  
  (arg1)->pauseActiveUpdates();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_unpauseActiveUpdates(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  
  SWIG_check_num_args("unpauseActiveUpdates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpauseActiveUpdates",1,"OSG::Project *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_unpauseActiveUpdates",1,SWIGTYPE_p_OSG__Project);
  }
  
  (arg1)->unpauseActiveUpdates();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_togglePauseActiveUpdates(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  
  SWIG_check_num_args("togglePauseActiveUpdates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("togglePauseActiveUpdates",1,"OSG::Project *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_togglePauseActiveUpdates",1,SWIGTYPE_p_OSG__Project);
  }
  
  (arg1)->togglePauseActiveUpdates();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Project_getLastActiveScene(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Project *arg1 = (OSG::Project *) 0 ;
  OSG::SceneRefPtr result;
  
  SWIG_check_num_args("getLastActiveScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLastActiveScene",1,"OSG::Project const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Project,0))){
    SWIG_fail_ptr("Project_getLastActiveScene",1,SWIGTYPE_p_OSG__Project);
  }
  
  result = ((OSG::Project const *)arg1)->getLastActiveScene();
  {
    OSG::SceneRefPtr * resultptr = new OSG::SceneRefPtr((const OSG::SceneRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_Project_methods[] = {
    {"start", _wrap_Project_start}, 
    {"reset", _wrap_Project_reset}, 
    {"stop", _wrap_Project_stop}, 
    {"setActiveScene", _wrap_Project_setActiveScene}, 
    {"getActiveScene", _wrap_Project_getActiveScene}, 
    {"setActiveNode", _wrap_Project_setActiveNode}, 
    {"addActiveAnimation", _wrap_Project_addActiveAnimation}, 
    {"removeActiveAnimation", _wrap_Project_removeActiveAnimation}, 
    {"addActiveParticleSystem", _wrap_Project_addActiveParticleSystem}, 
    {"removeActiveParticleSystem", _wrap_Project_removeActiveParticleSystem}, 
    {"pauseActiveUpdates", _wrap_Project_pauseActiveUpdates}, 
    {"unpauseActiveUpdates", _wrap_Project_unpauseActiveUpdates}, 
    {"togglePauseActiveUpdates", _wrap_Project_togglePauseActiveUpdates}, 
    {"getLastActiveScene", _wrap_Project_getLastActiveScene}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Project_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Project_bases[] = {0,0};
static const char *swig_OSG_Project_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Project = { "Project", &SWIGTYPE_p_OSG__Project,0,0, swig_OSG_Project_methods, swig_OSG_Project_attributes, swig_OSG_Project_bases, swig_OSG_Project_base_names };

static int _wrap_new_SceneObjectRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::SceneObjectRefPtr",0,0)
  result = (OSG::SceneObjectRefPtr *)new OSG::SceneObjectRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__SceneObjectRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneObjectRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = 0 ;
  OSG::SceneObjectRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::SceneObjectRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::SceneObjectRefPtr",1,"OSG::SceneObjectRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("new_SceneObjectRefPtr",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (OSG::SceneObjectRefPtr *)new OSG::SceneObjectRefPtr((OSG::SceneObjectRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__SceneObjectRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SceneObjectRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SceneObjectRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SceneObjectRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_SceneObjectRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::SceneObjectRefPtr()\n"
    "    OSG::SceneObjectRefPtr(OSG::SceneObjectRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneObjectRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::SceneObject *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::SceneObjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr___deref__",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (OSG::SceneObject *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__SceneObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::SceneObjectRefPtr result;
  
  SWIG_check_num_args("OSG_SceneObjectRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_SceneObjectRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_SceneObjectRefPtr_dcast(arg1);
  {
    OSG::SceneObjectRefPtr * resultptr = new OSG::SceneObjectRefPtr((const OSG::SceneObjectRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneObjectRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getEffect(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  std::string arg2 ;
  OSG::Effect *result = 0 ;
  
  SWIG_check_num_args("getEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEffect",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getEffect",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getEffect",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (OSG::Effect *)(*arg1)->getEffect(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Effect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getParentScene(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::SceneRefPtr result;
  
  SWIG_check_num_args("getParentScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentScene",1,"OSG::SceneObjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getParentScene",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (*arg1)->getParentScene();
  {
    OSG::SceneRefPtr * resultptr = new OSG::SceneRefPtr((const OSG::SceneRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getBehaviors(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::BehaviorRefPtr result;
  
  SWIG_check_num_args("getBehaviors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBehaviors",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getBehaviors",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getBehaviors",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = OSG_SceneObject_getBehaviors((OSG::SceneObject*)(arg1)->operator ->(),arg2);
  {
    OSG::BehaviorRefPtr * resultptr = new OSG::BehaviorRefPtr((const OSG::BehaviorRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__BehaviorRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_addAttachment",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_addAttachment",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneObjectRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneObjectRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneObjectRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::SceneObjectRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::SceneObjectRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneObjectRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_subAttachment",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_subAttachment",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneObjectRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneObjectRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneObjectRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::SceneObjectRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::SceneObjectRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneObjectRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SceneObjectRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneObjectRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneObjectRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SceneObjectRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneObjectRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::SceneObjectRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::SceneObjectRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::SceneObjectRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::SceneObjectRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneObjectRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::SceneObjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getType",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::SceneObjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::SceneObjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getTypeId",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::SceneObjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getGroupId",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::SceneObjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getTypeName",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::SceneObjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getProducerType",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::SceneObjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::SceneObjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getId",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::SceneObjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getNumFields",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::SceneObjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::SceneObjectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_attachActivity",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::SceneObjectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::SceneObjectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::SceneObjectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::SceneObjectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::SceneObjectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::SceneObjectRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneObjectRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneObjectRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneObjectRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::SceneObjectRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::SceneObjectRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_SceneObjectRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::SceneObjectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::SceneObjectRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObjectRefPtr,0))){
    SWIG_fail_ptr("SceneObjectRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__SceneObjectRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObjectRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneObjectRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__SceneObjectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SceneObjectRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'SceneObjectRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::SceneObjectRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::SceneObjectRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_SceneObjectRefPtr(void *obj) {
OSG::SceneObjectRefPtr *arg1 = (OSG::SceneObjectRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_SceneObjectRefPtr_methods[] = {
    {"__deref__", _wrap_SceneObjectRefPtr___deref__}, 
    {"getEffect", _wrap_SceneObjectRefPtr_getEffect}, 
    {"getParentScene", _wrap_SceneObjectRefPtr_getParentScene}, 
    {"getBehaviors", _wrap_SceneObjectRefPtr_getBehaviors}, 
    {"addAttachment", _wrap_SceneObjectRefPtr_addAttachment}, 
    {"subAttachment", _wrap_SceneObjectRefPtr_subAttachment}, 
    {"findAttachment", _wrap_SceneObjectRefPtr_findAttachment}, 
    {"getType", _wrap_SceneObjectRefPtr_getType}, 
    {"shallowCopy", _wrap_SceneObjectRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_SceneObjectRefPtr_getTypeId}, 
    {"getGroupId", _wrap_SceneObjectRefPtr_getGroupId}, 
    {"getTypeName", _wrap_SceneObjectRefPtr_getTypeName}, 
    {"getProducerType", _wrap_SceneObjectRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_SceneObjectRefPtr_getContainerSize}, 
    {"getId", _wrap_SceneObjectRefPtr_getId}, 
    {"getNumFields", _wrap_SceneObjectRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_SceneObjectRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_SceneObjectRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_SceneObjectRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_SceneObjectRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_SceneObjectRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_SceneObjectRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_SceneObjectRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_SceneObjectRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_SceneObjectRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_SceneObjectRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_SceneObjectRefPtr_bases[] = {0,0};
static const char *swig_OSG_SceneObjectRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_SceneObjectRefPtr = { "SceneObjectRefPtr", &SWIGTYPE_p_OSG__SceneObjectRefPtr,_wrap_new_SceneObjectRefPtr, swig_delete_SceneObjectRefPtr, swig_OSG_SceneObjectRefPtr_methods, swig_OSG_SceneObjectRefPtr_attributes, swig_OSG_SceneObjectRefPtr_bases, swig_OSG_SceneObjectRefPtr_base_names };

static int _wrap_SceneObject_getEffect(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObject *arg1 = (OSG::SceneObject *) 0 ;
  std::string arg2 ;
  OSG::Effect *result = 0 ;
  
  SWIG_check_num_args("getEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEffect",1,"OSG::SceneObject *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getEffect",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObject,0))){
    SWIG_fail_ptr("SceneObject_getEffect",1,SWIGTYPE_p_OSG__SceneObject);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (OSG::Effect *)(arg1)->getEffect(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Effect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObject_getParentScene(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObject *arg1 = (OSG::SceneObject *) 0 ;
  OSG::SceneRefPtr result;
  
  SWIG_check_num_args("getParentScene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentScene",1,"OSG::SceneObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObject,0))){
    SWIG_fail_ptr("SceneObject_getParentScene",1,SWIGTYPE_p_OSG__SceneObject);
  }
  
  result = ((OSG::SceneObject const *)arg1)->getParentScene();
  {
    OSG::SceneRefPtr * resultptr = new OSG::SceneRefPtr((const OSG::SceneRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneObject_getBehaviors(lua_State* L) {
  int SWIG_arg = 0;
  OSG::SceneObject *arg1 = (OSG::SceneObject *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::BehaviorRefPtr result;
  
  SWIG_check_num_args("getBehaviors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBehaviors",1,"OSG::SceneObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getBehaviors",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__SceneObject,0))){
    SWIG_fail_ptr("SceneObject_getBehaviors",1,SWIGTYPE_p_OSG__SceneObject);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = OSG_SceneObject_getBehaviors(arg1,arg2);
  {
    OSG::BehaviorRefPtr * resultptr = new OSG::BehaviorRefPtr((const OSG::BehaviorRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__BehaviorRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_SceneObject_methods[] = {
    {"getEffect", _wrap_SceneObject_getEffect}, 
    {"getParentScene", _wrap_SceneObject_getParentScene}, 
    {"getBehaviors", _wrap_SceneObject_getBehaviors}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_SceneObject_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_SceneObject_bases[] = {0,0};
static const char *swig_OSG_SceneObject_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_SceneObject = { "SceneObject", &SWIGTYPE_p_OSG__SceneObject,0,0, swig_OSG_SceneObject_methods, swig_OSG_SceneObject_attributes, swig_OSG_SceneObject_bases, swig_OSG_SceneObject_base_names };

static int _wrap_BehaviorType_findEventID(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorType *arg1 = (OSG::BehaviorType *) 0 ;
  std::string arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("findEventID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findEventID",1,"OSG::BehaviorType *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findEventID",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorType,0))){
    SWIG_fail_ptr("BehaviorType_findEventID",1,SWIGTYPE_p_OSG__BehaviorType);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = (OSG::UInt32)(arg1)->findEventID(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BehaviorType(void *obj) {
OSG::BehaviorType *arg1 = (OSG::BehaviorType *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_BehaviorType_methods[] = {
    {"findEventID", _wrap_BehaviorType_findEventID}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_BehaviorType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_BehaviorType_bases[] = {0,0};
static const char *swig_OSG_BehaviorType_base_names[] = {"OSG::TypeBase *",0};
static swig_lua_class _wrap_class_OSG_BehaviorType = { "BehaviorType", &SWIGTYPE_p_OSG__BehaviorType,0, swig_delete_BehaviorType, swig_OSG_BehaviorType_methods, swig_OSG_BehaviorType_attributes, swig_OSG_BehaviorType_bases, swig_OSG_BehaviorType_base_names };

static int _wrap_LuaBehaviorType_getLuaFunctionNames(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorType *arg1 = (OSG::LuaBehaviorType *) 0 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("getLuaFunctionNames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLuaFunctionNames",1,"OSG::LuaBehaviorType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorType,0))){
    SWIG_fail_ptr("LuaBehaviorType_getLuaFunctionNames",1,SWIGTYPE_p_OSG__LuaBehaviorType);
  }
  
  result = (arg1)->getLuaFunctionNames();
  {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorType_create__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  SwigValueWrapper< OSG::LuaBehaviorType > result;
  
  SWIG_check_num_args("OSG::LuaBehaviorType::create",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("OSG::LuaBehaviorType::create",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("OSG::LuaBehaviorType::create",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("OSG::LuaBehaviorType::create",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("OSG::LuaBehaviorType::create",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("OSG::LuaBehaviorType::create",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("OSG::LuaBehaviorType::create",6,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_strlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_strlen(L,6)); arg6=&temp6;
  result = OSG::LuaBehaviorType::create((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  {
    OSG::LuaBehaviorType * resultptr = new OSG::LuaBehaviorType((const OSG::LuaBehaviorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__LuaBehaviorType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorType_create__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  SwigValueWrapper< OSG::LuaBehaviorType > result;
  
  SWIG_check_num_args("OSG::LuaBehaviorType::create",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("OSG::LuaBehaviorType::create",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("OSG::LuaBehaviorType::create",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("OSG::LuaBehaviorType::create",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("OSG::LuaBehaviorType::create",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("OSG::LuaBehaviorType::create",5,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_strlen(L,5)); arg5=&temp5;
  result = OSG::LuaBehaviorType::create((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  {
    OSG::LuaBehaviorType * resultptr = new OSG::LuaBehaviorType((const OSG::LuaBehaviorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__LuaBehaviorType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorType_create__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  SwigValueWrapper< OSG::LuaBehaviorType > result;
  
  SWIG_check_num_args("OSG::LuaBehaviorType::create",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("OSG::LuaBehaviorType::create",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("OSG::LuaBehaviorType::create",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("OSG::LuaBehaviorType::create",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("OSG::LuaBehaviorType::create",4,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  result = OSG::LuaBehaviorType::create((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  {
    OSG::LuaBehaviorType * resultptr = new OSG::LuaBehaviorType((const OSG::LuaBehaviorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__LuaBehaviorType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorType_create__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  SwigValueWrapper< OSG::LuaBehaviorType > result;
  
  SWIG_check_num_args("OSG::LuaBehaviorType::create",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("OSG::LuaBehaviorType::create",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("OSG::LuaBehaviorType::create",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("OSG::LuaBehaviorType::create",3,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  result = OSG::LuaBehaviorType::create((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  {
    OSG::LuaBehaviorType * resultptr = new OSG::LuaBehaviorType((const OSG::LuaBehaviorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__LuaBehaviorType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorType_create__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  SwigValueWrapper< OSG::LuaBehaviorType > result;
  
  SWIG_check_num_args("OSG::LuaBehaviorType::create",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("OSG::LuaBehaviorType::create",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("OSG::LuaBehaviorType::create",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = OSG::LuaBehaviorType::create((std::string const &)*arg1,(std::string const &)*arg2);
  {
    OSG::LuaBehaviorType * resultptr = new OSG::LuaBehaviorType((const OSG::LuaBehaviorType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__LuaBehaviorType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorType_create(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaBehaviorType_create__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaBehaviorType_create__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_LuaBehaviorType_create__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_LuaBehaviorType_create__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_LuaBehaviorType_create__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LuaBehaviorType_create'\n"
    "  Possible C/C++ prototypes are:\n"
    "    create(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &)\n"
    "    create(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &)\n"
    "    create(std::string const &,std::string const &,std::string const &,std::string const &)\n"
    "    create(std::string const &,std::string const &,std::string const &)\n"
    "    OSG::LuaBehaviorType::create(std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_OSG_LuaBehaviorType_methods[] = {
    {"getLuaFunctionNames", _wrap_LuaBehaviorType_getLuaFunctionNames}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_LuaBehaviorType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_LuaBehaviorType_bases[] = {0,0};
static const char *swig_OSG_LuaBehaviorType_base_names[] = {"OSG::BehaviorType *",0};
static swig_lua_class _wrap_class_OSG_LuaBehaviorType = { "LuaBehaviorType", &SWIGTYPE_p_OSG__LuaBehaviorType,0,0, swig_OSG_LuaBehaviorType_methods, swig_OSG_LuaBehaviorType_attributes, swig_OSG_LuaBehaviorType_bases, swig_OSG_LuaBehaviorType_base_names };

static int _wrap_BehaviorFactory_the(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorFactory *result = 0 ;
  
  SWIG_check_num_args("OSG::BehaviorFactory::the",0,0)
  result = (OSG::BehaviorFactory *)OSG::BehaviorFactory::the();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BehaviorFactory,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorFactory_registerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorFactory *arg1 = (OSG::BehaviorFactory *) 0 ;
  OSG::BehaviorType *arg2 = (OSG::BehaviorType *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("registerType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("registerType",1,"OSG::BehaviorFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("registerType",2,"OSG::BehaviorType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorFactory,0))){
    SWIG_fail_ptr("BehaviorFactory_registerType",1,SWIGTYPE_p_OSG__BehaviorFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__BehaviorType,0))){
    SWIG_fail_ptr("BehaviorFactory_registerType",2,SWIGTYPE_p_OSG__BehaviorType);
  }
  
  result = (OSG::UInt32)OSG_BehaviorFactory_registerType(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorFactory_findTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorFactory *arg1 = (OSG::BehaviorFactory *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("findTypeId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findTypeId",1,"OSG::BehaviorFactory *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findTypeId",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorFactory,0))){
    SWIG_fail_ptr("BehaviorFactory_findTypeId",1,SWIGTYPE_p_OSG__BehaviorFactory);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::UInt32)OSG_BehaviorFactory_findTypeId(arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorFactory_findType__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorFactory *arg1 = (OSG::BehaviorFactory *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::BehaviorType *result = 0 ;
  
  SWIG_check_num_args("findType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"OSG::BehaviorFactory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findType",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorFactory,0))){
    SWIG_fail_ptr("BehaviorFactory_findType",1,SWIGTYPE_p_OSG__BehaviorFactory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::BehaviorType *)OSG_BehaviorFactory_findType__SWIG_0(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BehaviorType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorFactory_findType__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorFactory *arg1 = (OSG::BehaviorFactory *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::BehaviorType *result = 0 ;
  
  SWIG_check_num_args("findType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findType",1,"OSG::BehaviorFactory *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findType",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorFactory,0))){
    SWIG_fail_ptr("BehaviorFactory_findType",1,SWIGTYPE_p_OSG__BehaviorFactory);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::BehaviorType *)OSG_BehaviorFactory_findType__SWIG_1(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BehaviorType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorFactory_findType(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BehaviorFactory_findType__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BehaviorFactory_findType__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BehaviorFactory_findType'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findType(OSG::BehaviorFactory *,OSG::UInt32)\n"
    "    findType(OSG::BehaviorFactory *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_BehaviorFactory_createBehavior(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorFactory *arg1 = (OSG::BehaviorFactory *) 0 ;
  std::string arg2 ;
  OSG::BehaviorRefPtr result;
  
  SWIG_check_num_args("createBehavior",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createBehavior",1,"OSG::BehaviorFactory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("createBehavior",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorFactory,0))){
    SWIG_fail_ptr("BehaviorFactory_createBehavior",1,SWIGTYPE_p_OSG__BehaviorFactory);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  result = OSG_BehaviorFactory_createBehavior(arg1,arg2);
  {
    OSG::BehaviorRefPtr * resultptr = new OSG::BehaviorRefPtr((const OSG::BehaviorRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__BehaviorRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_BehaviorFactory_methods[] = {
    {"registerType", _wrap_BehaviorFactory_registerType}, 
    {"findTypeId", _wrap_BehaviorFactory_findTypeId}, 
    {"findType", _wrap_BehaviorFactory_findType}, 
    {"createBehavior", _wrap_BehaviorFactory_createBehavior}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_BehaviorFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_BehaviorFactory_bases[] = {0};
static const char *swig_OSG_BehaviorFactory_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_BehaviorFactory = { "BehaviorFactory", &SWIGTYPE_p_OSG__BehaviorFactory,0,0, swig_OSG_BehaviorFactory_methods, swig_OSG_BehaviorFactory_attributes, swig_OSG_BehaviorFactory_bases, swig_OSG_BehaviorFactory_base_names };

static int _wrap_Behavior_getBehaviorType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Behavior *arg1 = (OSG::Behavior *) 0 ;
  OSG::BehaviorType *result = 0 ;
  
  SWIG_check_num_args("getBehaviorType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBehaviorType",1,"OSG::Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Behavior,0))){
    SWIG_fail_ptr("Behavior_getBehaviorType",1,SWIGTYPE_p_OSG__Behavior);
  }
  
  result = (OSG::BehaviorType *)(arg1)->getBehaviorType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BehaviorType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_isInitialized(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Behavior *arg1 = (OSG::Behavior *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInitialized",1,"OSG::Behavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Behavior,0))){
    SWIG_fail_ptr("Behavior_isInitialized",1,SWIGTYPE_p_OSG__Behavior);
  }
  
  result = (bool)(arg1)->isInitialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_getParentSceneObject(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Behavior *arg1 = (OSG::Behavior *) 0 ;
  OSG::SceneObjectRefPtr result;
  
  SWIG_check_num_args("getParentSceneObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentSceneObject",1,"OSG::Behavior const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Behavior,0))){
    SWIG_fail_ptr("Behavior_getParentSceneObject",1,SWIGTYPE_p_OSG__Behavior);
  }
  
  result = OSG_Behavior_getParentSceneObject((OSG::Behavior const *)arg1);
  {
    OSG::SceneObjectRefPtr * resultptr = new OSG::SceneObjectRefPtr((const OSG::SceneObjectRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneObjectRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_produceEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Behavior *arg1 = (OSG::Behavior *) 0 ;
  std::string arg2 ;
  OSG::GenericEventDetailsRefPtr arg3 ;
  OSG::GenericEventDetailsRefPtr *argp3 ;
  
  SWIG_check_num_args("produceEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::Behavior *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("produceEvent",2,"std::string");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("produceEvent",3,"OSG::GenericEventDetailsRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Behavior,0))){
    SWIG_fail_ptr("Behavior_produceEvent",1,SWIGTYPE_p_OSG__Behavior);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,0))){
    SWIG_fail_ptr("Behavior_produceEvent",3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr);
  }
  arg3 = *argp3;
  
  OSG_Behavior_produceEvent__SWIG_0(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_produceEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Behavior *arg1 = (OSG::Behavior *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("produceEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::Behavior *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("produceEvent",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Behavior,0))){
    SWIG_fail_ptr("Behavior_produceEvent",1,SWIGTYPE_p_OSG__Behavior);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  OSG_Behavior_produceEvent__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_produceEvent__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Behavior *arg1 = (OSG::Behavior *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::GenericEventDetailsRefPtr arg3 ;
  OSG::GenericEventDetailsRefPtr *argp3 ;
  
  SWIG_check_num_args("produceEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::Behavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("produceEvent",2,"OSG::UInt32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("produceEvent",3,"OSG::GenericEventDetailsRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Behavior,0))){
    SWIG_fail_ptr("Behavior_produceEvent",1,SWIGTYPE_p_OSG__Behavior);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,0))){
    SWIG_fail_ptr("Behavior_produceEvent",3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr);
  }
  arg3 = *argp3;
  
  OSG_Behavior_produceEvent__SWIG_2(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_produceEvent__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Behavior *arg1 = (OSG::Behavior *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("produceEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::Behavior *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("produceEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Behavior,0))){
    SWIG_fail_ptr("Behavior_produceEvent",1,SWIGTYPE_p_OSG__Behavior);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  OSG_Behavior_produceEvent__SWIG_2(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Behavior_produceEvent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Behavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Behavior_produceEvent__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Behavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Behavior_produceEvent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Behavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__GenericEventDetailsRefPtr, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Behavior_produceEvent__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__Behavior, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__GenericEventDetailsRefPtr, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Behavior_produceEvent__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Behavior_produceEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    produceEvent(OSG::Behavior *,std::string,OSG::GenericEventDetailsRefPtr)\n"
    "    produceEvent(OSG::Behavior *,std::string)\n"
    "    produceEvent(OSG::Behavior *,OSG::UInt32,OSG::GenericEventDetailsRefPtr)\n"
    "    produceEvent(OSG::Behavior *,OSG::UInt32)\n");
  lua_error(L);return 0;
}


static swig_lua_method swig_OSG_Behavior_methods[] = {
    {"getBehaviorType", _wrap_Behavior_getBehaviorType}, 
    {"isInitialized", _wrap_Behavior_isInitialized}, 
    {"getParentSceneObject", _wrap_Behavior_getParentSceneObject}, 
    {"produceEvent", _wrap_Behavior_produceEvent}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Behavior_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Behavior_bases[] = {0,0};
static const char *swig_OSG_Behavior_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Behavior = { "Behavior", &SWIGTYPE_p_OSG__Behavior,0,0, swig_OSG_Behavior_methods, swig_OSG_Behavior_attributes, swig_OSG_Behavior_bases, swig_OSG_Behavior_base_names };

static int _wrap_new_BehaviorRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::BehaviorRefPtr",0,0)
  result = (OSG::BehaviorRefPtr *)new OSG::BehaviorRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BehaviorRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BehaviorRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = 0 ;
  OSG::BehaviorRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::BehaviorRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::BehaviorRefPtr",1,"OSG::BehaviorRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("new_BehaviorRefPtr",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::BehaviorRefPtr *)new OSG::BehaviorRefPtr((OSG::BehaviorRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BehaviorRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BehaviorRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BehaviorRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BehaviorRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_BehaviorRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::BehaviorRefPtr()\n"
    "    OSG::BehaviorRefPtr(OSG::BehaviorRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BehaviorRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::Behavior *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::BehaviorRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr___deref__",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::Behavior *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Behavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::BehaviorRefPtr result;
  
  SWIG_check_num_args("OSG_BehaviorRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_BehaviorRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_BehaviorRefPtr_dcast(arg1);
  {
    OSG::BehaviorRefPtr * resultptr = new OSG::BehaviorRefPtr((const OSG::BehaviorRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__BehaviorRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getBehaviorType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::BehaviorType *result = 0 ;
  
  SWIG_check_num_args("getBehaviorType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBehaviorType",1,"OSG::BehaviorRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getBehaviorType",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::BehaviorType *)(*arg1)->getBehaviorType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BehaviorType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_isInitialized(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInitialized",1,"OSG::BehaviorRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_isInitialized",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (bool)(*arg1)->isInitialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getParentSceneObject(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::SceneObjectRefPtr result;
  
  SWIG_check_num_args("getParentSceneObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentSceneObject",1,"OSG::BehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getParentSceneObject",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = OSG_Behavior_getParentSceneObject((OSG::Behavior*)(arg1)->operator ->());
  {
    OSG::SceneObjectRefPtr * resultptr = new OSG::SceneObjectRefPtr((const OSG::SceneObjectRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneObjectRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_produceEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  std::string arg2 ;
  OSG::GenericEventDetailsRefPtr arg3 ;
  OSG::GenericEventDetailsRefPtr *argp3 ;
  
  SWIG_check_num_args("produceEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::BehaviorRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("produceEvent",2,"std::string");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("produceEvent",3,"OSG::GenericEventDetailsRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_produceEvent",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_produceEvent",3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr);
  }
  arg3 = *argp3;
  
  OSG_Behavior_produceEvent__SWIG_0((OSG::Behavior*)(arg1)->operator ->(),arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_produceEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("produceEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::BehaviorRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("produceEvent",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_produceEvent",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  OSG_Behavior_produceEvent__SWIG_0((OSG::Behavior*)(arg1)->operator ->(),arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_produceEvent__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::GenericEventDetailsRefPtr arg3 ;
  OSG::GenericEventDetailsRefPtr *argp3 ;
  
  SWIG_check_num_args("produceEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::BehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("produceEvent",2,"OSG::UInt32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("produceEvent",3,"OSG::GenericEventDetailsRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_produceEvent",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_produceEvent",3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr);
  }
  arg3 = *argp3;
  
  OSG_Behavior_produceEvent__SWIG_2((OSG::Behavior*)(arg1)->operator ->(),arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_produceEvent__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("produceEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::BehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("produceEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_produceEvent",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  OSG_Behavior_produceEvent__SWIG_2((OSG::Behavior*)(arg1)->operator ->(),arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_produceEvent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BehaviorRefPtr_produceEvent__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BehaviorRefPtr_produceEvent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__GenericEventDetailsRefPtr, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BehaviorRefPtr_produceEvent__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__GenericEventDetailsRefPtr, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BehaviorRefPtr_produceEvent__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BehaviorRefPtr_produceEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    produceEvent(OSG::BehaviorRefPtr *,std::string,OSG::GenericEventDetailsRefPtr)\n"
    "    produceEvent(OSG::BehaviorRefPtr *,std::string)\n"
    "    produceEvent(OSG::BehaviorRefPtr *,OSG::UInt32,OSG::GenericEventDetailsRefPtr)\n"
    "    produceEvent(OSG::BehaviorRefPtr *,OSG::UInt32)\n");
  lua_error(L);return 0;
}


static int _wrap_BehaviorRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::BehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_addAttachment",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::BehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_addAttachment",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BehaviorRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BehaviorRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BehaviorRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::BehaviorRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::BehaviorRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BehaviorRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::BehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_subAttachment",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::BehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_subAttachment",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BehaviorRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BehaviorRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BehaviorRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::BehaviorRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::BehaviorRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BehaviorRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::BehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_findAttachment",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::BehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_findAttachment",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::BehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_findAttachment",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("BehaviorRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::BehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_findAttachment",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("BehaviorRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BehaviorRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BehaviorRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BehaviorRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BehaviorRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BehaviorRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::BehaviorRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::BehaviorRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::BehaviorRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::BehaviorRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BehaviorRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::BehaviorRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getType",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::BehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::BehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getTypeId",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::BehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getGroupId",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::BehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getTypeName",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::BehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getProducerType",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::BehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::BehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getId",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::BehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getNumFields",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::BehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::BehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::BehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_attachActivity",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("BehaviorRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::BehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::BehaviorRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::BehaviorRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::BehaviorRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::BehaviorRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::BehaviorRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BehaviorRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BehaviorRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BehaviorRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::BehaviorRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::BehaviorRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_BehaviorRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::BehaviorRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::BehaviorRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__BehaviorRefPtr,0))){
    SWIG_fail_ptr("BehaviorRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__BehaviorRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BehaviorRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BehaviorRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__BehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_BehaviorRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BehaviorRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::BehaviorRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::BehaviorRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_BehaviorRefPtr(void *obj) {
OSG::BehaviorRefPtr *arg1 = (OSG::BehaviorRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_BehaviorRefPtr_methods[] = {
    {"__deref__", _wrap_BehaviorRefPtr___deref__}, 
    {"getBehaviorType", _wrap_BehaviorRefPtr_getBehaviorType}, 
    {"isInitialized", _wrap_BehaviorRefPtr_isInitialized}, 
    {"getParentSceneObject", _wrap_BehaviorRefPtr_getParentSceneObject}, 
    {"produceEvent", _wrap_BehaviorRefPtr_produceEvent}, 
    {"addAttachment", _wrap_BehaviorRefPtr_addAttachment}, 
    {"subAttachment", _wrap_BehaviorRefPtr_subAttachment}, 
    {"findAttachment", _wrap_BehaviorRefPtr_findAttachment}, 
    {"getType", _wrap_BehaviorRefPtr_getType}, 
    {"shallowCopy", _wrap_BehaviorRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_BehaviorRefPtr_getTypeId}, 
    {"getGroupId", _wrap_BehaviorRefPtr_getGroupId}, 
    {"getTypeName", _wrap_BehaviorRefPtr_getTypeName}, 
    {"getProducerType", _wrap_BehaviorRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_BehaviorRefPtr_getContainerSize}, 
    {"getId", _wrap_BehaviorRefPtr_getId}, 
    {"getNumFields", _wrap_BehaviorRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_BehaviorRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_BehaviorRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_BehaviorRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_BehaviorRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_BehaviorRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_BehaviorRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_BehaviorRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_BehaviorRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_BehaviorRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_BehaviorRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_BehaviorRefPtr_bases[] = {0,0};
static const char *swig_OSG_BehaviorRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_BehaviorRefPtr = { "BehaviorRefPtr", &SWIGTYPE_p_OSG__BehaviorRefPtr,_wrap_new_BehaviorRefPtr, swig_delete_BehaviorRefPtr, swig_OSG_BehaviorRefPtr_methods, swig_OSG_BehaviorRefPtr_attributes, swig_OSG_BehaviorRefPtr_bases, swig_OSG_BehaviorRefPtr_base_names };

static int _wrap_LuaBehavior_getLuaBehaviorType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehavior *arg1 = (OSG::LuaBehavior *) 0 ;
  OSG::LuaBehaviorType *result = 0 ;
  
  SWIG_check_num_args("getLuaBehaviorType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLuaBehaviorType",1,"OSG::LuaBehavior *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehavior,0))){
    SWIG_fail_ptr("LuaBehavior_getLuaBehaviorType",1,SWIGTYPE_p_OSG__LuaBehavior);
  }
  
  result = (OSG::LuaBehaviorType *)(arg1)->getLuaBehaviorType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__LuaBehaviorType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_LuaBehavior_methods[] = {
    {"getLuaBehaviorType", _wrap_LuaBehavior_getLuaBehaviorType}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_LuaBehavior_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_LuaBehavior_bases[] = {0,0};
static const char *swig_OSG_LuaBehavior_base_names[] = {"OSG::Behavior *",0};
static swig_lua_class _wrap_class_OSG_LuaBehavior = { "LuaBehavior", &SWIGTYPE_p_OSG__LuaBehavior,0,0, swig_OSG_LuaBehavior_methods, swig_OSG_LuaBehavior_attributes, swig_OSG_LuaBehavior_bases, swig_OSG_LuaBehavior_base_names };

static int _wrap_new_LuaBehaviorRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::LuaBehaviorRefPtr",0,0)
  result = (OSG::LuaBehaviorRefPtr *)new OSG::LuaBehaviorRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LuaBehaviorRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = 0 ;
  OSG::LuaBehaviorRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::LuaBehaviorRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::LuaBehaviorRefPtr",1,"OSG::LuaBehaviorRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("new_LuaBehaviorRefPtr",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::LuaBehaviorRefPtr *)new OSG::LuaBehaviorRefPtr((OSG::LuaBehaviorRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LuaBehaviorRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LuaBehaviorRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LuaBehaviorRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_LuaBehaviorRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::LuaBehaviorRefPtr()\n"
    "    OSG::LuaBehaviorRefPtr(OSG::LuaBehaviorRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LuaBehaviorRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::LuaBehavior *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::LuaBehaviorRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr___deref__",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::LuaBehavior *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__LuaBehavior,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::LuaBehaviorRefPtr result;
  
  SWIG_check_num_args("OSG_LuaBehaviorRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_LuaBehaviorRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_LuaBehaviorRefPtr_dcast(arg1);
  {
    OSG::LuaBehaviorRefPtr * resultptr = new OSG::LuaBehaviorRefPtr((const OSG::LuaBehaviorRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getLuaBehaviorType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::LuaBehaviorType *result = 0 ;
  
  SWIG_check_num_args("getLuaBehaviorType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLuaBehaviorType",1,"OSG::LuaBehaviorRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getLuaBehaviorType",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::LuaBehaviorType *)(*arg1)->getLuaBehaviorType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__LuaBehaviorType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getBehaviorType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::BehaviorType *result = 0 ;
  
  SWIG_check_num_args("getBehaviorType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBehaviorType",1,"OSG::LuaBehaviorRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getBehaviorType",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::BehaviorType *)(*arg1)->getBehaviorType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__BehaviorType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_isInitialized(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInitialized",1,"OSG::LuaBehaviorRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_isInitialized",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (bool)(*arg1)->isInitialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getParentSceneObject(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::SceneObjectRefPtr result;
  
  SWIG_check_num_args("getParentSceneObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentSceneObject",1,"OSG::LuaBehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getParentSceneObject",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = OSG_Behavior_getParentSceneObject((OSG::Behavior*)(arg1)->operator ->());
  {
    OSG::SceneObjectRefPtr * resultptr = new OSG::SceneObjectRefPtr((const OSG::SceneObjectRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneObjectRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_produceEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  std::string arg2 ;
  OSG::GenericEventDetailsRefPtr arg3 ;
  OSG::GenericEventDetailsRefPtr *argp3 ;
  
  SWIG_check_num_args("produceEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("produceEvent",2,"std::string");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("produceEvent",3,"OSG::GenericEventDetailsRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_produceEvent",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_produceEvent",3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr);
  }
  arg3 = *argp3;
  
  OSG_Behavior_produceEvent__SWIG_0((OSG::Behavior*)(arg1)->operator ->(),arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_produceEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("produceEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("produceEvent",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_produceEvent",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  OSG_Behavior_produceEvent__SWIG_0((OSG::Behavior*)(arg1)->operator ->(),arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_produceEvent__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::GenericEventDetailsRefPtr arg3 ;
  OSG::GenericEventDetailsRefPtr *argp3 ;
  
  SWIG_check_num_args("produceEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("produceEvent",2,"OSG::UInt32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("produceEvent",3,"OSG::GenericEventDetailsRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_produceEvent",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_produceEvent",3,SWIGTYPE_p_OSG__GenericEventDetailsRefPtr);
  }
  arg3 = *argp3;
  
  OSG_Behavior_produceEvent__SWIG_2((OSG::Behavior*)(arg1)->operator ->(),arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_produceEvent__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("produceEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("produceEvent",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("produceEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_produceEvent",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  OSG_Behavior_produceEvent__SWIG_2((OSG::Behavior*)(arg1)->operator ->(),arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_produceEvent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaBehaviorRefPtr_produceEvent__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaBehaviorRefPtr_produceEvent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__GenericEventDetailsRefPtr, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LuaBehaviorRefPtr_produceEvent__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_OSG__GenericEventDetailsRefPtr, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LuaBehaviorRefPtr_produceEvent__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LuaBehaviorRefPtr_produceEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    produceEvent(OSG::LuaBehaviorRefPtr *,std::string,OSG::GenericEventDetailsRefPtr)\n"
    "    produceEvent(OSG::LuaBehaviorRefPtr *,std::string)\n"
    "    produceEvent(OSG::LuaBehaviorRefPtr *,OSG::UInt32,OSG::GenericEventDetailsRefPtr)\n"
    "    produceEvent(OSG::LuaBehaviorRefPtr *,OSG::UInt32)\n");
  lua_error(L);return 0;
}


static int _wrap_LuaBehaviorRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_addAttachment",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_addAttachment",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LuaBehaviorRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaBehaviorRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LuaBehaviorRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::LuaBehaviorRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::LuaBehaviorRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LuaBehaviorRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_subAttachment",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_subAttachment",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LuaBehaviorRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaBehaviorRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LuaBehaviorRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::LuaBehaviorRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::LuaBehaviorRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LuaBehaviorRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_findAttachment",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_findAttachment",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_findAttachment",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_findAttachment",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LuaBehaviorRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaBehaviorRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaBehaviorRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LuaBehaviorRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LuaBehaviorRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::LuaBehaviorRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::LuaBehaviorRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::LuaBehaviorRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::LuaBehaviorRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_LuaBehaviorRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::LuaBehaviorRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getType",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::LuaBehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::LuaBehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getTypeId",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::LuaBehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getGroupId",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::LuaBehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getTypeName",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::LuaBehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getProducerType",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::LuaBehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::LuaBehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getId",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::LuaBehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getNumFields",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::LuaBehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::LuaBehaviorRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_attachActivity",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::LuaBehaviorRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::LuaBehaviorRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::LuaBehaviorRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::LuaBehaviorRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::LuaBehaviorRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::LuaBehaviorRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaBehaviorRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaBehaviorRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LuaBehaviorRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::LuaBehaviorRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::LuaBehaviorRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_LuaBehaviorRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::LuaBehaviorRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::LuaBehaviorRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr,0))){
    SWIG_fail_ptr("LuaBehaviorRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__LuaBehaviorRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaBehaviorRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaBehaviorRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__LuaBehaviorRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaBehaviorRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'LuaBehaviorRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::LuaBehaviorRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::LuaBehaviorRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_LuaBehaviorRefPtr(void *obj) {
OSG::LuaBehaviorRefPtr *arg1 = (OSG::LuaBehaviorRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_LuaBehaviorRefPtr_methods[] = {
    {"__deref__", _wrap_LuaBehaviorRefPtr___deref__}, 
    {"getLuaBehaviorType", _wrap_LuaBehaviorRefPtr_getLuaBehaviorType}, 
    {"getBehaviorType", _wrap_LuaBehaviorRefPtr_getBehaviorType}, 
    {"isInitialized", _wrap_LuaBehaviorRefPtr_isInitialized}, 
    {"getParentSceneObject", _wrap_LuaBehaviorRefPtr_getParentSceneObject}, 
    {"produceEvent", _wrap_LuaBehaviorRefPtr_produceEvent}, 
    {"addAttachment", _wrap_LuaBehaviorRefPtr_addAttachment}, 
    {"subAttachment", _wrap_LuaBehaviorRefPtr_subAttachment}, 
    {"findAttachment", _wrap_LuaBehaviorRefPtr_findAttachment}, 
    {"getType", _wrap_LuaBehaviorRefPtr_getType}, 
    {"shallowCopy", _wrap_LuaBehaviorRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_LuaBehaviorRefPtr_getTypeId}, 
    {"getGroupId", _wrap_LuaBehaviorRefPtr_getGroupId}, 
    {"getTypeName", _wrap_LuaBehaviorRefPtr_getTypeName}, 
    {"getProducerType", _wrap_LuaBehaviorRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_LuaBehaviorRefPtr_getContainerSize}, 
    {"getId", _wrap_LuaBehaviorRefPtr_getId}, 
    {"getNumFields", _wrap_LuaBehaviorRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_LuaBehaviorRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_LuaBehaviorRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_LuaBehaviorRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_LuaBehaviorRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_LuaBehaviorRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_LuaBehaviorRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_LuaBehaviorRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_LuaBehaviorRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_LuaBehaviorRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_LuaBehaviorRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_LuaBehaviorRefPtr_bases[] = {0,0};
static const char *swig_OSG_LuaBehaviorRefPtr_base_names[] = {"OSG::BehaviorRefPtr *",0};
static swig_lua_class _wrap_class_OSG_LuaBehaviorRefPtr = { "LuaBehaviorRefPtr", &SWIGTYPE_p_OSG__LuaBehaviorRefPtr,_wrap_new_LuaBehaviorRefPtr, swig_delete_LuaBehaviorRefPtr, swig_OSG_LuaBehaviorRefPtr_methods, swig_OSG_LuaBehaviorRefPtr_attributes, swig_OSG_LuaBehaviorRefPtr_bases, swig_OSG_LuaBehaviorRefPtr_base_names };

static int _wrap_Effect_begin(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Effect *arg1 = (OSG::Effect *) 0 ;
  
  SWIG_check_num_args("begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("begin",1,"OSG::Effect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Effect,0))){
    SWIG_fail_ptr("Effect_begin",1,SWIGTYPE_p_OSG__Effect);
  }
  
  (arg1)->begin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Effect_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Effect *arg1 = (OSG::Effect *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaying",1,"OSG::Effect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Effect,0))){
    SWIG_fail_ptr("Effect_isPlaying",1,SWIGTYPE_p_OSG__Effect);
  }
  
  result = (bool)(arg1)->isPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Effect_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Effect *arg1 = (OSG::Effect *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPaused",1,"OSG::Effect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Effect,0))){
    SWIG_fail_ptr("Effect_isPaused",1,SWIGTYPE_p_OSG__Effect);
  }
  
  result = (bool)(arg1)->isPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Effect_pause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Effect *arg1 = (OSG::Effect *) 0 ;
  
  SWIG_check_num_args("pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"OSG::Effect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Effect,0))){
    SWIG_fail_ptr("Effect_pause",1,SWIGTYPE_p_OSG__Effect);
  }
  
  (arg1)->pause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Effect_unpause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Effect *arg1 = (OSG::Effect *) 0 ;
  
  SWIG_check_num_args("unpause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpause",1,"OSG::Effect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Effect,0))){
    SWIG_fail_ptr("Effect_unpause",1,SWIGTYPE_p_OSG__Effect);
  }
  
  (arg1)->unpause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Effect_stop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Effect *arg1 = (OSG::Effect *) 0 ;
  
  SWIG_check_num_args("stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::Effect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Effect,0))){
    SWIG_fail_ptr("Effect_stop",1,SWIGTYPE_p_OSG__Effect);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Effect_getParentSceneObject(lua_State* L) {
  int SWIG_arg = 0;
  OSG::Effect *arg1 = (OSG::Effect *) 0 ;
  OSG::SceneObjectRefPtr result;
  
  SWIG_check_num_args("getParentSceneObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentSceneObject",1,"OSG::Effect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__Effect,0))){
    SWIG_fail_ptr("Effect_getParentSceneObject",1,SWIGTYPE_p_OSG__Effect);
  }
  
  result = OSG_Effect_getParentSceneObject((OSG::Effect const *)arg1);
  {
    OSG::SceneObjectRefPtr * resultptr = new OSG::SceneObjectRefPtr((const OSG::SceneObjectRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneObjectRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_Effect_methods[] = {
    {"begin", _wrap_Effect_begin}, 
    {"isPlaying", _wrap_Effect_isPlaying}, 
    {"isPaused", _wrap_Effect_isPaused}, 
    {"pause", _wrap_Effect_pause}, 
    {"unpause", _wrap_Effect_unpause}, 
    {"stop", _wrap_Effect_stop}, 
    {"getParentSceneObject", _wrap_Effect_getParentSceneObject}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_Effect_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_Effect_bases[] = {0,0};
static const char *swig_OSG_Effect_base_names[] = {"OSG::AttachmentContainer *",0};
static swig_lua_class _wrap_class_OSG_Effect = { "Effect", &SWIGTYPE_p_OSG__Effect,0,0, swig_OSG_Effect_methods, swig_OSG_Effect_attributes, swig_OSG_Effect_bases, swig_OSG_Effect_base_names };

static int _wrap_new_EffectRefPtr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::EffectRefPtr",0,0)
  result = (OSG::EffectRefPtr *)new OSG::EffectRefPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EffectRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EffectRefPtr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = 0 ;
  OSG::EffectRefPtr *result = 0 ;
  
  SWIG_check_num_args("OSG::EffectRefPtr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG::EffectRefPtr",1,"OSG::EffectRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("new_EffectRefPtr",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (OSG::EffectRefPtr *)new OSG::EffectRefPtr((OSG::EffectRefPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EffectRefPtr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EffectRefPtr(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EffectRefPtr__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EffectRefPtr__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_EffectRefPtr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    OSG::EffectRefPtr()\n"
    "    OSG::EffectRefPtr(OSG::EffectRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EffectRefPtr___deref__(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::Effect *result = 0 ;
  
  SWIG_check_num_args("operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ->",1,"OSG::EffectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr___deref__",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (OSG::Effect *)(arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__Effect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_dcast(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  OSG::EffectRefPtr result;
  
  SWIG_check_num_args("OSG_EffectRefPtr_dcast",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_EffectRefPtr_dcast",1,"OSG::FieldContainerRefPtr const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_dcast",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  result = OSG_EffectRefPtr_dcast(arg1);
  {
    OSG::EffectRefPtr * resultptr = new OSG::EffectRefPtr((const OSG::EffectRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__EffectRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_begin(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  
  SWIG_check_num_args("begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("begin",1,"OSG::EffectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_begin",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  (*arg1)->begin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPlaying",1,"OSG::EffectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_isPlaying",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (bool)(*arg1)->isPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_isPaused(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPaused",1,"OSG::EffectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_isPaused",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (bool)(*arg1)->isPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_pause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  
  SWIG_check_num_args("pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pause",1,"OSG::EffectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_pause",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  (*arg1)->pause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_unpause(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  
  SWIG_check_num_args("unpause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("unpause",1,"OSG::EffectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_unpause",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  (*arg1)->unpause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_stop(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  
  SWIG_check_num_args("stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stop",1,"OSG::EffectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_stop",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  (*arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getParentSceneObject(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::SceneObjectRefPtr result;
  
  SWIG_check_num_args("getParentSceneObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParentSceneObject",1,"OSG::EffectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getParentSceneObject",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = OSG_Effect_getParentSceneObject((OSG::Effect*)(arg1)->operator ->());
  {
    OSG::SceneObjectRefPtr * resultptr = new OSG::SceneObjectRefPtr((const OSG::SceneObjectRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__SceneObjectRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_addAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("addAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::EffectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_addAttachment",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_addAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("addAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAttachment",1,"OSG::EffectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_addAttachment",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_addAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->addAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_addAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EffectRefPtr_addAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_EffectRefPtr_addAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'EffectRefPtr_addAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    addAttachment(OSG::EffectRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    addAttachment(OSG::EffectRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EffectRefPtr_subAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  
  SWIG_check_num_args("subAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::EffectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("subAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_subAttachment",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_subAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::AttachmentRefPtr *arg2 = 0 ;
  
  SWIG_check_num_args("subAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subAttachment",1,"OSG::EffectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("subAttachment",2,"OSG::AttachmentRefPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_subAttachment",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__AttachmentRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_subAttachment",2,SWIGTYPE_p_OSG__AttachmentRefPtr);
  }
  
  (*arg1)->subAttachment((OSG::AttachmentRefPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_subAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EffectRefPtr_subAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__AttachmentRefPtr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_EffectRefPtr_subAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'EffectRefPtr_subAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    subAttachment(OSG::EffectRefPtr *,OSG::AttachmentRefPtr const &,OSG::UInt16)\n"
    "    subAttachment(OSG::EffectRefPtr *,OSG::AttachmentRefPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EffectRefPtr_findAttachment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::EffectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment(arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_findAttachment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::EffectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (*arg1)->findAttachment(arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_findAttachment__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::UInt16 arg3 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::EffectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findAttachment",3,"OSG::UInt16");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("EffectRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (OSG::UInt16)lua_tonumber(L, 3);
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2,arg3);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_findAttachment__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::FieldContainerType *arg2 = 0 ;
  OSG::AttachmentRefPtr result;
  
  SWIG_check_num_args("findAttachment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAttachment",1,"OSG::EffectRefPtr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("findAttachment",2,"OSG::FieldContainerType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_findAttachment",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_OSG__FieldContainerType,0))){
    SWIG_fail_ptr("EffectRefPtr_findAttachment",2,SWIGTYPE_p_OSG__FieldContainerType);
  }
  
  result = (*arg1)->findAttachment((OSG::FieldContainerType const &)*arg2);
  {
    OSG::AttachmentRefPtr * resultptr = new OSG::AttachmentRefPtr((const OSG::AttachmentRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__AttachmentRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_findAttachment(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EffectRefPtr_findAttachment__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EffectRefPtr_findAttachment__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_OSG__FieldContainerType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_EffectRefPtr_findAttachment__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_EffectRefPtr_findAttachment__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'EffectRefPtr_findAttachment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findAttachment(OSG::EffectRefPtr *,OSG::UInt32,OSG::UInt16)\n"
    "    findAttachment(OSG::EffectRefPtr *,OSG::UInt32)\n"
    "    findAttachment(OSG::EffectRefPtr *,OSG::FieldContainerType const &,OSG::UInt16)\n"
    "    findAttachment(OSG::EffectRefPtr *,OSG::FieldContainerType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EffectRefPtr_getType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::FieldContainerType *result = 0 ;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"OSG::EffectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getType",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (OSG::FieldContainerType *) &(*arg1)->getType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldContainerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_shallowCopy(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::FieldContainerRefPtr result;
  
  SWIG_check_num_args("shallowCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shallowCopy",1,"OSG::EffectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_shallowCopy",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (*arg1)->shallowCopy();
  {
    OSG::FieldContainerRefPtr * resultptr = new OSG::FieldContainerRefPtr((const OSG::FieldContainerRefPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__FieldContainerRefPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getTypeId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getTypeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeId",1,"OSG::EffectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getTypeId",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getTypeId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getGroupId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt16 result;
  
  SWIG_check_num_args("getGroupId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGroupId",1,"OSG::EffectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getGroupId",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (OSG::UInt16)(*arg1)->getGroupId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getTypeName(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::Char8 *result = 0 ;
  
  SWIG_check_num_args("getTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTypeName",1,"OSG::EffectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getTypeName",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (OSG::Char8 *)(*arg1)->getTypeName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getProducerType(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::EventProducerType *result = 0 ;
  
  SWIG_check_num_args("getProducerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getProducerType",1,"OSG::EffectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getProducerType",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (OSG::EventProducerType *) &(*arg1)->getProducerType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventProducerType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getContainerSize(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getContainerSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getContainerSize",1,"OSG::EffectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getContainerSize",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getContainerSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getId(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"OSG::EffectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getId",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getNumFields(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumFields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumFields",1,"OSG::EffectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getNumFields",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumFields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getNumEvents(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("getNumEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumEvents",1,"OSG::EffectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getNumEvents",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (OSG::UInt32)(*arg1)->getNumEvents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_isEventProducer(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEventProducer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEventProducer",1,"OSG::EffectRefPtr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_isEventProducer",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  result = (bool)(*arg1)->isEventProducer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_attachActivity(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::Activity *arg3 = (OSG::Activity *) 0 ;
  boost::signals2::connection result;
  
  SWIG_check_num_args("attachActivity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("attachActivity",1,"OSG::EffectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("attachActivity",2,"OSG::UInt32");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("attachActivity",3,"OSG::Activity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_attachActivity",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_OSG__Activity,0))){
    SWIG_fail_ptr("EffectRefPtr_attachActivity",3,SWIGTYPE_p_OSG__Activity);
  }
  
  result = (*arg1)->attachActivity(arg2,arg3);
  {
    boost::signals2::connection * resultptr = new boost::signals2::connection((const boost::signals2::connection &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boost__signals2__connection,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_disconnectAllSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  
  SWIG_check_num_args("disconnectAllSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAllSlotsEvent",1,"OSG::EffectRefPtr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("disconnectAllSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_disconnectAllSlotsEvent",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  (*arg1)->disconnectAllSlotsEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_isEmptyEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  bool result;
  
  SWIG_check_num_args("isEmptyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmptyEvent",1,"OSG::EffectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isEmptyEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_isEmptyEvent",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (bool)(*arg1)->isEmptyEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_numSlotsEvent(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::UInt32 result;
  
  SWIG_check_num_args("numSlotsEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("numSlotsEvent",1,"OSG::EffectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("numSlotsEvent",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_numSlotsEvent",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::UInt32)(*arg1)->numSlotsEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_disconnectAll(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  
  SWIG_check_num_args("disconnectAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("disconnectAll",1,"OSG::EffectRefPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_disconnectAll",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  (*arg1)->disconnectAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getFieldDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::EffectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getFieldDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::FieldDescriptionBase *result = 0 ;
  
  SWIG_check_num_args("getFieldDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFieldDescription",1,"OSG::EffectRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getFieldDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getFieldDescription",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::FieldDescriptionBase *)(*arg1)->getFieldDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__FieldDescriptionBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getFieldDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EffectRefPtr_getFieldDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EffectRefPtr_getFieldDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'EffectRefPtr_getFieldDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFieldDescription(OSG::EffectRefPtr const *,OSG::UInt32)\n"
    "    getFieldDescription(OSG::EffectRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_EffectRefPtr_getEventDescription__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::UInt32 arg2 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::EffectRefPtr const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (OSG::UInt32)lua_tonumber(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getEventDescription__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) 0 ;
  OSG::Char8 *arg2 = (OSG::Char8 *) 0 ;
  OSG::EventDescription *result = 0 ;
  
  SWIG_check_num_args("getEventDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEventDescription",1,"OSG::EffectRefPtr const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("getEventDescription",2,"OSG::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OSG__EffectRefPtr,0))){
    SWIG_fail_ptr("EffectRefPtr_getEventDescription",1,SWIGTYPE_p_OSG__EffectRefPtr);
  }
  
  arg2 = (OSG::Char8 *)lua_tostring(L, 2);
  result = (OSG::EventDescription *)(*arg1)->getEventDescription((OSG::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OSG__EventDescription,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EffectRefPtr_getEventDescription(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EffectRefPtr_getEventDescription__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_OSG__EffectRefPtr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EffectRefPtr_getEventDescription__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'EffectRefPtr_getEventDescription'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getEventDescription(OSG::EffectRefPtr const *,OSG::UInt32)\n"
    "    getEventDescription(OSG::EffectRefPtr const *,OSG::Char8 const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_EffectRefPtr(void *obj) {
OSG::EffectRefPtr *arg1 = (OSG::EffectRefPtr *) obj;
delete arg1;
}
static swig_lua_method swig_OSG_EffectRefPtr_methods[] = {
    {"__deref__", _wrap_EffectRefPtr___deref__}, 
    {"begin", _wrap_EffectRefPtr_begin}, 
    {"isPlaying", _wrap_EffectRefPtr_isPlaying}, 
    {"isPaused", _wrap_EffectRefPtr_isPaused}, 
    {"pause", _wrap_EffectRefPtr_pause}, 
    {"unpause", _wrap_EffectRefPtr_unpause}, 
    {"stop", _wrap_EffectRefPtr_stop}, 
    {"getParentSceneObject", _wrap_EffectRefPtr_getParentSceneObject}, 
    {"addAttachment", _wrap_EffectRefPtr_addAttachment}, 
    {"subAttachment", _wrap_EffectRefPtr_subAttachment}, 
    {"findAttachment", _wrap_EffectRefPtr_findAttachment}, 
    {"getType", _wrap_EffectRefPtr_getType}, 
    {"shallowCopy", _wrap_EffectRefPtr_shallowCopy}, 
    {"getTypeId", _wrap_EffectRefPtr_getTypeId}, 
    {"getGroupId", _wrap_EffectRefPtr_getGroupId}, 
    {"getTypeName", _wrap_EffectRefPtr_getTypeName}, 
    {"getProducerType", _wrap_EffectRefPtr_getProducerType}, 
    {"getContainerSize", _wrap_EffectRefPtr_getContainerSize}, 
    {"getId", _wrap_EffectRefPtr_getId}, 
    {"getNumFields", _wrap_EffectRefPtr_getNumFields}, 
    {"getNumEvents", _wrap_EffectRefPtr_getNumEvents}, 
    {"isEventProducer", _wrap_EffectRefPtr_isEventProducer}, 
    {"attachActivity", _wrap_EffectRefPtr_attachActivity}, 
    {"disconnectAllSlotsEvent", _wrap_EffectRefPtr_disconnectAllSlotsEvent}, 
    {"isEmptyEvent", _wrap_EffectRefPtr_isEmptyEvent}, 
    {"numSlotsEvent", _wrap_EffectRefPtr_numSlotsEvent}, 
    {"disconnectAll", _wrap_EffectRefPtr_disconnectAll}, 
    {"getFieldDescription", _wrap_EffectRefPtr_getFieldDescription}, 
    {"getEventDescription", _wrap_EffectRefPtr_getEventDescription}, 
    {0,0}
};
static swig_lua_attribute swig_OSG_EffectRefPtr_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_EffectRefPtr_bases[] = {0,0};
static const char *swig_OSG_EffectRefPtr_base_names[] = {"OSG::AttachmentContainerRefPtr *",0};
static swig_lua_class _wrap_class_OSG_EffectRefPtr = { "EffectRefPtr", &SWIGTYPE_p_OSG__EffectRefPtr,_wrap_new_EffectRefPtr, swig_delete_EffectRefPtr, swig_OSG_EffectRefPtr_methods, swig_OSG_EffectRefPtr_attributes, swig_OSG_EffectRefPtr_bases, swig_OSG_EffectRefPtr_base_names };

static int _wrap_ApplicationPlayer_openEditor(lua_State* L) {
  int SWIG_arg = 0;
  OSG::FieldContainerRefPtr arg1 ;
  OSG::FieldContainerRefPtr *argp1 ;
  
  SWIG_check_num_args("OSG_ApplicationPlayer_openEditor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("OSG_ApplicationPlayer_openEditor",1,"OSG::FieldContainerRefPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_OSG__FieldContainerRefPtr,0))){
    SWIG_fail_ptr("ApplicationPlayer_openEditor",1,SWIGTYPE_p_OSG__FieldContainerRefPtr);
  }
  arg1 = *argp1;
  
  OSG_ApplicationPlayer_openEditor(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_OSG_ApplicationPlayer_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_OSG_ApplicationPlayer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_OSG_ApplicationPlayer_bases[] = {0};
static const char *swig_OSG_ApplicationPlayer_base_names[] = {0};
static swig_lua_class _wrap_class_OSG_ApplicationPlayer = { "ApplicationPlayer", &SWIGTYPE_p_OSG__ApplicationPlayer,0,0, swig_OSG_ApplicationPlayer_methods, swig_OSG_ApplicationPlayer_attributes, swig_OSG_ApplicationPlayer_bases, swig_OSG_ApplicationPlayer_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "SceneRefPtr_dcast", _wrap_SceneRefPtr_dcast},
    { "ProjectRefPtr_dcast", _wrap_ProjectRefPtr_dcast},
    { "SceneObjectRefPtr_dcast", _wrap_SceneObjectRefPtr_dcast},
    { "LuaBehaviorType_create",_wrap_LuaBehaviorType_create},
    { "BehaviorFactory_the", _wrap_BehaviorFactory_the},
    { "BehaviorRefPtr_dcast", _wrap_BehaviorRefPtr_dcast},
    { "LuaBehaviorRefPtr_dcast", _wrap_LuaBehaviorRefPtr_dcast},
    { "EffectRefPtr_dcast", _wrap_EffectRefPtr_dcast},
    { "ApplicationPlayer_openEditor", _wrap_ApplicationPlayer_openEditor},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_OSG__LuaActivityTo_p_OSG__Activity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Activity *)  ((OSG::LuaActivity *) x));
}
static void *_p_OSG__PhysicsBodyTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::PhysicsBody *) x));
}
static void *_p_OSG__Distribution1DTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Distribution1D *) x));
}
static void *_p_OSG__BehaviorTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Behavior *) x));
}
static void *_p_OSG__LuaBehaviorTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *)(OSG::Behavior *) ((OSG::LuaBehavior *) x));
}
static void *_p_OSG__SoundTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Sound *) x));
}
static void *_p_OSG__NodeTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Node *) x));
}
static void *_p_OSG__ComponentTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Component *) x));
}
static void *_p_OSG__SoundGroupTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::SoundGroup *) x));
}
static void *_p_OSG__AnimationTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Animation *) x));
}
static void *_p_OSG__ViewportTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Viewport *) x));
}
static void *_p_OSG__CameraTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Camera *) x));
}
static void *_p_OSG__ProjectTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Project *) x));
}
static void *_p_OSG__EffectTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Effect *) x));
}
static void *_p_OSG__AttachmentTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::Attachment *) x));
}
static void *_p_OSG__PhysicsHandlerTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::PhysicsHandler *) x));
}
static void *_p_OSG__ParticleSystemTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::ParticleSystem *) x));
}
static void *_p_OSG__GenericEventDetailsTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::EventDetails *) ((OSG::GenericEventDetails *) x));
}
static void *_p_OSG__EventDetailsTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::EventDetails *) x));
}
static void *_p_OSG__NodeCoreTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::NodeCore *) x));
}
static void *_p_OSG__AttachmentContainerTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::AttachmentContainer *) x));
}
static void *_p_OSG__FieldContainerTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *)  ((OSG::FieldContainer *) x));
}
static void *_p_OSG__WindowEventProducerTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::WindowEventProducer *) x));
}
static void *_p_OSG__PhysicsSpaceTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::PhysicsSpace *) x));
}
static void *_p_OSG__GeometryTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *)(OSG::NodeCore *) ((OSG::Geometry *) x));
}
static void *_p_OSG__LuaActivityTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *)(OSG::Activity *) ((OSG::LuaActivity *) x));
}
static void *_p_OSG__ActivityTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Activity *) x));
}
static void *_p_OSG__Distribution3DTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Distribution3D *) x));
}
static void *_p_OSG__SceneObjectTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::SceneObject *) x));
}
static void *_p_OSG__ImageTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Image *) x));
}
static void *_p_OSG__PhysicsWorldTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::PhysicsWorld *) x));
}
static void *_p_OSG__VideoWrapperTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::VideoWrapper *) x));
}
static void *_p_OSG__TextureObjChunkTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *) ((OSG::TextureObjChunk *) x));
}
static void *_p_OSG__Distribution2DTo_p_OSG__ReflexiveContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::ReflexiveContainer *) (OSG::FieldContainer *)(OSG::AttachmentContainer *) ((OSG::Distribution2D *) x));
}
static void *_p_OSG__PhysicsBodyTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::PhysicsBody *) x));
}
static void *_p_OSG__Distribution1DTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Distribution1D *) x));
}
static void *_p_OSG__BehaviorTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Behavior *) x));
}
static void *_p_OSG__LuaBehaviorTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *)(OSG::Behavior *) ((OSG::LuaBehavior *) x));
}
static void *_p_OSG__SoundTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Sound *) x));
}
static void *_p_OSG__NodeTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Node *) x));
}
static void *_p_OSG__ComponentTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Component *) x));
}
static void *_p_OSG__SoundGroupTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::SoundGroup *) x));
}
static void *_p_OSG__AnimationTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Animation *) x));
}
static void *_p_OSG__ViewportTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Viewport *) x));
}
static void *_p_OSG__CameraTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Camera *) x));
}
static void *_p_OSG__ProjectTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Project *) x));
}
static void *_p_OSG__EffectTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Effect *) x));
}
static void *_p_OSG__AttachmentTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::Attachment *) x));
}
static void *_p_OSG__PhysicsHandlerTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::PhysicsHandler *) x));
}
static void *_p_OSG__ParticleSystemTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::ParticleSystem *) x));
}
static void *_p_OSG__GenericEventDetailsTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::EventDetails *) ((OSG::GenericEventDetails *) x));
}
static void *_p_OSG__EventDetailsTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::EventDetails *) x));
}
static void *_p_OSG__NodeCoreTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::NodeCore *) x));
}
static void *_p_OSG__AttachmentContainerTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::AttachmentContainer *) x));
}
static void *_p_OSG__WindowEventProducerTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::WindowEventProducer *) x));
}
static void *_p_OSG__PhysicsSpaceTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::PhysicsSpace *) x));
}
static void *_p_OSG__GeometryTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *)(OSG::NodeCore *) ((OSG::Geometry *) x));
}
static void *_p_OSG__LuaActivityTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *)(OSG::Activity *) ((OSG::LuaActivity *) x));
}
static void *_p_OSG__ActivityTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Activity *) x));
}
static void *_p_OSG__Distribution3DTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Distribution3D *) x));
}
static void *_p_OSG__SceneObjectTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::SceneObject *) x));
}
static void *_p_OSG__ImageTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Image *) x));
}
static void *_p_OSG__PhysicsWorldTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::PhysicsWorld *) x));
}
static void *_p_OSG__VideoWrapperTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::VideoWrapper *) x));
}
static void *_p_OSG__TextureObjChunkTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *)  ((OSG::TextureObjChunk *) x));
}
static void *_p_OSG__Distribution2DTo_p_OSG__FieldContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainer *) (OSG::AttachmentContainer *) ((OSG::Distribution2D *) x));
}
static void *_p_OSG__Distribution1DTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Distribution1D *) x));
}
static void *_p_OSG__BehaviorTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Behavior *) x));
}
static void *_p_OSG__LuaBehaviorTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *) (OSG::Behavior *) ((OSG::LuaBehavior *) x));
}
static void *_p_OSG__SoundTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Sound *) x));
}
static void *_p_OSG__ComponentTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Component *) x));
}
static void *_p_OSG__NodeTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Node *) x));
}
static void *_p_OSG__AnimationTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Animation *) x));
}
static void *_p_OSG__SoundGroupTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::SoundGroup *) x));
}
static void *_p_OSG__ViewportTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Viewport *) x));
}
static void *_p_OSG__CameraTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Camera *) x));
}
static void *_p_OSG__ProjectTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Project *) x));
}
static void *_p_OSG__EffectTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Effect *) x));
}
static void *_p_OSG__ParticleSystemTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::ParticleSystem *) x));
}
static void *_p_OSG__NodeCoreTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::NodeCore *) x));
}
static void *_p_OSG__WindowEventProducerTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::WindowEventProducer *) x));
}
static void *_p_OSG__GeometryTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *) (OSG::NodeCore *) ((OSG::Geometry *) x));
}
static void *_p_OSG__LuaActivityTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *) (OSG::Activity *) ((OSG::LuaActivity *) x));
}
static void *_p_OSG__ActivityTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Activity *) x));
}
static void *_p_OSG__Distribution3DTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Distribution3D *) x));
}
static void *_p_OSG__SceneObjectTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::SceneObject *) x));
}
static void *_p_OSG__ImageTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Image *) x));
}
static void *_p_OSG__VideoWrapperTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::VideoWrapper *) x));
}
static void *_p_OSG__Distribution2DTo_p_OSG__AttachmentContainer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainer *)  ((OSG::Distribution2D *) x));
}
static void *_p_OSG__LuaBehaviorTo_p_OSG__Behavior(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::Behavior *)  ((OSG::LuaBehavior *) x));
}
static void *_p_OSG__LuaBehaviorRefPtrTo_p_OSG__BehaviorRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::BehaviorRefPtr *)  ((OSG::LuaBehaviorRefPtr *) x));
}
static void *_p_OSG__WindowEventProducerRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::WindowEventProducerRefPtr *) x));
}
static void *_p_OSG__ViewportRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ViewportRefPtr *) x));
}
static void *_p_OSG__AttachmentContainerRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::AttachmentContainerRefPtr *) x));
}
static void *_p_OSG__AttachmentRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::AttachmentRefPtr *) x));
}
static void *_p_OSG__PhysicsHandlerRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::PhysicsHandlerRefPtr *) x));
}
static void *_p_OSG__PhysicsWorldRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::PhysicsWorldRefPtr *) x));
}
static void *_p_OSG__ComponentRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ComponentRefPtr *) x));
}
static void *_p_OSG__SoundRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::SoundRefPtr *) x));
}
static void *_p_OSG__SoundGroupRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::SoundGroupRefPtr *) x));
}
static void *_p_OSG__AnimationRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::AnimationRefPtr *) x));
}
static void *_p_OSG__VideoWrapperRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::VideoWrapperRefPtr *) x));
}
static void *_p_OSG__Distribution1DRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::Distribution1DRefPtr *) x));
}
static void *_p_OSG__Distribution2DRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::Distribution2DRefPtr *) x));
}
static void *_p_OSG__Distribution3DRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::Distribution3DRefPtr *) x));
}
static void *_p_OSG__ProjectRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ProjectRefPtr *) x));
}
static void *_p_OSG__SceneObjectRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::SceneObjectRefPtr *) x));
}
static void *_p_OSG__BehaviorRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::BehaviorRefPtr *) x));
}
static void *_p_OSG__LuaBehaviorRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *)(OSG::BehaviorRefPtr *) ((OSG::LuaBehaviorRefPtr *) x));
}
static void *_p_OSG__EffectRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::EffectRefPtr *) x));
}
static void *_p_OSG__LuaActivityRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *)(OSG::ActivityRefPtr *) ((OSG::LuaActivityRefPtr *) x));
}
static void *_p_OSG__ActivityRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ActivityRefPtr *) x));
}
static void *_p_OSG__GenericEventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::EventDetailsRefPtr *) ((OSG::GenericEventDetailsRefPtr *) x));
}
static void *_p_OSG__EventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::EventDetailsRefPtr *) x));
}
static void *_p_OSG__TextureObjChunkRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::TextureObjChunkRefPtr *) x));
}
static void *_p_OSG__ImageRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ImageRefPtr *) x));
}
static void *_p_OSG__CameraRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::CameraRefPtr *) x));
}
static void *_p_OSG__NodeRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::NodeRefPtr *) x));
}
static void *_p_OSG__GeometryRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *)(OSG::NodeCoreRefPtr *) ((OSG::GeometryRefPtr *) x));
}
static void *_p_OSG__NodeCoreRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::NodeCoreRefPtr *) x));
}
static void *_p_OSG__PhysicsBodyRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::PhysicsBodyRefPtr *) x));
}
static void *_p_OSG__PhysicsSpaceRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *)  ((OSG::PhysicsSpaceRefPtr *) x));
}
static void *_p_OSG__ParticleSystemRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::ParticleSystemRefPtr *) x));
}
static void *_p_OSG__SceneRefPtrTo_p_OSG__FieldContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::FieldContainerRefPtr *) (OSG::AttachmentContainerRefPtr *) ((OSG::SceneRefPtr *) x));
}
static void *_p_OSG__AnimationRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::AnimationRefPtr *) x));
}
static void *_p_OSG__SoundGroupRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::SoundGroupRefPtr *) x));
}
static void *_p_OSG__SoundRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::SoundRefPtr *) x));
}
static void *_p_OSG__ComponentRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ComponentRefPtr *) x));
}
static void *_p_OSG__WindowEventProducerRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::WindowEventProducerRefPtr *) x));
}
static void *_p_OSG__ViewportRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ViewportRefPtr *) x));
}
static void *_p_OSG__VideoWrapperRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::VideoWrapperRefPtr *) x));
}
static void *_p_OSG__Distribution1DRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::Distribution1DRefPtr *) x));
}
static void *_p_OSG__Distribution2DRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::Distribution2DRefPtr *) x));
}
static void *_p_OSG__Distribution3DRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::Distribution3DRefPtr *) x));
}
static void *_p_OSG__ProjectRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ProjectRefPtr *) x));
}
static void *_p_OSG__SceneObjectRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::SceneObjectRefPtr *) x));
}
static void *_p_OSG__BehaviorRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::BehaviorRefPtr *) x));
}
static void *_p_OSG__LuaBehaviorRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *) (OSG::BehaviorRefPtr *) ((OSG::LuaBehaviorRefPtr *) x));
}
static void *_p_OSG__EffectRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::EffectRefPtr *) x));
}
static void *_p_OSG__ParticleSystemRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ParticleSystemRefPtr *) x));
}
static void *_p_OSG__LuaActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *) (OSG::ActivityRefPtr *) ((OSG::LuaActivityRefPtr *) x));
}
static void *_p_OSG__ActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ActivityRefPtr *) x));
}
static void *_p_OSG__ImageRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::ImageRefPtr *) x));
}
static void *_p_OSG__CameraRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::CameraRefPtr *) x));
}
static void *_p_OSG__NodeRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::NodeRefPtr *) x));
}
static void *_p_OSG__GeometryRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *) (OSG::NodeCoreRefPtr *) ((OSG::GeometryRefPtr *) x));
}
static void *_p_OSG__NodeCoreRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::NodeCoreRefPtr *) x));
}
static void *_p_OSG__SceneRefPtrTo_p_OSG__AttachmentContainerRefPtr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::AttachmentContainerRefPtr *)  ((OSG::SceneRefPtr *) x));
}
static void *_p_OSG__LuaBehaviorTypeTo_p_OSG__BehaviorType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::BehaviorType *)  ((OSG::LuaBehaviorType *) x));
}
static void *_p_OSG__DataTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *)  ((OSG::DataType *) x));
}
static void *_p_OSG__BehaviorTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *)  ((OSG::BehaviorType *) x));
}
static void *_p_OSG__LuaBehaviorTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *) (OSG::BehaviorType *) ((OSG::LuaBehaviorType *) x));
}
static void *_p_OSG__FieldTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *) (OSG::DataType *) ((OSG::FieldType *) x));
}
static void *_p_OSG__EventProducerTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *)  ((OSG::EventProducerType *) x));
}
static void *_p_OSG__ReflexiveContainerTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *) (OSG::DataType *) ((OSG::ReflexiveContainerType *) x));
}
static void *_p_OSG__FieldContainerTypeTo_p_OSG__TypeBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OSG::TypeBase *) (OSG::DataType *)(OSG::ReflexiveContainerType *) ((OSG::FieldContainerType *) x));
}
static swig_type_info _swigt__p_Inherited = {"_p_Inherited", "Inherited *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MFChildrenType = {"_p_MFChildrenType", "MFChildrenType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MatrixType = {"_p_MatrixType", "MatrixType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Activity = {"_p_OSG__Activity", "OSG::Activity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__LuaActivity = {"_p_OSG__LuaActivity", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__AnimationRefPtr = {"_p_OSG__AnimationRefPtr", "OSG::AnimationRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__ApplicationPlayer = {"_p_OSG__ApplicationPlayer", "OSG::ApplicationPlayer *", 0, 0, (void*)&_wrap_class_OSG_ApplicationPlayer, 0};
static swig_type_info _swigt__p_OSG__AttachmentContainer = {"_p_OSG__AttachmentContainer", "OSG::AttachmentContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Distribution1D = {"_p_OSG__Distribution1D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Camera = {"_p_OSG__Camera", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Sound = {"_p_OSG__Sound", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Component = {"_p_OSG__Component", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Animation = {"_p_OSG__Animation", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__SoundGroup = {"_p_OSG__SoundGroup", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Viewport = {"_p_OSG__Viewport", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__ParticleSystem = {"_p_OSG__ParticleSystem", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__NodeCore = {"_p_OSG__NodeCore", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__WindowEventProducer = {"_p_OSG__WindowEventProducer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Geometry = {"_p_OSG__Geometry", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Distribution3D = {"_p_OSG__Distribution3D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Node = {"_p_OSG__Node", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__VideoWrapper = {"_p_OSG__VideoWrapper", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Image = {"_p_OSG__Image", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Distribution2D = {"_p_OSG__Distribution2D", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__AttachmentContainerRefPtr = {"_p_OSG__AttachmentContainerRefPtr", "OSG::AttachmentContainerRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__SoundGroupRefPtr = {"_p_OSG__SoundGroupRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__SoundRefPtr = {"_p_OSG__SoundRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__ComponentRefPtr = {"_p_OSG__ComponentRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__WindowEventProducerRefPtr = {"_p_OSG__WindowEventProducerRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__ViewportRefPtr = {"_p_OSG__ViewportRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__VideoWrapperRefPtr = {"_p_OSG__VideoWrapperRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Distribution1DRefPtr = {"_p_OSG__Distribution1DRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Distribution2DRefPtr = {"_p_OSG__Distribution2DRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Distribution3DRefPtr = {"_p_OSG__Distribution3DRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__LuaActivityRefPtr = {"_p_OSG__LuaActivityRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__ActivityRefPtr = {"_p_OSG__ActivityRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__ImageRefPtr = {"_p_OSG__ImageRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__CameraRefPtr = {"_p_OSG__CameraRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__GeometryRefPtr = {"_p_OSG__GeometryRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__NodeCoreRefPtr = {"_p_OSG__NodeCoreRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__AttachmentRefPtr = {"_p_OSG__AttachmentRefPtr", "OSG::AttachmentRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Behavior = {"_p_OSG__Behavior", "OSG::Behavior *", 0, 0, (void*)&_wrap_class_OSG_Behavior, 0};
static swig_type_info _swigt__p_OSG__BehaviorFactory = {"_p_OSG__BehaviorFactory", "OSG::BehaviorFactory *", 0, 0, (void*)&_wrap_class_OSG_BehaviorFactory, 0};
static swig_type_info _swigt__p_OSG__BehaviorRefPtr = {"_p_OSG__BehaviorRefPtr", "OSG::BehaviorRefPtr *", 0, 0, (void*)&_wrap_class_OSG_BehaviorRefPtr, 0};
static swig_type_info _swigt__p_OSG__BehaviorType = {"_p_OSG__BehaviorType", "OSG::BehaviorType *", 0, 0, (void*)&_wrap_class_OSG_BehaviorType, 0};
static swig_type_info _swigt__p_OSG__Effect = {"_p_OSG__Effect", "OSG::Effect *", 0, 0, (void*)&_wrap_class_OSG_Effect, 0};
static swig_type_info _swigt__p_OSG__EffectRefPtr = {"_p_OSG__EffectRefPtr", "OSG::EffectRefPtr *", 0, 0, (void*)&_wrap_class_OSG_EffectRefPtr, 0};
static swig_type_info _swigt__p_OSG__EventDescription = {"_p_OSG__EventDescription", "OSG::EventDescription *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__EventProducerType = {"_p_OSG__EventProducerType", "OSG::EventProducerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__FieldContainer = {"_p_OSG__FieldContainer", "OSG::FieldContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__PhysicsBody = {"_p_OSG__PhysicsBody", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__Attachment = {"_p_OSG__Attachment", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__PhysicsHandler = {"_p_OSG__PhysicsHandler", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__GenericEventDetails = {"_p_OSG__GenericEventDetails", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__EventDetails = {"_p_OSG__EventDetails", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__PhysicsSpace = {"_p_OSG__PhysicsSpace", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__PhysicsWorld = {"_p_OSG__PhysicsWorld", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__TextureObjChunk = {"_p_OSG__TextureObjChunk", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__FieldContainerRefPtr = {"_p_OSG__FieldContainerRefPtr", "OSG::FieldContainerRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__PhysicsWorldRefPtr = {"_p_OSG__PhysicsWorldRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__PhysicsHandlerRefPtr = {"_p_OSG__PhysicsHandlerRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__EventDetailsRefPtr = {"_p_OSG__EventDetailsRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__TextureObjChunkRefPtr = {"_p_OSG__TextureObjChunkRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__PhysicsBodyRefPtr = {"_p_OSG__PhysicsBodyRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__PhysicsSpaceRefPtr = {"_p_OSG__PhysicsSpaceRefPtr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__FieldContainerType = {"_p_OSG__FieldContainerType", "OSG::FieldContainerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__FieldDescriptionBase = {"_p_OSG__FieldDescriptionBase", "OSG::FieldDescriptionBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__GenericEventDetailsRefPtr = {"_p_OSG__GenericEventDetailsRefPtr", "OSG::GenericEventDetailsRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__LuaBehavior = {"_p_OSG__LuaBehavior", "OSG::LuaBehavior *", 0, 0, (void*)&_wrap_class_OSG_LuaBehavior, 0};
static swig_type_info _swigt__p_OSG__LuaBehaviorRefPtr = {"_p_OSG__LuaBehaviorRefPtr", "OSG::LuaBehaviorRefPtr *", 0, 0, (void*)&_wrap_class_OSG_LuaBehaviorRefPtr, 0};
static swig_type_info _swigt__p_OSG__LuaBehaviorType = {"_p_OSG__LuaBehaviorType", "OSG::LuaBehaviorType *", 0, 0, (void*)&_wrap_class_OSG_LuaBehaviorType, 0};
static swig_type_info _swigt__p_OSG__NodeRefPtr = {"_p_OSG__NodeRefPtr", "OSG::NodeRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__ParticleSystemRefPtr = {"_p_OSG__ParticleSystemRefPtr", "OSG::ParticleSystemRefPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Project = {"_p_OSG__Project", "OSG::Project *", 0, 0, (void*)&_wrap_class_OSG_Project, 0};
static swig_type_info _swigt__p_OSG__ProjectRefPtr = {"_p_OSG__ProjectRefPtr", "OSG::ProjectRefPtr *", 0, 0, (void*)&_wrap_class_OSG_ProjectRefPtr, 0};
static swig_type_info _swigt__p_OSG__ReflexiveContainer = {"_p_OSG__ReflexiveContainer", "OSG::ReflexiveContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__Scene = {"_p_OSG__Scene", "OSG::Scene *", 0, 0, (void*)&_wrap_class_OSG_Scene, 0};
static swig_type_info _swigt__p_OSG__SceneObject = {"_p_OSG__SceneObject", "OSG::SceneObject *", 0, 0, (void*)&_wrap_class_OSG_SceneObject, 0};
static swig_type_info _swigt__p_OSG__SceneObjectRefPtr = {"_p_OSG__SceneObjectRefPtr", "OSG::SceneObjectRefPtr *", 0, 0, (void*)&_wrap_class_OSG_SceneObjectRefPtr, 0};
static swig_type_info _swigt__p_OSG__SceneRefPtr = {"_p_OSG__SceneRefPtr", "OSG::SceneRefPtr *", 0, 0, (void*)&_wrap_class_OSG_SceneRefPtr, 0};
static swig_type_info _swigt__p_OSG__TypeBase = {"_p_OSG__TypeBase", "OSG::TypeBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OSG__DataType = {"_p_OSG__DataType", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__FieldType = {"_p_OSG__FieldType", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_OSG__ReflexiveContainerType = {"_p_OSG__ReflexiveContainerType", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ParentContainer = {"_p_ParentContainer", "ParentContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlaneSet = {"_p_PlaneSet", "PlaneSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointType = {"_p_PointType", "PointType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PointType3f = {"_p_PointType3f", "PointType3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QuaternionType = {"_p_QuaternionType", "QuaternionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFCoreType = {"_p_SFCoreType", "SFCoreType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFParentType = {"_p_SFParentType", "SFParentType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFTravMaskType = {"_p_SFTravMaskType", "SFTravMaskType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SFVolumeType = {"_p_SFVolumeType", "SFVolumeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TypeObject = {"_p_TypeObject", "TypeObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorType = {"_p_VectorType", "VectorType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectorType3f = {"_p_VectorType3f", "VectorType3f *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VolumeType = {"_p_VolumeType", "VolumeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__signals2__connection = {"_p_boost__signals2__connection", "boost::signals2::connection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|OSG::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "OSG::Time *|double *|OSG::Real64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|OSG::Real16 *|OSG::Real32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "OSG::Int16 *|int *|OSG::Int32 *|OSG::Int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "OSG::TimeStamp *|OSG::Int64 *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *|OSG::Real128 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|OSG::SChar8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|OSG::UChar8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "OSG::UInt16 *|OSG::UInt32 *|unsigned int *|OSG::UInt8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "OSG::UInt64 *|unsigned long *|OSG::BitVector *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Inherited,
  &_swigt__p_MFChildrenType,
  &_swigt__p_MatrixType,
  &_swigt__p_OSG__Activity,
  &_swigt__p_OSG__ActivityRefPtr,
  &_swigt__p_OSG__Animation,
  &_swigt__p_OSG__AnimationRefPtr,
  &_swigt__p_OSG__ApplicationPlayer,
  &_swigt__p_OSG__Attachment,
  &_swigt__p_OSG__AttachmentContainer,
  &_swigt__p_OSG__AttachmentContainerRefPtr,
  &_swigt__p_OSG__AttachmentRefPtr,
  &_swigt__p_OSG__Behavior,
  &_swigt__p_OSG__BehaviorFactory,
  &_swigt__p_OSG__BehaviorRefPtr,
  &_swigt__p_OSG__BehaviorType,
  &_swigt__p_OSG__Camera,
  &_swigt__p_OSG__CameraRefPtr,
  &_swigt__p_OSG__Component,
  &_swigt__p_OSG__ComponentRefPtr,
  &_swigt__p_OSG__DataType,
  &_swigt__p_OSG__Distribution1D,
  &_swigt__p_OSG__Distribution1DRefPtr,
  &_swigt__p_OSG__Distribution2D,
  &_swigt__p_OSG__Distribution2DRefPtr,
  &_swigt__p_OSG__Distribution3D,
  &_swigt__p_OSG__Distribution3DRefPtr,
  &_swigt__p_OSG__Effect,
  &_swigt__p_OSG__EffectRefPtr,
  &_swigt__p_OSG__EventDescription,
  &_swigt__p_OSG__EventDetails,
  &_swigt__p_OSG__EventDetailsRefPtr,
  &_swigt__p_OSG__EventProducerType,
  &_swigt__p_OSG__FieldContainer,
  &_swigt__p_OSG__FieldContainerRefPtr,
  &_swigt__p_OSG__FieldContainerType,
  &_swigt__p_OSG__FieldDescriptionBase,
  &_swigt__p_OSG__FieldType,
  &_swigt__p_OSG__GenericEventDetails,
  &_swigt__p_OSG__GenericEventDetailsRefPtr,
  &_swigt__p_OSG__Geometry,
  &_swigt__p_OSG__GeometryRefPtr,
  &_swigt__p_OSG__Image,
  &_swigt__p_OSG__ImageRefPtr,
  &_swigt__p_OSG__LuaActivity,
  &_swigt__p_OSG__LuaActivityRefPtr,
  &_swigt__p_OSG__LuaBehavior,
  &_swigt__p_OSG__LuaBehaviorRefPtr,
  &_swigt__p_OSG__LuaBehaviorType,
  &_swigt__p_OSG__Node,
  &_swigt__p_OSG__NodeCore,
  &_swigt__p_OSG__NodeCoreRefPtr,
  &_swigt__p_OSG__NodeRefPtr,
  &_swigt__p_OSG__ParticleSystem,
  &_swigt__p_OSG__ParticleSystemRefPtr,
  &_swigt__p_OSG__PhysicsBody,
  &_swigt__p_OSG__PhysicsBodyRefPtr,
  &_swigt__p_OSG__PhysicsHandler,
  &_swigt__p_OSG__PhysicsHandlerRefPtr,
  &_swigt__p_OSG__PhysicsSpace,
  &_swigt__p_OSG__PhysicsSpaceRefPtr,
  &_swigt__p_OSG__PhysicsWorld,
  &_swigt__p_OSG__PhysicsWorldRefPtr,
  &_swigt__p_OSG__Project,
  &_swigt__p_OSG__ProjectRefPtr,
  &_swigt__p_OSG__ReflexiveContainer,
  &_swigt__p_OSG__ReflexiveContainerType,
  &_swigt__p_OSG__Scene,
  &_swigt__p_OSG__SceneObject,
  &_swigt__p_OSG__SceneObjectRefPtr,
  &_swigt__p_OSG__SceneRefPtr,
  &_swigt__p_OSG__Sound,
  &_swigt__p_OSG__SoundGroup,
  &_swigt__p_OSG__SoundGroupRefPtr,
  &_swigt__p_OSG__SoundRefPtr,
  &_swigt__p_OSG__TextureObjChunk,
  &_swigt__p_OSG__TextureObjChunkRefPtr,
  &_swigt__p_OSG__TypeBase,
  &_swigt__p_OSG__VideoWrapper,
  &_swigt__p_OSG__VideoWrapperRefPtr,
  &_swigt__p_OSG__Viewport,
  &_swigt__p_OSG__ViewportRefPtr,
  &_swigt__p_OSG__WindowEventProducer,
  &_swigt__p_OSG__WindowEventProducerRefPtr,
  &_swigt__p_ParentContainer,
  &_swigt__p_PlaneSet,
  &_swigt__p_PointType,
  &_swigt__p_PointType3f,
  &_swigt__p_QuaternionType,
  &_swigt__p_SFCoreType,
  &_swigt__p_SFParentType,
  &_swigt__p_SFTravMaskType,
  &_swigt__p_SFVolumeType,
  &_swigt__p_TypeObject,
  &_swigt__p_ValueType,
  &_swigt__p_VectorType,
  &_swigt__p_VectorType3f,
  &_swigt__p_VolumeType,
  &_swigt__p_boost__signals2__connection,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_mapped_type,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
};

static swig_cast_info _swigc__p_Inherited[] = {  {&_swigt__p_Inherited, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MFChildrenType[] = {  {&_swigt__p_MFChildrenType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixType[] = {  {&_swigt__p_MatrixType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__LuaActivity[] = {{&_swigt__p_OSG__LuaActivity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Activity[] = {  {&_swigt__p_OSG__Activity, 0, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__Activity, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__AnimationRefPtr[] = {  {&_swigt__p_OSG__AnimationRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ApplicationPlayer[] = {  {&_swigt__p_OSG__ApplicationPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution1D[] = {{&_swigt__p_OSG__Distribution1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Camera[] = {{&_swigt__p_OSG__Camera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Sound[] = {{&_swigt__p_OSG__Sound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Component[] = {{&_swigt__p_OSG__Component, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Animation[] = {{&_swigt__p_OSG__Animation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__SoundGroup[] = {{&_swigt__p_OSG__SoundGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Viewport[] = {{&_swigt__p_OSG__Viewport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ParticleSystem[] = {{&_swigt__p_OSG__ParticleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__NodeCore[] = {{&_swigt__p_OSG__NodeCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__WindowEventProducer[] = {{&_swigt__p_OSG__WindowEventProducer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Geometry[] = {{&_swigt__p_OSG__Geometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution3D[] = {{&_swigt__p_OSG__Distribution3D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Node[] = {{&_swigt__p_OSG__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__VideoWrapper[] = {{&_swigt__p_OSG__VideoWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Image[] = {{&_swigt__p_OSG__Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution2D[] = {{&_swigt__p_OSG__Distribution2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__AttachmentContainer[] = {  {&_swigt__p_OSG__Distribution1D, _p_OSG__Distribution1DTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Behavior, _p_OSG__BehaviorTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__LuaBehavior, _p_OSG__LuaBehaviorTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Camera, _p_OSG__CameraTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Sound, _p_OSG__SoundTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Component, _p_OSG__ComponentTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Effect, _p_OSG__EffectTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Animation, _p_OSG__AnimationTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__SoundGroup, _p_OSG__SoundGroupTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Viewport, _p_OSG__ViewportTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Project, _p_OSG__ProjectTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__ParticleSystem, _p_OSG__ParticleSystemTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__NodeCore, _p_OSG__NodeCoreTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__AttachmentContainer, 0, 0, 0},  {&_swigt__p_OSG__WindowEventProducer, _p_OSG__WindowEventProducerTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Geometry, _p_OSG__GeometryTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Activity, _p_OSG__ActivityTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Distribution3D, _p_OSG__Distribution3DTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__SceneObject, _p_OSG__SceneObjectTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Node, _p_OSG__NodeTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__VideoWrapper, _p_OSG__VideoWrapperTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Image, _p_OSG__ImageTo_p_OSG__AttachmentContainer, 0, 0},  {&_swigt__p_OSG__Distribution2D, _p_OSG__Distribution2DTo_p_OSG__AttachmentContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__SoundGroupRefPtr[] = {{&_swigt__p_OSG__SoundGroupRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__SoundRefPtr[] = {{&_swigt__p_OSG__SoundRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ComponentRefPtr[] = {{&_swigt__p_OSG__ComponentRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__WindowEventProducerRefPtr[] = {{&_swigt__p_OSG__WindowEventProducerRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ViewportRefPtr[] = {{&_swigt__p_OSG__ViewportRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__VideoWrapperRefPtr[] = {{&_swigt__p_OSG__VideoWrapperRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution1DRefPtr[] = {{&_swigt__p_OSG__Distribution1DRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution2DRefPtr[] = {{&_swigt__p_OSG__Distribution2DRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Distribution3DRefPtr[] = {{&_swigt__p_OSG__Distribution3DRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__LuaActivityRefPtr[] = {{&_swigt__p_OSG__LuaActivityRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ActivityRefPtr[] = {{&_swigt__p_OSG__ActivityRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ImageRefPtr[] = {{&_swigt__p_OSG__ImageRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__CameraRefPtr[] = {{&_swigt__p_OSG__CameraRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__GeometryRefPtr[] = {{&_swigt__p_OSG__GeometryRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__NodeCoreRefPtr[] = {{&_swigt__p_OSG__NodeCoreRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__AttachmentContainerRefPtr[] = {  {&_swigt__p_OSG__SoundGroupRefPtr, _p_OSG__SoundGroupRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__SoundRefPtr, _p_OSG__SoundRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ComponentRefPtr, _p_OSG__ComponentRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__WindowEventProducerRefPtr, _p_OSG__WindowEventProducerRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ViewportRefPtr, _p_OSG__ViewportRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__VideoWrapperRefPtr, _p_OSG__VideoWrapperRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__Distribution1DRefPtr, _p_OSG__Distribution1DRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__Distribution2DRefPtr, _p_OSG__Distribution2DRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__Distribution3DRefPtr, _p_OSG__Distribution3DRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ProjectRefPtr, _p_OSG__ProjectRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__SceneObjectRefPtr, _p_OSG__SceneObjectRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__LuaBehaviorRefPtr, _p_OSG__LuaBehaviorRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__BehaviorRefPtr, _p_OSG__BehaviorRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__AttachmentContainerRefPtr, 0, 0, 0},  {&_swigt__p_OSG__AnimationRefPtr, _p_OSG__AnimationRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__EffectRefPtr, _p_OSG__EffectRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ParticleSystemRefPtr, _p_OSG__ParticleSystemRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__LuaActivityRefPtr, _p_OSG__LuaActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ActivityRefPtr, _p_OSG__ActivityRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ImageRefPtr, _p_OSG__ImageRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__CameraRefPtr, _p_OSG__CameraRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__NodeRefPtr, _p_OSG__NodeRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__GeometryRefPtr, _p_OSG__GeometryRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__NodeCoreRefPtr, _p_OSG__NodeCoreRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},  {&_swigt__p_OSG__SceneRefPtr, _p_OSG__SceneRefPtrTo_p_OSG__AttachmentContainerRefPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__AttachmentRefPtr[] = {  {&_swigt__p_OSG__AttachmentRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Behavior[] = {  {&_swigt__p_OSG__Behavior, 0, 0, 0},  {&_swigt__p_OSG__LuaBehavior, _p_OSG__LuaBehaviorTo_p_OSG__Behavior, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__BehaviorFactory[] = {  {&_swigt__p_OSG__BehaviorFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__BehaviorRefPtr[] = {  {&_swigt__p_OSG__BehaviorRefPtr, 0, 0, 0},  {&_swigt__p_OSG__LuaBehaviorRefPtr, _p_OSG__LuaBehaviorRefPtrTo_p_OSG__BehaviorRefPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__BehaviorType[] = {  {&_swigt__p_OSG__BehaviorType, 0, 0, 0},  {&_swigt__p_OSG__LuaBehaviorType, _p_OSG__LuaBehaviorTypeTo_p_OSG__BehaviorType, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Effect[] = {  {&_swigt__p_OSG__Effect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EffectRefPtr[] = {  {&_swigt__p_OSG__EffectRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventDescription[] = {  {&_swigt__p_OSG__EventDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventProducerType[] = {  {&_swigt__p_OSG__EventProducerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsBody[] = {{&_swigt__p_OSG__PhysicsBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Attachment[] = {{&_swigt__p_OSG__Attachment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsHandler[] = {{&_swigt__p_OSG__PhysicsHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__GenericEventDetails[] = {{&_swigt__p_OSG__GenericEventDetails, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventDetails[] = {{&_swigt__p_OSG__EventDetails, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsSpace[] = {{&_swigt__p_OSG__PhysicsSpace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsWorld[] = {{&_swigt__p_OSG__PhysicsWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__TextureObjChunk[] = {{&_swigt__p_OSG__TextureObjChunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldContainer[] = {  {&_swigt__p_OSG__PhysicsBody, _p_OSG__PhysicsBodyTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Distribution1D, _p_OSG__Distribution1DTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Behavior, _p_OSG__BehaviorTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__LuaBehavior, _p_OSG__LuaBehaviorTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Camera, _p_OSG__CameraTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Sound, _p_OSG__SoundTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Component, _p_OSG__ComponentTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Effect, _p_OSG__EffectTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Animation, _p_OSG__AnimationTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__SoundGroup, _p_OSG__SoundGroupTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Viewport, _p_OSG__ViewportTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Project, _p_OSG__ProjectTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Attachment, _p_OSG__AttachmentTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__PhysicsHandler, _p_OSG__PhysicsHandlerTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__ParticleSystem, _p_OSG__ParticleSystemTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__GenericEventDetails, _p_OSG__GenericEventDetailsTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__EventDetails, _p_OSG__EventDetailsTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__NodeCore, _p_OSG__NodeCoreTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__FieldContainer, 0, 0, 0},  {&_swigt__p_OSG__AttachmentContainer, _p_OSG__AttachmentContainerTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__WindowEventProducer, _p_OSG__WindowEventProducerTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__PhysicsSpace, _p_OSG__PhysicsSpaceTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Geometry, _p_OSG__GeometryTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Activity, _p_OSG__ActivityTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Distribution3D, _p_OSG__Distribution3DTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__SceneObject, _p_OSG__SceneObjectTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Node, _p_OSG__NodeTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__VideoWrapper, _p_OSG__VideoWrapperTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__PhysicsWorld, _p_OSG__PhysicsWorldTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Image, _p_OSG__ImageTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__Distribution2D, _p_OSG__Distribution2DTo_p_OSG__FieldContainer, 0, 0},  {&_swigt__p_OSG__TextureObjChunk, _p_OSG__TextureObjChunkTo_p_OSG__FieldContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsWorldRefPtr[] = {{&_swigt__p_OSG__PhysicsWorldRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsHandlerRefPtr[] = {{&_swigt__p_OSG__PhysicsHandlerRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__EventDetailsRefPtr[] = {{&_swigt__p_OSG__EventDetailsRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__TextureObjChunkRefPtr[] = {{&_swigt__p_OSG__TextureObjChunkRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsBodyRefPtr[] = {{&_swigt__p_OSG__PhysicsBodyRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__PhysicsSpaceRefPtr[] = {{&_swigt__p_OSG__PhysicsSpaceRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldContainerRefPtr[] = {  {&_swigt__p_OSG__PhysicsWorldRefPtr, _p_OSG__PhysicsWorldRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__PhysicsHandlerRefPtr, _p_OSG__PhysicsHandlerRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__AttachmentRefPtr, _p_OSG__AttachmentRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__AnimationRefPtr, _p_OSG__AnimationRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__SoundGroupRefPtr, _p_OSG__SoundGroupRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__SoundRefPtr, _p_OSG__SoundRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__FieldContainerRefPtr, 0, 0, 0},  {&_swigt__p_OSG__EffectRefPtr, _p_OSG__EffectRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__LuaBehaviorRefPtr, _p_OSG__LuaBehaviorRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__BehaviorRefPtr, _p_OSG__BehaviorRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__SceneObjectRefPtr, _p_OSG__SceneObjectRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ProjectRefPtr, _p_OSG__ProjectRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__Distribution3DRefPtr, _p_OSG__Distribution3DRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__WindowEventProducerRefPtr, _p_OSG__WindowEventProducerRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ViewportRefPtr, _p_OSG__ViewportRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__AttachmentContainerRefPtr, _p_OSG__AttachmentContainerRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__Distribution2DRefPtr, _p_OSG__Distribution2DRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__Distribution1DRefPtr, _p_OSG__Distribution1DRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__VideoWrapperRefPtr, _p_OSG__VideoWrapperRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ComponentRefPtr, _p_OSG__ComponentRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__GenericEventDetailsRefPtr, _p_OSG__GenericEventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__EventDetailsRefPtr, _p_OSG__EventDetailsRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__TextureObjChunkRefPtr, _p_OSG__TextureObjChunkRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__PhysicsBodyRefPtr, _p_OSG__PhysicsBodyRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__PhysicsSpaceRefPtr, _p_OSG__PhysicsSpaceRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__SceneRefPtr, _p_OSG__SceneRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__NodeCoreRefPtr, _p_OSG__NodeCoreRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__GeometryRefPtr, _p_OSG__GeometryRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__NodeRefPtr, _p_OSG__NodeRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__CameraRefPtr, _p_OSG__CameraRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ImageRefPtr, _p_OSG__ImageRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ActivityRefPtr, _p_OSG__ActivityRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__LuaActivityRefPtr, _p_OSG__LuaActivityRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},  {&_swigt__p_OSG__ParticleSystemRefPtr, _p_OSG__ParticleSystemRefPtrTo_p_OSG__FieldContainerRefPtr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldContainerType[] = {  {&_swigt__p_OSG__FieldContainerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldDescriptionBase[] = {  {&_swigt__p_OSG__FieldDescriptionBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__GenericEventDetailsRefPtr[] = {  {&_swigt__p_OSG__GenericEventDetailsRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__LuaBehavior[] = {  {&_swigt__p_OSG__LuaBehavior, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__LuaBehaviorRefPtr[] = {  {&_swigt__p_OSG__LuaBehaviorRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__LuaBehaviorType[] = {  {&_swigt__p_OSG__LuaBehaviorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__NodeRefPtr[] = {  {&_swigt__p_OSG__NodeRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ParticleSystemRefPtr[] = {  {&_swigt__p_OSG__ParticleSystemRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Project[] = {  {&_swigt__p_OSG__Project, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ProjectRefPtr[] = {  {&_swigt__p_OSG__ProjectRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ReflexiveContainer[] = {  {&_swigt__p_OSG__PhysicsWorld, _p_OSG__PhysicsWorldTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Distribution1D, _p_OSG__Distribution1DTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__TextureObjChunk, _p_OSG__TextureObjChunkTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Viewport, _p_OSG__ViewportTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__NodeCore, _p_OSG__NodeCoreTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__EventDetails, _p_OSG__EventDetailsTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__GenericEventDetails, _p_OSG__GenericEventDetailsTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Behavior, _p_OSG__BehaviorTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__LuaBehavior, _p_OSG__LuaBehaviorTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Activity, _p_OSG__ActivityTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__LuaActivity, _p_OSG__LuaActivityTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Geometry, _p_OSG__GeometryTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Effect, _p_OSG__EffectTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Sound, _p_OSG__SoundTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__PhysicsHandler, _p_OSG__PhysicsHandlerTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Component, _p_OSG__ComponentTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Animation, _p_OSG__AnimationTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__AttachmentContainer, _p_OSG__AttachmentContainerTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__FieldContainer, _p_OSG__FieldContainerTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__WindowEventProducer, _p_OSG__WindowEventProducerTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__ReflexiveContainer, 0, 0, 0},  {&_swigt__p_OSG__ParticleSystem, _p_OSG__ParticleSystemTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Attachment, _p_OSG__AttachmentTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Camera, _p_OSG__CameraTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Image, _p_OSG__ImageTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__SceneObject, _p_OSG__SceneObjectTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Distribution3D, _p_OSG__Distribution3DTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__PhysicsSpace, _p_OSG__PhysicsSpaceTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Distribution2D, _p_OSG__Distribution2DTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__SoundGroup, _p_OSG__SoundGroupTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Node, _p_OSG__NodeTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__Project, _p_OSG__ProjectTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__VideoWrapper, _p_OSG__VideoWrapperTo_p_OSG__ReflexiveContainer, 0, 0},  {&_swigt__p_OSG__PhysicsBody, _p_OSG__PhysicsBodyTo_p_OSG__ReflexiveContainer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__Scene[] = {  {&_swigt__p_OSG__Scene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__SceneObject[] = {  {&_swigt__p_OSG__SceneObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__SceneObjectRefPtr[] = {  {&_swigt__p_OSG__SceneObjectRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__SceneRefPtr[] = {  {&_swigt__p_OSG__SceneRefPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__DataType[] = {{&_swigt__p_OSG__DataType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__FieldType[] = {{&_swigt__p_OSG__FieldType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__ReflexiveContainerType[] = {{&_swigt__p_OSG__ReflexiveContainerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSG__TypeBase[] = {  {&_swigt__p_OSG__DataType, _p_OSG__DataTypeTo_p_OSG__TypeBase, 0, 0},  {&_swigt__p_OSG__BehaviorType, _p_OSG__BehaviorTypeTo_p_OSG__TypeBase, 0, 0},  {&_swigt__p_OSG__LuaBehaviorType, _p_OSG__LuaBehaviorTypeTo_p_OSG__TypeBase, 0, 0},  {&_swigt__p_OSG__TypeBase, 0, 0, 0},  {&_swigt__p_OSG__FieldType, _p_OSG__FieldTypeTo_p_OSG__TypeBase, 0, 0},  {&_swigt__p_OSG__EventProducerType, _p_OSG__EventProducerTypeTo_p_OSG__TypeBase, 0, 0},  {&_swigt__p_OSG__ReflexiveContainerType, _p_OSG__ReflexiveContainerTypeTo_p_OSG__TypeBase, 0, 0},  {&_swigt__p_OSG__FieldContainerType, _p_OSG__FieldContainerTypeTo_p_OSG__TypeBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParentContainer[] = {  {&_swigt__p_ParentContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlaneSet[] = {  {&_swigt__p_PlaneSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointType[] = {  {&_swigt__p_PointType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PointType3f[] = {  {&_swigt__p_PointType3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QuaternionType[] = {  {&_swigt__p_QuaternionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFCoreType[] = {  {&_swigt__p_SFCoreType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFParentType[] = {  {&_swigt__p_SFParentType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFTravMaskType[] = {  {&_swigt__p_SFTravMaskType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SFVolumeType[] = {  {&_swigt__p_SFVolumeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TypeObject[] = {  {&_swigt__p_TypeObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorType[] = {  {&_swigt__p_VectorType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectorType3f[] = {  {&_swigt__p_VectorType3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VolumeType[] = {  {&_swigt__p_VolumeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__signals2__connection[] = {  {&_swigt__p_boost__signals2__connection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Inherited,
  _swigc__p_MFChildrenType,
  _swigc__p_MatrixType,
  _swigc__p_OSG__Activity,
  _swigc__p_OSG__ActivityRefPtr,
  _swigc__p_OSG__Animation,
  _swigc__p_OSG__AnimationRefPtr,
  _swigc__p_OSG__ApplicationPlayer,
  _swigc__p_OSG__Attachment,
  _swigc__p_OSG__AttachmentContainer,
  _swigc__p_OSG__AttachmentContainerRefPtr,
  _swigc__p_OSG__AttachmentRefPtr,
  _swigc__p_OSG__Behavior,
  _swigc__p_OSG__BehaviorFactory,
  _swigc__p_OSG__BehaviorRefPtr,
  _swigc__p_OSG__BehaviorType,
  _swigc__p_OSG__Camera,
  _swigc__p_OSG__CameraRefPtr,
  _swigc__p_OSG__Component,
  _swigc__p_OSG__ComponentRefPtr,
  _swigc__p_OSG__DataType,
  _swigc__p_OSG__Distribution1D,
  _swigc__p_OSG__Distribution1DRefPtr,
  _swigc__p_OSG__Distribution2D,
  _swigc__p_OSG__Distribution2DRefPtr,
  _swigc__p_OSG__Distribution3D,
  _swigc__p_OSG__Distribution3DRefPtr,
  _swigc__p_OSG__Effect,
  _swigc__p_OSG__EffectRefPtr,
  _swigc__p_OSG__EventDescription,
  _swigc__p_OSG__EventDetails,
  _swigc__p_OSG__EventDetailsRefPtr,
  _swigc__p_OSG__EventProducerType,
  _swigc__p_OSG__FieldContainer,
  _swigc__p_OSG__FieldContainerRefPtr,
  _swigc__p_OSG__FieldContainerType,
  _swigc__p_OSG__FieldDescriptionBase,
  _swigc__p_OSG__FieldType,
  _swigc__p_OSG__GenericEventDetails,
  _swigc__p_OSG__GenericEventDetailsRefPtr,
  _swigc__p_OSG__Geometry,
  _swigc__p_OSG__GeometryRefPtr,
  _swigc__p_OSG__Image,
  _swigc__p_OSG__ImageRefPtr,
  _swigc__p_OSG__LuaActivity,
  _swigc__p_OSG__LuaActivityRefPtr,
  _swigc__p_OSG__LuaBehavior,
  _swigc__p_OSG__LuaBehaviorRefPtr,
  _swigc__p_OSG__LuaBehaviorType,
  _swigc__p_OSG__Node,
  _swigc__p_OSG__NodeCore,
  _swigc__p_OSG__NodeCoreRefPtr,
  _swigc__p_OSG__NodeRefPtr,
  _swigc__p_OSG__ParticleSystem,
  _swigc__p_OSG__ParticleSystemRefPtr,
  _swigc__p_OSG__PhysicsBody,
  _swigc__p_OSG__PhysicsBodyRefPtr,
  _swigc__p_OSG__PhysicsHandler,
  _swigc__p_OSG__PhysicsHandlerRefPtr,
  _swigc__p_OSG__PhysicsSpace,
  _swigc__p_OSG__PhysicsSpaceRefPtr,
  _swigc__p_OSG__PhysicsWorld,
  _swigc__p_OSG__PhysicsWorldRefPtr,
  _swigc__p_OSG__Project,
  _swigc__p_OSG__ProjectRefPtr,
  _swigc__p_OSG__ReflexiveContainer,
  _swigc__p_OSG__ReflexiveContainerType,
  _swigc__p_OSG__Scene,
  _swigc__p_OSG__SceneObject,
  _swigc__p_OSG__SceneObjectRefPtr,
  _swigc__p_OSG__SceneRefPtr,
  _swigc__p_OSG__Sound,
  _swigc__p_OSG__SoundGroup,
  _swigc__p_OSG__SoundGroupRefPtr,
  _swigc__p_OSG__SoundRefPtr,
  _swigc__p_OSG__TextureObjChunk,
  _swigc__p_OSG__TextureObjChunkRefPtr,
  _swigc__p_OSG__TypeBase,
  _swigc__p_OSG__VideoWrapper,
  _swigc__p_OSG__VideoWrapperRefPtr,
  _swigc__p_OSG__Viewport,
  _swigc__p_OSG__ViewportRefPtr,
  _swigc__p_OSG__WindowEventProducer,
  _swigc__p_OSG__WindowEventProducerRefPtr,
  _swigc__p_ParentContainer,
  _swigc__p_PlaneSet,
  _swigc__p_PointType,
  _swigc__p_PointType3f,
  _swigc__p_QuaternionType,
  _swigc__p_SFCoreType,
  _swigc__p_SFParentType,
  _swigc__p_SFTravMaskType,
  _swigc__p_SFVolumeType,
  _swigc__p_TypeObject,
  _swigc__p_ValueType,
  _swigc__p_VectorType,
  _swigc__p_VectorType3f,
  _swigc__p_VolumeType,
  _swigc__p_boost__signals2__connection,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_mapped_type,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

OSG::LuaManager::OpenBoundLuaLibFunctor getKabalaEngineLuaBindingsLibFunctor(void)
{
    return boost::bind(&luaopen_KabalaEngine, _1);
}

void push_Behavior_on_lua(lua_State* L, OSG::BehaviorRefPtr value)
{
    OSG::BehaviorRefPtr * resultptr = new OSG::BehaviorRefPtr((const OSG::BehaviorRefPtr &) value);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OSG__BehaviorRefPtr,1);
}
